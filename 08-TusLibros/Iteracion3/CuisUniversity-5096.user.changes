

----STARTUP---- (9 June 2022 19:50:40) as /home/clinux01/Documentos/linux64 (1)/CuisUniversity-5096.image!


----End fileIn of /home/clinux01/Documentos/2022-1c/08-TusLibros/Iteracion2/TusLibros-33.st----!

TestCase subclass: #InterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceTest category: 'TusLibros' stamp: 'edrr 6/9/2022 19:53:53'!
TestCase subclass: #InterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Interface category: 'TusLibros' stamp: 'edrr 6/9/2022 19:58:03'!
Object subclass: #Interface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceTest methodsFor: 'nil' stamp: 'edrr 6/9/2022 19:58:55'!
test01
	
	| cartId interface |
	interface := Interface new.
	cartId := interface createCartForClientId: '' password: ''.
	
	self assert: OrderedCollection new equals: (interface listCart: cartId).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:00:28' prior: 50474666!
test01
	
	| cartId interface |
	interface := Interface new.
	cartId := interface createCartForClientId: 'clienteValido' password: 'passwordValido'.
	
	self assert: OrderedCollection new equals: (interface listCart: cartId).! !

!testRun: #InterfaceTest #test01 stamp: 'edrr 6/9/2022 20:00:39'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:00:49'!
createCartForClientId: aString password: aString2 
	self shouldBeImplemented.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:01:23' prior: 50474688!
createCartForClientId: aClientId password: aPassword 
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:01:43' prior: 50474694!
createCartForClientId: aClientId password: aPassword 
	^1.! !

!testRun: #InterfaceTest #test01 stamp: 'edrr 6/9/2022 20:01:45'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:01:50'!
listCart: aSmallInteger 
	self shouldBeImplemented.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:02:16' prior: 50474706!
listCart: aCartId
	^OrderedCollection new.! !

!testRun: #InterfaceTest #test01 stamp: 'edrr 6/9/2022 20:02:17'!
PASSED!

!testRun: #InterfaceTest #test01 stamp: 'edrr 6/9/2022 20:02:17'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:02:28'!
test02
	
	| cartId interface |
	interface := Interface new.
	cartId := interface createCartForClientId: 'clienteValido' password: 'passwordValido'.
	
	self assert: OrderedCollection new equals: (interface listCart: cartId).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:02:55' prior: 50474720!
test02
	
	| cartId interface |
	interface := Interface new.
	cartId := interface createCartForClientId: 'clienteNoValido' password: 'passwordValido'.
	
	self assert: OrderedCollection new equals: (interface listCart: cartId).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:04:36' prior: 50474731!
test02
	
	| cartId interface |
	interface := Interface new.
	
	self should: [interface createCartForClientId: 'clienteNoValido' password: 'passwordValido'.] 
		raise: Error 
		withExceptionDo: [].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:05:25' prior: 50474742!
test02
	
	| interface |
	interface := Interface new.
	
	self should: [interface createCartForClientId: 'clienteNoValido' password: 'passwordValido'.] 
		raise: Error 
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidClientIdErrorMessage.].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:07:05' prior: 50474752!
test02
	
	| interface cartId |
	interface := Interface new.
	
	self should: [cartId := interface createCartForClientId: 'clienteNoValido' password: 'passwordValido'.] 
		raise: Error 
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidClientIdErrorMessage.
			self assert: cartId isNil].! !

!testRun: #InterfaceTest #test02 stamp: 'edrr 6/9/2022 20:07:17'!
FAILURE!

!classDefinition: #InterfaceTest category: 'TusLibros' stamp: 'edrr 6/9/2022 20:10:46'!
TestCase subclass: #InterfaceTest
	instanceVariableNames: 'loginBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:10:45' prior: 50474764!
test02
	
	| interface cartId |
	interface := Interface new.
	
	loginBehavior := [ :aClientId :aPassword | self error: Interface invalidClientIdErrorMessage].
	
	self should: [cartId := interface createCartForClientId: 'clienteNoValido' password: 'passwordValido'.] 
		raise: Error 
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidClientIdErrorMessage.
			self assert: cartId isNil].! !

!testRun: #InterfaceTest #test02 stamp: 'edrr 6/9/2022 20:11:19'!
FAILURE!

!testRun: #InterfaceTest #test02 stamp: 'edrr 6/9/2022 20:11:19'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:12:11' prior: 50474699!
createCartForClientId: aClientId password: aPassword 
	self loginClientId: aClientId password: aPassword.
	^1.! !

!testRun: #InterfaceTest #test02 stamp: 'edrr 6/9/2022 20:12:13'!
ERROR!
!Interface class methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:12:31'!
invalidClientIdErrorMessage
	self shouldBeImplemented.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:12:47' prior: 50474817!
invalidClientIdErrorMessage
	'invalid clientId'! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:12:52' prior: 50474822!
invalidClientIdErrorMessage
	^'invalid clientId'! !

!testRun: #InterfaceTest #test02 stamp: 'edrr 6/9/2022 20:12:53'!
FAILURE!

!testRun: #InterfaceTest #test02 stamp: 'edrr 6/9/2022 20:13:06'!
FAILURE!

!testRun: #InterfaceTest #test02 stamp: 'edrr 6/9/2022 20:13:06'!
FAILURE!

anError messageText!

!testRun: #InterfaceTest #test02 stamp: 'edrr 6/9/2022 20:14:04'!
FAILURE!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:14:37' prior: 50474787!
test02
	
	| interface cartId |
	interface := Interface new.
	
	loginBehavior := [ :aClientId :aPassword | self error: Interface invalidClientIdErrorMessage].
	
	self should: [cartId := interface createCartForClientId: 'clienteNoValido' password: 'passwordValido'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidClientIdErrorMessage.
			self assert: cartId isNil].! !

!testRun: #InterfaceTest #test02 stamp: 'edrr 6/9/2022 20:14:51'!
ERROR!

!testRun: #InterfaceTest #test02 stamp: 'edrr 6/9/2022 20:14:51'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:14:56'!
loginClientId: aString password: aString2 
	self shouldBeImplemented.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:18:11' prior: 50474842!
test02
	
	| interface cartId |
	interface := Interface withLoginService: self.
	
	loginBehavior := [ :aClientId :aPassword | self error: Interface invalidClientIdErrorMessage].
	
	self should: [cartId := interface createCartForClientId: 'clienteNoValido' password: 'passwordValido'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidClientIdErrorMessage.
			self assert: cartId isNil].! !

!testRun: #InterfaceTest #test02 stamp: 'edrr 6/9/2022 20:18:34'!
ERROR!

!testRun: #InterfaceTest #test02 stamp: 'edrr 6/9/2022 20:18:34'!
ERROR!
!Interface class methodsFor: 'instance creation' stamp: 'edrr 6/9/2022 20:18:41'!
withLoginService: anInterfaceTest 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithLoginService: anInterfaceTest ! !
!Interface class methodsFor: 'instance creation' stamp: 'edrr 6/9/2022 20:18:47' prior: 50474891!
withLoginService: anInterfaceTest 
	
	^self new initializeWithLoginService: anInterfaceTest ! !
!Interface class methodsFor: 'instance creation' stamp: 'edrr 6/9/2022 20:18:56' prior: 50474900!
withLoginService: aLoginService 
	
	^self new initializeWithLoginService: aLoginService ! !

!testRun: #InterfaceTest #test02 stamp: 'edrr 6/9/2022 20:19:01'!
ERROR!

!classDefinition: #Interface category: 'TusLibros' stamp: 'edrr 6/9/2022 20:19:05'!
Object subclass: #Interface
	instanceVariableNames: 'loginService'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'initialization' stamp: 'edrr 6/9/2022 20:19:05'!
initializeWithLoginService: aLoginService 
	self shouldBeImplemented.
	loginService := aLoginService.! !
!Interface methodsFor: 'initialization' stamp: 'edrr 6/9/2022 20:19:09' prior: 50474922!
initializeWithLoginService: aLoginService 
	
	loginService := aLoginService.! !

!testRun: #InterfaceTest #test02 stamp: 'edrr 6/9/2022 20:19:10'!
FAILURE!

!testRun: #InterfaceTest #test02 stamp: 'edrr 6/9/2022 20:19:16'!
FAILURE!

!testRun: #InterfaceTest #test02 stamp: 'edrr 6/9/2022 20:19:16'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:19:32' prior: 50474808!
createCartForClientId: aClientId password: aPassword 
	loginService loginClientId: aClientId password: aPassword.
	^1.! !

!testRun: #InterfaceTest #test02 stamp: 'edrr 6/9/2022 20:19:34'!
ERROR!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:19:41'!
loginClientId: aString password: aString2 
	self shouldBeImplemented.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:20:15' prior: 50474951!
loginClientId: aClientId password: aPassword 
	loginBehavior value: aClientId  value: aPassword.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:20:33' prior: 50474957!
loginClientId: aClientId password: aPassword 
	^loginBehavior value: aClientId  value: aPassword.! !

!testRun: #InterfaceTest #test02 stamp: 'edrr 6/9/2022 20:20:35'!
PASSED!

!testRun: #InterfaceTest #test01 stamp: 'edrr 6/9/2022 20:20:39'!
ERROR!

!testRun: #InterfaceTest #test02 stamp: 'edrr 6/9/2022 20:20:39'!
PASSED!

!testRun: #InterfaceTest #test01 stamp: 'edrr 6/9/2022 20:20:39'!
ERROR!
!InterfaceTest methodsFor: 'nil' stamp: 'edrr 6/9/2022 20:21:35' overrides: 16961394!
setUp 

	loginBehavior := [ :anAmount :aCreditCard | ]! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:21:45' prior: 50474980 overrides: 16961394!
setUp 

	loginBehavior := [ :aClientId :aPassword | ]! !

!testRun: #InterfaceTest #test02 stamp: 'edrr 6/9/2022 20:21:50'!
PASSED!

!testRun: #InterfaceTest #test01 stamp: 'edrr 6/9/2022 20:21:54'!
ERROR!

!testRun: #InterfaceTest #test02 stamp: 'edrr 6/9/2022 20:21:54'!
PASSED!

!testRun: #InterfaceTest #test01 stamp: 'edrr 6/9/2022 20:21:54'!
ERROR!

!testRun: #InterfaceTest #test01 stamp: 'edrr 6/9/2022 20:21:58'!
ERROR!

!testRun: #InterfaceTest #test02 stamp: 'edrr 6/9/2022 20:21:58'!
PASSED!

!testRun: #InterfaceTest #test01 stamp: 'edrr 6/9/2022 20:21:58'!
ERROR!

!testRun: #InterfaceTest #test01 stamp: 'edrr 6/9/2022 20:22:25'!
ERROR!

!testRun: #InterfaceTest #test01 stamp: 'edrr 6/9/2022 20:22:25'!
ERROR!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:22:40' prior: 50474676!
test01
	
	| cartId interface |
	interface := Interface withLoginService: self.
	cartId := interface createCartForClientId: 'clienteValido' password: 'passwordValido'.
	
	self assert: OrderedCollection new equals: (interface listCart: cartId).! !

!testRun: #InterfaceTest #test01 stamp: 'edrr 6/9/2022 20:22:42'!
PASSED!

!testRun: #InterfaceTest #test01 stamp: 'edrr 6/9/2022 20:22:44'!
PASSED!

!testRun: #InterfaceTest #test02 stamp: 'edrr 6/9/2022 20:22:44'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:23:15'!
test03
	
	| interface cartId |
	interface := Interface withLoginService: self.
	
	loginBehavior := [ :aClientId :aPassword | self error: Interface invalidPasswordErrorMessage].
	
	self should: [cartId := interface createCartForClientId: 'clienteValido' password: 'passwordNoValido'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidPasswordErrorMessage.
			self assert: cartId isNil].! !

!testRun: #InterfaceTest #test03 stamp: 'edrr 6/9/2022 20:23:27'!
ERROR!

!testRun: #InterfaceTest #test03 stamp: 'edrr 6/9/2022 20:23:27'!
ERROR!
!Interface class methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:23:32'!
invalidPasswordErrorMessage
	self shouldBeImplemented.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:23:43' prior: 50475052!
invalidPasswordErrorMessage
	'invalid password'! !

!testRun: #InterfaceTest #test03 stamp: 'edrr 6/9/2022 20:23:44'!
PASSED!
!Interface class methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:23:53' prior: 50475057!
invalidPasswordErrorMessage
	^'invalid password'! !

!testRun: #InterfaceTest #test03 stamp: 'edrr 6/9/2022 20:23:57'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:24:44'!
test01CreateCartListsNoBooks
	
	| cartId interface |
	interface := Interface withLoginService: self.
	cartId := interface createCartForClientId: 'clienteValido' password: 'passwordValido'.
	
	self assert: OrderedCollection new equals: (interface listCart: cartId).! !

!methodRemoval: InterfaceTest #test01 stamp: 'edrr 6/9/2022 20:24:44'!
test01
	
	| cartId interface |
	interface := Interface withLoginService: self.
	cartId := interface createCartForClientId: 'clienteValido' password: 'passwordValido'.
	
	self assert: OrderedCollection new equals: (interface listCart: cartId).!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:25:00'!
test01NewCartListsNoBooks
	
	| cartId interface |
	interface := Interface withLoginService: self.
	cartId := interface createCartForClientId: 'clienteValido' password: 'passwordValido'.
	
	self assert: OrderedCollection new equals: (interface listCart: cartId).! !

!methodRemoval: InterfaceTest #test01CreateCartListsNoBooks stamp: 'edrr 6/9/2022 20:25:00'!
test01CreateCartListsNoBooks
	
	| cartId interface |
	interface := Interface withLoginService: self.
	cartId := interface createCartForClientId: 'clienteValido' password: 'passwordValido'.
	
	self assert: OrderedCollection new equals: (interface listCart: cartId).!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:25:17'!
test02CreateCartWithINvalidClient
	
	| interface cartId |
	interface := Interface withLoginService: self.
	
	loginBehavior := [ :aClientId :aPassword | self error: Interface invalidClientIdErrorMessage].
	
	self should: [cartId := interface createCartForClientId: 'clienteNoValido' password: 'passwordValido'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidClientIdErrorMessage.
			self assert: cartId isNil].! !

!methodRemoval: InterfaceTest #test02 stamp: 'edrr 6/9/2022 20:25:17'!
test02
	
	| interface cartId |
	interface := Interface withLoginService: self.
	
	loginBehavior := [ :aClientId :aPassword | self error: Interface invalidClientIdErrorMessage].
	
	self should: [cartId := interface createCartForClientId: 'clienteNoValido' password: 'passwordValido'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidClientIdErrorMessage.
			self assert: cartId isNil].!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:25:23'!
test02CreateCartWithInvalidClient
	
	| interface cartId |
	interface := Interface withLoginService: self.
	
	loginBehavior := [ :aClientId :aPassword | self error: Interface invalidClientIdErrorMessage].
	
	self should: [cartId := interface createCartForClientId: 'clienteNoValido' password: 'passwordValido'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidClientIdErrorMessage.
			self assert: cartId isNil].! !

!methodRemoval: InterfaceTest #test02CreateCartWithINvalidClient stamp: 'edrr 6/9/2022 20:25:23'!
test02CreateCartWithINvalidClient
	
	| interface cartId |
	interface := Interface withLoginService: self.
	
	loginBehavior := [ :aClientId :aPassword | self error: Interface invalidClientIdErrorMessage].
	
	self should: [cartId := interface createCartForClientId: 'clienteNoValido' password: 'passwordValido'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidClientIdErrorMessage.
			self assert: cartId isNil].!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:25:36'!
test03CreateCartWithInvalidPassword
	
	| interface cartId |
	interface := Interface withLoginService: self.
	
	loginBehavior := [ :aClientId :aPassword | self error: Interface invalidPasswordErrorMessage].
	
	self should: [cartId := interface createCartForClientId: 'clienteValido' password: 'passwordNoValido'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidPasswordErrorMessage.
			self assert: cartId isNil].! !

!methodRemoval: InterfaceTest #test03 stamp: 'edrr 6/9/2022 20:25:36'!
test03
	
	| interface cartId |
	interface := Interface withLoginService: self.
	
	loginBehavior := [ :aClientId :aPassword | self error: Interface invalidPasswordErrorMessage].
	
	self should: [cartId := interface createCartForClientId: 'clienteValido' password: 'passwordNoValido'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidPasswordErrorMessage.
			self assert: cartId isNil].!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:28:03'!
test04NewCartListsNoBooks
	
	| cartId1 interface cartId2 |
	interface := Interface withLoginService: self.
	cartId1 := interface createCartForClientId: 'clienteValido' password: 'passwordValido'.
	cartId2 := interface createCartForClientId: 'clienteValido' password: 'passwordValido'.
	
	self assert: OrderedCollection new equals: (interface listCart: cartId1).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:28:49'!
createCartWithValidCredentials: interface

	^ interface createCartForClientId: 'clienteValido' password: 'passwordValido'! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:28:49' prior: 50475093!
test01NewCartListsNoBooks
	
	| cartId interface |
	interface := Interface withLoginService: self.
	cartId := self createCartWithValidCredentials: interface.
	
	self assert: OrderedCollection new equals: (interface listCart: cartId).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:28:49' prior: 50475223!
test04NewCartListsNoBooks
	
	| cartId1 interface cartId2 |
	interface := Interface withLoginService: self.
	cartId1 := self createCartWithValidCredentials: interface.
	cartId2 := interface createCartForClientId: 'clienteValido' password: 'passwordValido'.
	
	self assert: OrderedCollection new equals: (interface listCart: cartId1).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:28:49' prior: 50475255!
test04NewCartListsNoBooks
	
	| cartId1 interface cartId2 |
	interface := Interface withLoginService: self.
	cartId1 := self createCartWithValidCredentials: interface.
	cartId2 := self createCartWithValidCredentials: interface.
	
	self assert: OrderedCollection new equals: (interface listCart: cartId1).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:29:23'!
createCartWithValidCredentialsWithInterface: interface

	^ interface createCartForClientId: 'clienteValido' password: 'passwordValido'! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:29:23' prior: 50475269!
test04NewCartListsNoBooks
	
	| cartId1 interface cartId2 |
	interface := Interface withLoginService: self.
	cartId1 := self createCartWithValidCredentialsWithInterface: interface.
	cartId2 := self createCartWithValidCredentialsWithInterface: interface.
	
	self assert: OrderedCollection new equals: (interface listCart: cartId1).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:29:23' prior: 50475244!
test01NewCartListsNoBooks
	
	| cartId interface |
	interface := Interface withLoginService: self.
	cartId := self createCartWithValidCredentialsWithInterface: interface.
	
	self assert: OrderedCollection new equals: (interface listCart: cartId).! !

!methodRemoval: InterfaceTest #createCartWithValidCredentials: stamp: 'edrr 6/9/2022 20:29:23'!
createCartWithValidCredentials: interface

	^ interface createCartForClientId: 'clienteValido' password: 'passwordValido'!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:30:09'!
createCartWithInterface: interface

	^ interface createCartForClientId: 'clienteValido' password: 'passwordValido'! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:30:09' prior: 50475304!
test01NewCartListsNoBooks
	
	| cartId interface |
	interface := Interface withLoginService: self.
	cartId := self createCartWithInterface: interface.
	
	self assert: OrderedCollection new equals: (interface listCart: cartId).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:30:09' prior: 50475290!
test04NewCartListsNoBooks
	
	| cartId1 interface cartId2 |
	interface := Interface withLoginService: self.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	
	self assert: OrderedCollection new equals: (interface listCart: cartId1).! !

!methodRemoval: InterfaceTest #createCartWithValidCredentialsWithInterface: stamp: 'edrr 6/9/2022 20:30:09'!
createCartWithValidCredentialsWithInterface: interface

	^ interface createCartForClientId: 'clienteValido' password: 'passwordValido'!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:31:30' prior: 50475340!
test04NewCartListsNoBooks
	
	| cartId1 interface cartId2 |
	interface := Interface withLoginService: self.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	
	self deny: cartId1 = cartId2.! !

!testRun: #InterfaceTest #test04NewCartListsNoBooks stamp: 'edrr 6/9/2022 20:31:47'!
FAILURE!

!classDefinition: #Interface category: 'TusLibros' stamp: 'edrr 6/9/2022 20:33:36'!
Object subclass: #Interface
	instanceVariableNames: 'loginService currentCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:33:33' prior: 50474942!
createCartForClientId: aClientId password: aPassword 
	loginService loginClientId: aClientId password: aPassword.
	currentCartId := currentCartId + 1.
	^currentCartId.
	! !

!methodRemoval: Interface #loginClientId:password: stamp: 'edrr 6/9/2022 20:34:14'!
loginClientId: aString password: aString2 
	self shouldBeImplemented.!

!classDefinition: #Interface category: 'TusLibros' stamp: 'edrr 6/9/2022 20:34:26'!
Object subclass: #Interface
	instanceVariableNames: 'loginService currentCartId currentCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'initialization' stamp: 'edrr 6/9/2022 20:34:24' prior: 50474929!
initializeWithLoginService: aLoginService 
	
	loginService := aLoginService.
	currentCart := 0.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:34:37' prior: 50475382!
createCartForClientId: aClientId password: aPassword 
	loginService loginClientId: aClientId password: aPassword.
	currentCartId := currentCartId + 1.
	^currentCartId.
	! !
!Interface methodsFor: 'initialization' stamp: 'edrr 6/9/2022 20:34:41' prior: 50475403!
initializeWithLoginService: aLoginService 
	
	loginService := aLoginService.
	currentCartId := 0.! !

!classDefinition: #Interface category: 'TusLibros' stamp: 'edrr 6/9/2022 20:34:53'!
Object subclass: #Interface
	instanceVariableNames: 'loginService currentCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #InterfaceTest #test04NewCartListsNoBooks stamp: 'edrr 6/9/2022 20:34:59'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/9/2022 20:35:02'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClient stamp: 'edrr 6/9/2022 20:35:02'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'edrr 6/9/2022 20:35:02'!
PASSED!

!testRun: #InterfaceTest #test04NewCartListsNoBooks stamp: 'edrr 6/9/2022 20:35:02'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:35:46'!
test04TwoCartsHaveDiffentCardId
	
	| cartId1 interface cartId2 |
	interface := Interface withLoginService: self.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	
	self deny: cartId1 = cartId2.! !

!methodRemoval: InterfaceTest #test04NewCartListsNoBooks stamp: 'edrr 6/9/2022 20:35:46'!
test04NewCartListsNoBooks
	
	| cartId1 interface cartId2 |
	interface := Interface withLoginService: self.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	
	self deny: cartId1 = cartId2.!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:40:03'!
test05NewCartListsNoBooks
	
	| cartId interface |
	interface := Interface withLoginService: self.
	cartId := self createCartWithInterface: interface.
	interface addToCart: cartId bookIsbn: '' bookQuantity: 1.
	
	self assert: OrderedCollection new equals: (interface listCart: cartId).! !

!classDefinition: #InterfaceTest category: 'TusLibros' stamp: 'edrr 6/9/2022 20:40:49'!
TestCase subclass: #InterfaceTest
	instanceVariableNames: 'loginBehavior testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:40:47' prior: 50474986 overrides: 16961394!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	loginBehavior := [ :aClientId :aPassword | ]! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:44:07' prior: 50475470!
test05NewCartListsNoBooks
	
	| cartId interface book |
	interface := Interface withLoginService: self.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self assert: (OrderedCollection with: book) equals: (interface listCart: cartId).! !

!testRun: #InterfaceTest #test05NewCartListsNoBooks stamp: 'edrr 6/9/2022 20:44:21'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:44:27'!
addToCart: aSmallInteger bookIsbn: aString bookQuantity: aSmallInteger3 
	self shouldBeImplemented.! !

!classDefinition: #Interface category: 'TusLibros' stamp: 'edrr 6/9/2022 20:48:30'!
Object subclass: #Interface
	instanceVariableNames: 'loginService currentCartId cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:48:28' prior: 50475410!
createCartForClientId: aClientId password: aPassword 
	loginService loginClientId: aClientId password: aPassword.
	cart := Cart acceptingItemsOf: ''.
	currentCartId := currentCartId + 1.
	^currentCartId.
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:49:31' prior: 50475498!
test05NewCartListsNoBooks
	
	| cartId interface book |
	interface := Interface withLoginService: self withCatalog: testObjectsFactory defaultCatalog.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self assert: (OrderedCollection with: book) equals: (interface listCart: cartId).! !

!testRun: #InterfaceTest #test05NewCartListsNoBooks stamp: 'edrr 6/9/2022 20:49:51'!
ERROR!

!testRun: #InterfaceTest #test05NewCartListsNoBooks stamp: 'edrr 6/9/2022 20:49:51'!
ERROR!
!Interface class methodsFor: 'instance creation' stamp: 'edrr 6/9/2022 20:50:52'!
withLoginService: aLoginService withCatalog: aCatalog  
	
	^self new initializeWithLoginService: aLoginService ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:50:52' prior: 50475188!
test03CreateCartWithInvalidPassword
	
	| interface cartId |
	interface := Interface withLoginService: self withCatalog: 1.
	
	loginBehavior := [ :aClientId :aPassword | self error: Interface invalidPasswordErrorMessage].
	
	self should: [cartId := interface createCartForClientId: 'clienteValido' password: 'passwordNoValido'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidPasswordErrorMessage.
			self assert: cartId isNil].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:50:52' prior: 50475329!
test01NewCartListsNoBooks
	
	| cartId interface |
	interface := Interface withLoginService: self withCatalog: 1.
	cartId := self createCartWithInterface: interface.
	
	self assert: OrderedCollection new equals: (interface listCart: cartId).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:50:52' prior: 50475448!
test04TwoCartsHaveDiffentCardId
	
	| cartId1 interface cartId2 |
	interface := Interface withLoginService: self withCatalog: 1.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	
	self deny: cartId1 = cartId2.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:50:52' prior: 50475151!
test02CreateCartWithInvalidClient
	
	| interface cartId |
	interface := Interface withLoginService: self withCatalog: 1.
	
	loginBehavior := [ :aClientId :aPassword | self error: Interface invalidClientIdErrorMessage].
	
	self should: [cartId := interface createCartForClientId: 'clienteNoValido' password: 'passwordValido'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidClientIdErrorMessage.
			self assert: cartId isNil].! !

!methodRemoval: Interface class #withLoginService: stamp: 'edrr 6/9/2022 20:50:52'!
withLoginService: aLoginService 
	
	^self new initializeWithLoginService: aLoginService !

!testRun: #InterfaceTest #test05NewCartListsNoBooks stamp: 'edrr 6/9/2022 20:51:16'!
ERROR!

!testRun: #InterfaceTest #test05NewCartListsNoBooks stamp: 'edrr 6/9/2022 20:51:16'!
ERROR!
!Interface methodsFor: 'initialization' stamp: 'edrr 6/9/2022 20:52:15'!
initializeWithLoginService: aLoginService withCatalog: aCatalog  
	
	loginService := aLoginService.
	currentCartId := 0.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:52:15' prior: 50475560!
withLoginService: aLoginService withCatalog: aCatalog  
	
	^self new initializeWithLoginService: aLoginService withCatalog: 1 ! !

!methodRemoval: Interface #initializeWithLoginService: stamp: 'edrr 6/9/2022 20:52:15'!
initializeWithLoginService: aLoginService 
	
	loginService := aLoginService.
	currentCartId := 0.!
!Interface class methodsFor: 'instance creation' stamp: 'edrr 6/9/2022 20:52:22' prior: 50475646!
withLoginService: aLoginService withCatalog: aCatalog  
	
	^self new initializeWithLoginService: aLoginService withCatalog: aCatalog. ! !

!classDefinition: #Interface category: 'TusLibros' stamp: 'edrr 6/9/2022 20:52:46'!
Object subclass: #Interface
	instanceVariableNames: 'loginService currentCartId cart catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'initialization' stamp: 'edrr 6/9/2022 20:52:44' prior: 50475639!
initializeWithLoginService: aLoginService withCatalog: aCatalog  
	
	loginService := aLoginService.
	currentCartId := 0.
	catalog := aCatalog.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:52:59' prior: 50475529!
createCartForClientId: aClientId password: aPassword 
	loginService loginClientId: aClientId password: aPassword.
	cart := Cart acceptingItemsOf: catalog.
	currentCartId := currentCartId + 1.
	^currentCartId.
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:55:11' prior: 50475515!
addToCart: aCartId bookIsbn: aBookIsbn bookQuantity: aQuantity 
	cart add: aQuantity of: aBookIsbn.! !

!testRun: #InterfaceTest #test05NewCartListsNoBooks stamp: 'edrr 6/9/2022 20:55:19'!
FAILURE!

!testRun: #InterfaceTest #test05NewCartListsNoBooks stamp: 'edrr 6/9/2022 20:55:19'!
FAILURE!
!Cart methodsFor: 'nil' stamp: 'edrr 6/9/2022 20:58:02'!
items
	^items copy.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:58:22' prior: 50474711!
listCart: aCartId
	^cart items.! !

!testRun: #InterfaceTest #test05NewCartListsNoBooks stamp: 'edrr 6/9/2022 20:58:33'!
PASSED!

!testRun: #InterfaceTest #test05NewCartListsNoBooks stamp: 'edrr 6/9/2022 20:58:39'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/9/2022 20:58:42'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClient stamp: 'edrr 6/9/2022 20:58:42'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'edrr 6/9/2022 20:58:42'!
PASSED!

!testRun: #InterfaceTest #test04TwoCartsHaveDiffentCardId stamp: 'edrr 6/9/2022 20:58:42'!
PASSED!

!testRun: #InterfaceTest #test05NewCartListsNoBooks stamp: 'edrr 6/9/2022 20:58:42'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:58:58' prior: 50475597!
test04TwoCartsHaveDiffentCardId
	
	| cartId1 interface cartId2 |
	interface := Interface withLoginService: self withCatalog: testObjectsFactory defaultCatalog.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	
	self deny: cartId1 = cartId2.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:59:04' prior: 50475567!
test03CreateCartWithInvalidPassword
	
	| interface cartId |
	interface := Interface withLoginService: self withCatalog: testObjectsFactory defaultCatalog.
	
	loginBehavior := [ :aClientId :aPassword | self error: Interface invalidPasswordErrorMessage].
	
	self should: [cartId := interface createCartForClientId: 'clienteValido' password: 'passwordNoValido'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidPasswordErrorMessage.
			self assert: cartId isNil].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:59:07' prior: 50475609!
test02CreateCartWithInvalidClient
	
	| interface cartId |
	interface := Interface withLoginService: self withCatalog: testObjectsFactory defaultCatalog.
	
	loginBehavior := [ :aClientId :aPassword | self error: Interface invalidClientIdErrorMessage].
	
	self should: [cartId := interface createCartForClientId: 'clienteNoValido' password: 'passwordValido'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidClientIdErrorMessage.
			self assert: cartId isNil].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:59:11' prior: 50475586!
test01NewCartListsNoBooks
	
	| cartId interface |
	interface := Interface withLoginService: self withCatalog: testObjectsFactory defaultCatalog.
	cartId := self createCartWithInterface: interface.
	
	self assert: OrderedCollection new equals: (interface listCart: cartId).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:59:32'!
createInterface

	^ Interface withLoginService: self withCatalog: testObjectsFactory defaultCatalog! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:59:32' prior: 50475786!
test01NewCartListsNoBooks
	
	| cartId interface |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	
	self assert: OrderedCollection new equals: (interface listCart: cartId).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:59:32' prior: 50475766!
test02CreateCartWithInvalidClient
	
	| interface cartId |
	interface := self createInterface.
	
	loginBehavior := [ :aClientId :aPassword | self error: Interface invalidClientIdErrorMessage].
	
	self should: [cartId := interface createCartForClientId: 'clienteNoValido' password: 'passwordValido'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidClientIdErrorMessage.
			self assert: cartId isNil].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:59:32' prior: 50475746!
test03CreateCartWithInvalidPassword
	
	| interface cartId |
	interface := self createInterface.
	
	loginBehavior := [ :aClientId :aPassword | self error: Interface invalidPasswordErrorMessage].
	
	self should: [cartId := interface createCartForClientId: 'clienteValido' password: 'passwordNoValido'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidPasswordErrorMessage.
			self assert: cartId isNil].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:59:32' prior: 50475539!
test05NewCartListsNoBooks
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self assert: (OrderedCollection with: book) equals: (interface listCart: cartId).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 20:59:32' prior: 50475733!
test04TwoCartsHaveDiffentCardId
	
	| cartId1 interface cartId2 |
	interface := self createInterface.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	
	self deny: cartId1 = cartId2.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 21:00:28'!
test05ListAddedBookToCart
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self assert: (OrderedCollection with: book) equals: (interface listCart: cartId).! !

!methodRemoval: InterfaceTest #test05NewCartListsNoBooks stamp: 'edrr 6/9/2022 21:00:28'!
test05NewCartListsNoBooks
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self assert: (OrderedCollection with: book) equals: (interface listCart: cartId).!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 21:00:58'!
test05ListCartWithAddedBook
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self assert: (OrderedCollection with: book) equals: (interface listCart: cartId).! !

!methodRemoval: InterfaceTest #test05ListAddedBookToCart stamp: 'edrr 6/9/2022 21:00:58'!
test05ListAddedBookToCart
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self assert: (OrderedCollection with: book) equals: (interface listCart: cartId).!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 21:02:48'!
test06ListCartWithAddedBook
	
	| cartId1 interface book cartId2 |
	interface := self createInterface.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 bookIsbn: book bookQuantity: 1.
	interface addToCart: cartId2 bookIsbn: book bookQuantity: 1.
	
	self assert: (OrderedCollection with: book) equals: (interface listCart: cartId1).
	self assert: (OrderedCollection with: book) equals: (interface listCart: cartId2).! !

!testRun: #InterfaceTest #test06ListCartWithAddedBook stamp: 'edrr 6/9/2022 21:02:55'!
FAILURE!

!classDefinition: #Interface category: 'TusLibros' stamp: 'edrr 6/9/2022 21:06:01'!
Object subclass: #Interface
	instanceVariableNames: 'loginService currentCartId cart catalog cart2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 21:05:59' prior: 50475682!
createCartForClientId: aClientId password: aPassword 
	loginService loginClientId: aClientId password: aPassword.
	cart := Cart acceptingItemsOf: catalog.
	cart2 := Cart acceptingItemsOf: catalog.
	currentCartId := currentCartId + 1.
	^currentCartId.
	! !

!testRun: #InterfaceTest #test06ListCartWithAddedBook stamp: 'edrr 6/9/2022 21:06:12'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 21:09:04' prior: 50475692!
addToCart: aCartId bookIsbn: aBookIsbn bookQuantity: aQuantity 
	aCartId = 1 ifTrue: [cart add: aQuantity of: aBookIsbn].
	aCartId = 2 ifTrue: [cart2 add: aQuantity of: aBookIsbn].! !

!testRun: #InterfaceTest #test06ListCartWithAddedBook stamp: 'edrr 6/9/2022 21:09:10'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/9/2022 21:09:10'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClient stamp: 'edrr 6/9/2022 21:09:10'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'edrr 6/9/2022 21:09:10'!
PASSED!

!testRun: #InterfaceTest #test04TwoCartsHaveDiffentCardId stamp: 'edrr 6/9/2022 21:09:10'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithAddedBook stamp: 'edrr 6/9/2022 21:09:10'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithAddedBook stamp: 'edrr 6/9/2022 21:09:10'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/9/2022 21:09:13'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClient stamp: 'edrr 6/9/2022 21:09:13'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'edrr 6/9/2022 21:09:13'!
PASSED!

!testRun: #InterfaceTest #test04TwoCartsHaveDiffentCardId stamp: 'edrr 6/9/2022 21:09:13'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithAddedBook stamp: 'edrr 6/9/2022 21:09:13'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithAddedBook stamp: 'edrr 6/9/2022 21:09:13'!
PASSED!

!classDefinition: #Interface category: 'TusLibros' stamp: 'edrr 6/9/2022 21:09:53'!
Object subclass: #Interface
	instanceVariableNames: 'loginService currentCartId cart catalog cart2 carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'initialization' stamp: 'edrr 6/9/2022 21:09:50' prior: 50475674!
initializeWithLoginService: aLoginService withCatalog: aCatalog  
	
	loginService := aLoginService.
	currentCartId := 0.
	catalog := aCatalog.
	carts := OrderedCollection new.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 21:10:13' prior: 50475964!
createCartForClientId: aClientId password: aPassword 
	loginService loginClientId: aClientId password: aPassword.
	carts := Cart acceptingItemsOf: catalog.
	currentCartId := currentCartId + 1.
	^currentCartId.
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 21:10:24' prior: 50476044!
createCartForClientId: aClientId password: aPassword 
	loginService loginClientId: aClientId password: aPassword.
	carts add: (Cart acceptingItemsOf: catalog).
	currentCartId := currentCartId + 1.
	^currentCartId.
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 21:10:31' prior: 50476054!
createCartForClientId: aClientId password: aPassword 
	loginService loginClientId: aClientId password: aPassword.
	
	carts add: (Cart acceptingItemsOf: catalog).
	
	currentCartId := currentCartId + 1.
	^currentCartId.
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 21:11:34' prior: 50475978!
addToCart: aCartId bookIsbn: aBookIsbn bookQuantity: aQuantity 
	(carts at: 1) add: aQuantity of: aBookIsbn.! !

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/9/2022 21:11:39'!
ERROR!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClient stamp: 'edrr 6/9/2022 21:11:39'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'edrr 6/9/2022 21:11:39'!
PASSED!

!testRun: #InterfaceTest #test04TwoCartsHaveDiffentCardId stamp: 'edrr 6/9/2022 21:11:39'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithAddedBook stamp: 'edrr 6/9/2022 21:11:39'!
ERROR!

!testRun: #InterfaceTest #test06ListCartWithAddedBook stamp: 'edrr 6/9/2022 21:11:39'!
ERROR!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/9/2022 21:11:44'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 21:12:00' prior: 50475707!
listCart: aCartId
	^(carts at: aCartId) items.! !

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/9/2022 21:12:01'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClient stamp: 'edrr 6/9/2022 21:12:02'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'edrr 6/9/2022 21:12:02'!
PASSED!

!testRun: #InterfaceTest #test04TwoCartsHaveDiffentCardId stamp: 'edrr 6/9/2022 21:12:02'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/9/2022 21:12:02'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithAddedBook stamp: 'edrr 6/9/2022 21:12:02'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithAddedBook stamp: 'edrr 6/9/2022 21:12:02'!
FAILURE!

!testRun: #InterfaceTest #test06ListCartWithAddedBook stamp: 'edrr 6/9/2022 21:12:02'!
FAILURE!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/9/2022 21:12:08'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClient stamp: 'edrr 6/9/2022 21:12:08'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'edrr 6/9/2022 21:12:08'!
PASSED!

!testRun: #InterfaceTest #test04TwoCartsHaveDiffentCardId stamp: 'edrr 6/9/2022 21:12:08'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithAddedBook stamp: 'edrr 6/9/2022 21:12:08'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithAddedBook stamp: 'edrr 6/9/2022 21:12:08'!
FAILURE!

!testRun: #InterfaceTest #test06ListCartWithAddedBook stamp: 'edrr 6/9/2022 21:12:08'!
FAILURE!

carts at: aCartId!

carts!
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 21:14:24' prior: 50476074!
addToCart: aCartId bookIsbn: aBookIsbn bookQuantity: aQuantity 
	(carts at: aCartId) add: aQuantity of: aBookIsbn.! !

!testRun: #InterfaceTest #test06ListCartWithAddedBook stamp: 'edrr 6/9/2022 21:14:25'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/9/2022 21:14:27'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClient stamp: 'edrr 6/9/2022 21:14:27'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'edrr 6/9/2022 21:14:27'!
PASSED!

!testRun: #InterfaceTest #test04TwoCartsHaveDiffentCardId stamp: 'edrr 6/9/2022 21:14:27'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithAddedBook stamp: 'edrr 6/9/2022 21:14:27'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithAddedBook stamp: 'edrr 6/9/2022 21:14:27'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 21:14:53'!
test06ListTwoCartsWithAddedBook
	
	| cartId1 interface book cartId2 |
	interface := self createInterface.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 bookIsbn: book bookQuantity: 1.
	interface addToCart: cartId2 bookIsbn: book bookQuantity: 1.
	
	self assert: (OrderedCollection with: book) equals: (interface listCart: cartId1).
	self assert: (OrderedCollection with: book) equals: (interface listCart: cartId2).! !

!methodRemoval: InterfaceTest #test06ListCartWithAddedBook stamp: 'edrr 6/9/2022 21:14:53'!
test06ListCartWithAddedBook
	
	| cartId1 interface book cartId2 |
	interface := self createInterface.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 bookIsbn: book bookQuantity: 1.
	interface addToCart: cartId2 bookIsbn: book bookQuantity: 1.
	
	self assert: (OrderedCollection with: book) equals: (interface listCart: cartId1).
	self assert: (OrderedCollection with: book) equals: (interface listCart: cartId2).!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 21:19:31'!
test07AddBookToCartWithInvalidCartId
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self assert: (OrderedCollection with: book) equals: (interface listCart: cartId).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 21:20:03' prior: 50476223!
test07AddBookToCartWithInvalidCartId
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: 'a' bookIsbn: book bookQuantity: 1.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 21:21:01' prior: 50476238!
test07AddBookToCartWithInvalidCartId
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	self should: [interface addToCart: 'a' bookIsbn: book bookQuantity: 1.] 
		raise: Error 
		withExceptionDo: []. ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 21:21:18' prior: 50476250!
test07AddBookToCartWithInvalidCartId
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	self should: [interface addToCart: 'a' bookIsbn: book bookQuantity: 1.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: []. ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 21:22:28' prior: 50476264!
test07AddBookToCartWithInvalidCartId
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	self should: [interface addToCart: 'a' bookIsbn: book bookQuantity: 1.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidCartIdErrorMessage.]. ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 21:24:56' prior: 50476278!
test07AddBookToCartWithInvalidCartId
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	self should: [interface addToCart: 'a' bookIsbn: book bookQuantity: 1.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidCartIdErrorMessage.]. ! !

!testRun: #InterfaceTest #test07AddBookToCartWithInvalidCartId stamp: 'edrr 6/9/2022 21:25:05'!
ERROR!

!testRun: #InterfaceTest #test07AddBookToCartWithInvalidCartId stamp: 'edrr 6/9/2022 21:25:05'!
ERROR!
!Interface class methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 21:25:10'!
invalidCartIdErrorMessage
	self shouldBeImplemented.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 21:25:21' prior: 50476318!
invalidCartIdErrorMessage
	^'invalid card id'! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'edrr 6/9/2022 21:25:24' prior: 50476323!
invalidCartIdErrorMessage
	^'invalid cart id'! !

!testRun: #InterfaceTest #test07AddBookToCartWithInvalidCartId stamp: 'edrr 6/9/2022 21:25:42'!
FAILURE!

----QUIT----(9 June 2022 21:25:50) CuisUniversity-5096.image priorSource: 4557982!

----STARTUP---- (11 June 2022 17:28:09) as /home/manuel/Facultad/Inge1_1C2022/Ejercicios/linux64 (2)/CuisUniversity-5096.image!


----End fileIn of /home/manuel/Descargas/tus libros it3/TusLibros.st----!

!classDefinition: #InterfaceTest category: 'TusLibros' stamp: 'edrr 6/11/2022 18:47:34'!
TestCase subclass: #InterfaceTest
	instanceVariableNames: 'authBehavior testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 18:47:34' prior: 50474369!
loginClientId: aClientId password: aPassword 
	^authBehavior value: aClientId  value: aPassword.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 18:47:34' prior: 50474410!
test03CreateCartWithInvalidPassword
	
	| interface cartId |
	interface := self createInterface.
	
	authBehavior := [ :aClientId :aPassword | self error: Interface invalidPasswordErrorMessage].
	
	self should: [cartId := interface createCartForClientId: 'clienteValido' password: 'passwordNoValido'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidPasswordErrorMessage.
			self assert: cartId isNil].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 18:47:34' prior: 50474376 overrides: 16961394!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	authBehavior := [ :aClientId :aPassword | ]! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 18:47:34' prior: 50474392!
test02CreateCartWithInvalidClient
	
	| interface cartId |
	interface := self createInterface.
	
	authBehavior := [ :aClientId :aPassword | self error: Interface invalidClientIdErrorMessage].
	
	self should: [cartId := interface createCartForClientId: 'clienteNoValido' password: 'passwordValido'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidClientIdErrorMessage.
			self assert: cartId isNil].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 18:48:57' prior: 50474914!
test02CreateCartWithInvalidClient
	
	| interface cartId |
	interface := self createInterface.
	
	authBehavior := [ :aClientId :aPassword | false].
	
	self should: [cartId := interface createCartForClientId: 'clienteNoValido' password: 'passwordValido'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidClientIdErrorMessage.
			self assert: cartId isNil].! !

!classDefinition: #Interface category: 'TusLibros' stamp: 'edrr 6/11/2022 18:49:26'!
Object subclass: #Interface
	instanceVariableNames: 'authService currentCartId cart catalog cart2 carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 18:49:26' prior: 50474727!
createCartForClientId: aClientId password: aPassword 
	authService loginClientId: aClientId password: aPassword.
	
	carts add: (Cart acceptingItemsOf: catalog).
	
	currentCartId := currentCartId + 1.
	^currentCartId.
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 18:49:26' prior: 50474741!
initializeWithLoginService: aLoginService withCatalog: aCatalog  
	
	authService := aLoginService.
	currentCartId := 0.
	catalog := aCatalog.
	carts := OrderedCollection new.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 18:49:51'!
validateClientId: aClientId password: aPassword 
	^authBehavior value: aClientId  value: aPassword.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 18:49:51' prior: 50474958!
createCartForClientId: aClientId password: aPassword 
	authService validateClientId: aClientId password: aPassword.
	
	carts add: (Cart acceptingItemsOf: catalog).
	
	currentCartId := currentCartId + 1.
	^currentCartId.
	! !

!methodRemoval: InterfaceTest #loginClientId:password: stamp: 'edrr 6/11/2022 18:49:51'!
loginClientId: aClientId password: aPassword 
	^authBehavior value: aClientId  value: aPassword.!
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 18:51:21' prior: 50474984!
createCartForClientId: aClientId password: aPassword 
	(authService validateClientId: aClientId password: aPassword) ifFalse: [self error: self class invalidAuthenticationErrorMessage ].
	
	carts add: (Cart acceptingItemsOf: catalog).
	
	currentCartId := currentCartId + 1.
	^currentCartId.
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 18:52:19' prior: 50474933!
test02CreateCartWithInvalidClient
	
	| interface cartId |
	interface := self createInterface.
	
	authBehavior := [ :aClientId :aPassword | false].
	
	self should: [cartId := interface createCartForClientId: 'clienteNoValido' password: 'passwordValido'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidAuthenticationErrorMessage.
			self assert: cartId isNil].! !

!testRun: #InterfaceTest #test02CreateCartWithInvalidClient stamp: 'edrr 6/11/2022 18:52:23'!
ERROR!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClient stamp: 'edrr 6/11/2022 18:52:23'!
ERROR!
!Interface class methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 18:52:29'!
invalidAuthenticationErrorMessage
	self shouldBeImplemented.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 18:52:47' prior: 50475036!
invalidAuthenticationErrorMessage
	^'authentication error'! !

!testRun: #InterfaceTest #test02CreateCartWithInvalidClient stamp: 'edrr 6/11/2022 18:52:52'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClient stamp: 'edrr 6/11/2022 18:52:55'!
PASSED!

!methodRemoval: InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'edrr 6/11/2022 18:53:17'!
test03CreateCartWithInvalidPassword
	
	| interface cartId |
	interface := self createInterface.
	
	authBehavior := [ :aClientId :aPassword | self error: Interface invalidPasswordErrorMessage].
	
	self should: [cartId := interface createCartForClientId: 'clienteValido' password: 'passwordNoValido'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidPasswordErrorMessage.
			self assert: cartId isNil].!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 18:53:35'!
test02CreateCartWithInvalidAuthentication
	
	| interface cartId |
	interface := self createInterface.
	
	authBehavior := [ :aClientId :aPassword | false].
	
	self should: [cartId := interface createCartForClientId: 'clienteNoValido' password: 'passwordValido'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidAuthenticationErrorMessage.
			self assert: cartId isNil].! !

!methodRemoval: InterfaceTest #test02CreateCartWithInvalidClient stamp: 'edrr 6/11/2022 18:53:35'!
test02CreateCartWithInvalidClient
	
	| interface cartId |
	interface := self createInterface.
	
	authBehavior := [ :aClientId :aPassword | false].
	
	self should: [cartId := interface createCartForClientId: 'clienteNoValido' password: 'passwordValido'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidAuthenticationErrorMessage.
			self assert: cartId isNil].!
!Cart methodsFor: 'initialization' stamp: 'edrr 6/11/2022 18:58:34' prior: 50474524!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'edrr 6/11/2022 18:58:39'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'edrr 6/11/2022 18:58:39'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'edrr 6/11/2022 18:58:39'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'edrr 6/11/2022 18:58:39'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'edrr 6/11/2022 18:58:39'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'edrr 6/11/2022 18:58:39'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'edrr 6/11/2022 18:58:39'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'edrr 6/11/2022 18:58:39'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'edrr 6/11/2022 18:58:46'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'edrr 6/11/2022 18:58:46'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'edrr 6/11/2022 18:58:46'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'edrr 6/11/2022 18:58:46'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'edrr 6/11/2022 18:58:46'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'edrr 6/11/2022 18:58:46'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'edrr 6/11/2022 18:58:50'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'edrr 6/11/2022 18:58:50'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'edrr 6/11/2022 18:58:50'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'edrr 6/11/2022 18:58:50'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'edrr 6/11/2022 18:58:50'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'edrr 6/11/2022 18:58:50'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'edrr 6/11/2022 18:58:50'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'edrr 6/11/2022 18:58:50'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'edrr 6/11/2022 18:58:50'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'edrr 6/11/2022 18:58:50'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'edrr 6/11/2022 18:58:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'edrr 6/11/2022 18:58:50'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'edrr 6/11/2022 18:58:50'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'edrr 6/11/2022 18:58:50'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/11/2022 18:58:50'!
ERROR!

!testRun: #InterfaceTest #test02CreateCartWithInvalidAuthentication stamp: 'edrr 6/11/2022 18:58:50'!
PASSED!

!testRun: #InterfaceTest #test04TwoCartsHaveDiffentCardId stamp: 'edrr 6/11/2022 18:58:50'!
ERROR!

!testRun: #InterfaceTest #test05ListCartWithAddedBook stamp: 'edrr 6/11/2022 18:58:50'!
ERROR!

!testRun: #InterfaceTest #test06ListTwoCartsWithAddedBook stamp: 'edrr 6/11/2022 18:58:50'!
ERROR!

!testRun: #InterfaceTest #test07AddBookToCartWithInvalidCartId stamp: 'edrr 6/11/2022 18:58:50'!
ERROR!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/11/2022 18:58:54'!
ERROR!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 18:59:05' prior: 50474382!
test01NewCartListsNoBooks
	
	| cartId interface |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	
	self assert: Bag new equals: (interface listCart: cartId).! !

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/11/2022 18:59:06'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'edrr 6/11/2022 18:59:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'edrr 6/11/2022 18:59:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'edrr 6/11/2022 18:59:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'edrr 6/11/2022 18:59:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'edrr 6/11/2022 18:59:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'edrr 6/11/2022 18:59:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'edrr 6/11/2022 18:59:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'edrr 6/11/2022 18:59:10'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'edrr 6/11/2022 18:59:10'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'edrr 6/11/2022 18:59:10'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'edrr 6/11/2022 18:59:10'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'edrr 6/11/2022 18:59:10'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'edrr 6/11/2022 18:59:10'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'edrr 6/11/2022 18:59:10'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidAuthentication stamp: 'edrr 6/11/2022 18:59:10'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/11/2022 18:59:10'!
ERROR!

!testRun: #InterfaceTest #test04TwoCartsHaveDiffentCardId stamp: 'edrr 6/11/2022 18:59:10'!
ERROR!

!testRun: #InterfaceTest #test05ListCartWithAddedBook stamp: 'edrr 6/11/2022 18:59:10'!
ERROR!

!testRun: #InterfaceTest #test06ListTwoCartsWithAddedBook stamp: 'edrr 6/11/2022 18:59:10'!
ERROR!

!testRun: #InterfaceTest #test07AddBookToCartWithInvalidCartId stamp: 'edrr 6/11/2022 18:59:10'!
ERROR!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/11/2022 18:59:13'!
ERROR!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/11/2022 19:00:35'!
ERROR!
!CashierTest methodsFor: 'setup' stamp: 'edrr 6/11/2022 19:00:43' prior: 50474330 overrides: 16961394!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | true]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'edrr 6/11/2022 19:00:50'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'edrr 6/11/2022 19:00:50'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'edrr 6/11/2022 19:00:50'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'edrr 6/11/2022 19:00:50'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'edrr 6/11/2022 19:00:50'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'edrr 6/11/2022 19:00:50'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'edrr 6/11/2022 19:00:50'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'edrr 6/11/2022 19:00:50'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'edrr 6/11/2022 19:00:50'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'edrr 6/11/2022 19:00:50'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'edrr 6/11/2022 19:00:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'edrr 6/11/2022 19:00:50'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'edrr 6/11/2022 19:00:50'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'edrr 6/11/2022 19:00:50'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/11/2022 19:00:50'!
ERROR!

!testRun: #InterfaceTest #test02CreateCartWithInvalidAuthentication stamp: 'edrr 6/11/2022 19:00:50'!
PASSED!

!testRun: #InterfaceTest #test04TwoCartsHaveDiffentCardId stamp: 'edrr 6/11/2022 19:00:51'!
ERROR!

!testRun: #InterfaceTest #test05ListCartWithAddedBook stamp: 'edrr 6/11/2022 19:00:51'!
ERROR!

!testRun: #InterfaceTest #test06ListTwoCartsWithAddedBook stamp: 'edrr 6/11/2022 19:00:51'!
ERROR!

!testRun: #InterfaceTest #test07AddBookToCartWithInvalidCartId stamp: 'edrr 6/11/2022 19:00:51'!
ERROR!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/11/2022 19:00:53'!
ERROR!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/11/2022 19:01:04'!
ERROR!
!CashierTest methodsFor: 'setup' stamp: 'edrr 6/11/2022 19:01:29' prior: 50475310 overrides: 16961394!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | true].! !
!CashierTest methodsFor: 'setup' stamp: 'HernanWilkinson 6/17/2013 19:03' prior: 50475388 overrides: 16961394!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ]! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:01:53' prior: 50474907 overrides: 16961394!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	authBehavior := [ :aClientId :aPassword | true].! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'edrr 6/11/2022 19:01:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'edrr 6/11/2022 19:01:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'edrr 6/11/2022 19:01:56'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'edrr 6/11/2022 19:01:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'edrr 6/11/2022 19:01:56'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'edrr 6/11/2022 19:01:56'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'edrr 6/11/2022 19:01:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'edrr 6/11/2022 19:01:56'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'edrr 6/11/2022 19:01:56'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'edrr 6/11/2022 19:01:56'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'edrr 6/11/2022 19:01:56'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'edrr 6/11/2022 19:01:56'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'edrr 6/11/2022 19:01:56'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'edrr 6/11/2022 19:01:56'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/11/2022 19:01:56'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidAuthentication stamp: 'edrr 6/11/2022 19:01:56'!
PASSED!

!testRun: #InterfaceTest #test04TwoCartsHaveDiffentCardId stamp: 'edrr 6/11/2022 19:01:56'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithAddedBook stamp: 'edrr 6/11/2022 19:01:56'!
FAILURE!

!testRun: #InterfaceTest #test06ListTwoCartsWithAddedBook stamp: 'edrr 6/11/2022 19:01:56'!
FAILURE!

!testRun: #InterfaceTest #test07AddBookToCartWithInvalidCartId stamp: 'edrr 6/11/2022 19:01:56'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'edrr 6/11/2022 19:02:07'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'edrr 6/11/2022 19:02:07'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'edrr 6/11/2022 19:02:07'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'edrr 6/11/2022 19:02:07'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'edrr 6/11/2022 19:02:07'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'edrr 6/11/2022 19:02:07'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'edrr 6/11/2022 19:02:07'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'edrr 6/11/2022 19:02:07'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'edrr 6/11/2022 19:02:07'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'edrr 6/11/2022 19:02:07'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'edrr 6/11/2022 19:02:07'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'edrr 6/11/2022 19:02:07'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'edrr 6/11/2022 19:02:07'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'edrr 6/11/2022 19:02:07'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/11/2022 19:02:07'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidAuthentication stamp: 'edrr 6/11/2022 19:02:07'!
PASSED!

!testRun: #InterfaceTest #test04TwoCartsHaveDiffentCardId stamp: 'edrr 6/11/2022 19:02:07'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithAddedBook stamp: 'edrr 6/11/2022 19:02:07'!
FAILURE!

!testRun: #InterfaceTest #test06ListTwoCartsWithAddedBook stamp: 'edrr 6/11/2022 19:02:07'!
FAILURE!

!testRun: #InterfaceTest #test07AddBookToCartWithInvalidCartId stamp: 'edrr 6/11/2022 19:02:07'!
FAILURE!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:02:17' prior: 50474439!
test05ListCartWithAddedBook
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self assert: (Bag with: book) equals: (interface listCart: cartId).! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'edrr 6/11/2022 19:02:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'edrr 6/11/2022 19:02:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'edrr 6/11/2022 19:02:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'edrr 6/11/2022 19:02:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'edrr 6/11/2022 19:02:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'edrr 6/11/2022 19:02:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'edrr 6/11/2022 19:02:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'edrr 6/11/2022 19:02:19'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'edrr 6/11/2022 19:02:19'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'edrr 6/11/2022 19:02:19'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'edrr 6/11/2022 19:02:19'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'edrr 6/11/2022 19:02:19'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'edrr 6/11/2022 19:02:19'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'edrr 6/11/2022 19:02:19'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/11/2022 19:02:19'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidAuthentication stamp: 'edrr 6/11/2022 19:02:19'!
PASSED!

!testRun: #InterfaceTest #test04TwoCartsHaveDiffentCardId stamp: 'edrr 6/11/2022 19:02:19'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithAddedBook stamp: 'edrr 6/11/2022 19:02:19'!
PASSED!

!testRun: #InterfaceTest #test06ListTwoCartsWithAddedBook stamp: 'edrr 6/11/2022 19:02:19'!
FAILURE!

!testRun: #InterfaceTest #test07AddBookToCartWithInvalidCartId stamp: 'edrr 6/11/2022 19:02:19'!
FAILURE!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:02:33' prior: 50474453!
test06ListTwoCartsWithAddedBook
	
	| cartId1 interface book cartId2 |
	interface := self createInterface.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 bookIsbn: book bookQuantity: 1.
	interface addToCart: cartId2 bookIsbn: book bookQuantity: 1.
	
	self assert: (Bag with: book) equals: (interface listCart: cartId1).
	self assert: (Bag with: book) equals: (interface listCart: cartId2).! !

!testRun: #InterfaceTest #test06ListTwoCartsWithAddedBook stamp: 'edrr 6/11/2022 19:02:34'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToCartWithInvalidCartId stamp: 'edrr 6/11/2022 19:02:49'!
FAILURE!
!Interface methodsFor: 'initialization' stamp: 'edrr 6/11/2022 19:05:09' prior: 50474968!
initializeWithLoginService: aLoginService withCatalog: aCatalog  
	
	authService := aLoginService.
	currentCartId := 0.
	catalog := aCatalog.
	carts := Dictionary new.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:06:48' prior: 50475000!
createCartForClientId: aClientId password: aPassword 
	(authService validateClientId: aClientId password: aPassword) ifFalse: [self error: self class invalidAuthenticationErrorMessage ].
	
	carts at: currentCartId put: (Cart acceptingItemsOf: catalog).
	
	currentCartId := currentCartId + 1.
	^currentCartId.
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:07:38' prior: 50475655!
createCartForClientId: aClientId password: aPassword 
	(authService validateClientId: aClientId password: aPassword) ifFalse: [self error: self class invalidAuthenticationErrorMessage ].
	
	currentCartId := currentCartId + 1.
	
	carts at: currentCartId put: (Cart acceptingItemsOf: catalog).
	
	^currentCartId.
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:11:01' prior: 50474720!
addToCart: aCartId bookIsbn: aBookIsbn bookQuantity: aQuantity 
	(carts includesKey: aCartId) ifFalse: [self error: self class invalidCartIdErrorMessage].
	(carts at: aCartId) add: aQuantity of: aBookIsbn.! !

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/11/2022 19:11:06'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidAuthentication stamp: 'edrr 6/11/2022 19:11:06'!
PASSED!

!testRun: #InterfaceTest #test04TwoCartsHaveDiffentCardId stamp: 'edrr 6/11/2022 19:11:06'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithAddedBook stamp: 'edrr 6/11/2022 19:11:06'!
PASSED!

!testRun: #InterfaceTest #test06ListTwoCartsWithAddedBook stamp: 'edrr 6/11/2022 19:11:06'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToCartWithInvalidCartId stamp: 'edrr 6/11/2022 19:11:06'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:11:56'!
test04TwoCreatedCartsHaveDiffentCardId
	
	| cartId1 interface cartId2 |
	interface := self createInterface.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	
	self deny: cartId1 = cartId2.! !

!methodRemoval: InterfaceTest #test04TwoCartsHaveDiffentCardId stamp: 'edrr 6/11/2022 19:11:56'!
test04TwoCartsHaveDiffentCardId
	
	| cartId1 interface cartId2 |
	interface := self createInterface.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	
	self deny: cartId1 = cartId2.!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:12:35'!
test05AddBookToValidCart
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self assert: (Bag with: book) equals: (interface listCart: cartId).! !

!methodRemoval: InterfaceTest #test05ListCartWithAddedBook stamp: 'edrr 6/11/2022 19:12:35'!
test05ListCartWithAddedBook
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self assert: (Bag with: book) equals: (interface listCart: cartId).!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:13:18'!
test06AddBookToTwoValidCarts
	
	| cartId1 interface book cartId2 |
	interface := self createInterface.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 bookIsbn: book bookQuantity: 1.
	interface addToCart: cartId2 bookIsbn: book bookQuantity: 1.
	
	self assert: (Bag with: book) equals: (interface listCart: cartId1).
	self assert: (Bag with: book) equals: (interface listCart: cartId2).! !

!methodRemoval: InterfaceTest #test06ListTwoCartsWithAddedBook stamp: 'edrr 6/11/2022 19:13:18'!
test06ListTwoCartsWithAddedBook
	
	| cartId1 interface book cartId2 |
	interface := self createInterface.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 bookIsbn: book bookQuantity: 1.
	interface addToCart: cartId2 bookIsbn: book bookQuantity: 1.
	
	self assert: (Bag with: book) equals: (interface listCart: cartId1).
	self assert: (Bag with: book) equals: (interface listCart: cartId2).!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:13:55'!
test07AddBookToInvalidCart
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	self should: [interface addToCart: 'a' bookIsbn: book bookQuantity: 1.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidCartIdErrorMessage.]. ! !

!methodRemoval: InterfaceTest #test07AddBookToCartWithInvalidCartId stamp: 'edrr 6/11/2022 19:13:55'!
test07AddBookToCartWithInvalidCartId
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	self should: [interface addToCart: 'a' bookIsbn: book bookQuantity: 1.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidCartIdErrorMessage.]. !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:14:30'!
test08AddInvalidBookToCart
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	self should: [interface addToCart: 'a' bookIsbn: book bookQuantity: 1.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidCartIdErrorMessage.]. ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:15:02' prior: 50475829!
test08AddInvalidBookToCart
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemNotSellByTheStore.
	
	self should: [interface addToCart: cartId bookIsbn: book bookQuantity: 1.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidCartIdErrorMessage.]. ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:19:15' prior: 50475846!
test08AddInvalidBookToCart
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemNotSellByTheStore.
	
	self should: [interface addToCart: cartId bookIsbn: book bookQuantity: 1.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidItemErrorMessage.]. ! !

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'edrr 6/11/2022 19:19:25'!
ERROR!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'edrr 6/11/2022 19:19:25'!
ERROR!
!Interface class methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:19:32'!
invalidItemErrorMessage
	self shouldBeImplemented.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:20:11' prior: 50475885!
invalidItemErrorMessage
	^'invalid book'! !

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'edrr 6/11/2022 19:20:12'!
FAILURE!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'edrr 6/11/2022 19:20:24'!
FAILURE!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'edrr 6/11/2022 19:20:24'!
FAILURE!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:25:05' prior: 50475863!
test08AddInvalidBookToCart
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemNotSellByTheStore.
	
	self should: [interface addToCart: cartId bookIsbn: book bookQuantity: 1.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Cart new invalidItemErrorMessage.]. ! !

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'edrr 6/11/2022 19:25:20'!
PASSED!

!methodRemoval: Interface class #invalidClientIdErrorMessage stamp: 'edrr 6/11/2022 19:26:01'!
invalidClientIdErrorMessage
	^'invalid clientId'!

!methodRemoval: Interface class #invalidItemErrorMessage stamp: 'edrr 6/11/2022 19:26:07'!
invalidItemErrorMessage
	^'invalid book'!

!methodRemoval: Interface class #invalidPasswordErrorMessage stamp: 'edrr 6/11/2022 19:26:12'!
invalidPasswordErrorMessage
	^'invalid password'!

----SNAPSHOT----(11 June 2022 19:27:28) CuisUniversity-5096.image priorSource: 4557982!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:28:28'!
test09AddBookWithInvalidQuantity
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	self should: [interface addToCart: cartId bookIsbn: book bookQuantity: 0.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Cart new invalidQuantityErrorMessage.]. ! !

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'edrr 6/11/2022 19:28:32'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:30:03'!
test10ListCartWithInvalidCartId
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	self should: [interface addToCart: cartId bookIsbn: book bookQuantity: 0.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Cart new invalidQuantityErrorMessage.]. ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:31:17' prior: 50475959!
test10ListCartWithInvalidCartId
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	self should: [interface listCart: 'a'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Cart new invalidQuantityErrorMessage.]. ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:31:28' prior: 50475976!
test10ListCartWithInvalidCartId
	
	| interface |
	interface := self createInterface.
	
	self should: [interface listCart: 'a'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Cart new invalidQuantityErrorMessage.]. ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:31:53' prior: 50475992!
test10ListCartWithInvalidCartId
	
	| interface |
	interface := self createInterface.
	
	self should: [interface listCart: 'a'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidCartIdErrorMessage.]. ! !

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'edrr 6/11/2022 19:32:02'!
FAILURE!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'edrr 6/11/2022 19:32:02'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:33:08' prior: 50474737!
listCart: aCartId
	(carts includesKey: aCartId) ifFalse: [self error: self class invalidCartIdErrorMessage].
	^(carts at: aCartId) items.! !

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'edrr 6/11/2022 19:33:10'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'edrr 6/11/2022 19:33:12'!
PASSED!
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:34:16'!
assertCartIdIsValid: aCartId

	^ (carts includesKey: aCartId) ifFalse: [self error: self class invalidCartIdErrorMessage]! !
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:34:16' prior: 50475681!
addToCart: aCartId bookIsbn: aBookIsbn bookQuantity: aQuantity 
	self assertCartIdIsValid: aCartId.
	(carts at: aCartId) add: aQuantity of: aBookIsbn.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:34:16' prior: 50476023!
listCart: aCartId
	self assertCartIdIsValid: aCartId.
	^(carts at: aCartId) items.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:34:57'!
invalidCartId

	^ 'a'! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:34:57' prior: 50475796!
test07AddBookToInvalidCart
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	self should: [interface addToCart: self invalidCartId bookIsbn: book bookQuantity: 1.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidCartIdErrorMessage.]. ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:34:57' prior: 50476004!
test10ListCartWithInvalidCartId
	
	| interface |
	interface := self createInterface.
	
	self should: [interface listCart: self invalidCartId.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidCartIdErrorMessage.]. ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:37:38' prior: 50476062!
test07AddBookToInvalidCart
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	self should: [interface addToCart: self invalidCartId bookIsbn: book bookQuantity: 1.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidCartIdErrorMessage.
			self assert: (interface listCart: cartId) isEmpty]. ! !

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'edrr 6/11/2022 19:37:41'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:38:14' prior: 50475226!
test01NewCartListsNoBooks
	
	| cartId interface |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	
	self assert: (interface listCart: cartId) isEmpty.! !

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/11/2022 19:38:16'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:39:18' prior: 50475731!
test05AddBookToValidCart
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self assert: (interface listCart: cartId) includes: book.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:40:26' prior: 50476127!
test05AddBookToValidCart
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self assert: (interface listCart: cartId) includes: book.
	self assert: 1 equals: ((interface listCart: cartId) occurrencesOf: book).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:41:08' prior: 50476140!
test05AddBookToValidCart
	
	| cartId interface book cartContent |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	cartContent := interface listCart: cartId.
	self assert: (interface listCart: cartId) includes: book.
	self assert: 1 equals: ((interface listCart: cartId) occurrencesOf: book).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:41:40' prior: 50476156!
test05AddBookToValidCart
	
	| cartId interface book cartContent |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	cartContent := interface listCart: cartId.
	self assert: cartContent includes: book.
	self assert: 1 equals: (cartContent occurrencesOf: book).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:42:22' prior: 50476174!
test05AddBookToValidCart
	
	| cartId interface book cartContent |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	cartContent := interface listCart: cartId.
	self assert: cartContent includes: book.
	self assert: 1 equals: (cartContent occurrencesOf: book).
	self assert: 1 equals: cartContent size.! !

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'edrr 6/11/2022 19:42:30'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:45:46'!
assertCartId: aCartId includesOnlyOneBook: aBook forInterface: aInteface
	
	| cartContent |
	cartContent := aInteface listCart: aCartId.
	self assert: cartContent includes: aBook.
	self assert: 1 equals: (cartContent occurrencesOf: aBook).
	self assert: 1 equals: cartContent size.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:45:53' prior: 50476211!
assertCartId: aCartId includesOnlyOneBook: aBook forInterface: aInteface
	| cartContent |
	
	cartContent := aInteface listCart: aCartId.
	self assert: cartContent includes: aBook.
	self assert: 1 equals: (cartContent occurrencesOf: aBook).
	self assert: 1 equals: cartContent size.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:46:29' prior: 50476191!
test05AddBookToValidCart
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self assertCartId: cartId includesOnlyOneBook: book forInterface: interface.! !

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'edrr 6/11/2022 19:46:38'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:47:13' prior: 50475757!
test06AddBookToTwoValidCarts
	
	| cartId1 interface book cartId2 |
	interface := self createInterface.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 bookIsbn: book bookQuantity: 1.
	interface addToCart: cartId2 bookIsbn: book bookQuantity: 1.
	
	self assert: (Bag with: book) equals: (interface listCart: cartId1).
	self assert: (Bag with: book) equals: (interface listCart: cartId2).
	
	self assertCartId: cartId1 includesOnlyOneBook: book forInterface: interface.
	self assertCartId: cartId2 includesOnlyOneBook: book forInterface: interface.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:47:19' prior: 50476252!
test06AddBookToTwoValidCarts
	
	| cartId1 interface book cartId2 |
	interface := self createInterface.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 bookIsbn: book bookQuantity: 1.
	interface addToCart: cartId2 bookIsbn: book bookQuantity: 1.
	
	self assertCartId: cartId1 includesOnlyOneBook: book forInterface: interface.
	self assertCartId: cartId2 includesOnlyOneBook: book forInterface: interface.! !

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'edrr 6/11/2022 19:47:21'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:48:36'!
test06AddTwoBookToValidCart
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self assertCartId: cartId includesOnlyOneBook: book forInterface: interface.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:49:00' prior: 50476300!
test06AddTwoBookToValidCart
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId bookIsbn: book bookQuantity: 2.
	
	self assertCartId: cartId includesOnlyOneBook: book forInterface: interface.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:49:38' prior: 50476314!
test06AddTwoBookToValidCart
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId bookIsbn: book bookQuantity: 2.
	
	self assertCartId: cartId includesBook: book quantity: 2 forInterface: interface.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:50:40'!
assertCartId: aCartId includesBook: aBook quantity: aQuantity forInterface: aInteface
	| cartContent |
	
	cartContent := aInteface listCart: aCartId.
	self assert: cartContent includes: aBook.
	self assert: aQuantity equals: (cartContent occurrencesOf: aBook).
	self assert: aQuantity equals: cartContent size.! !

!methodRemoval: InterfaceTest #assertCartId:includesOnlyOneBook:forInterface: stamp: 'edrr 6/11/2022 19:50:53'!
assertCartId: aCartId includesOnlyOneBook: aBook forInterface: aInteface
	| cartContent |
	
	cartContent := aInteface listCart: aCartId.
	self assert: cartContent includes: aBook.
	self assert: 1 equals: (cartContent occurrencesOf: aBook).
	self assert: 1 equals: cartContent size.!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/11/2022 19:50:57'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidAuthentication stamp: 'edrr 6/11/2022 19:50:57'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'edrr 6/11/2022 19:50:57'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'edrr 6/11/2022 19:50:57'!
ERROR!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'edrr 6/11/2022 19:50:57'!
ERROR!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'edrr 6/11/2022 19:50:57'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'edrr 6/11/2022 19:50:57'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'edrr 6/11/2022 19:50:57'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'edrr 6/11/2022 19:50:57'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'edrr 6/11/2022 19:50:57'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:51:18' prior: 50476235!
test05AddBookToValidCart
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self assertCartId: cartId includesBook: book quantity: 1 forInterface: interface.! !

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'edrr 6/11/2022 19:51:19'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:51:38' prior: 50476277!
test06AddBookToTwoValidCarts
	
	| cartId1 interface book cartId2 |
	interface := self createInterface.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 bookIsbn: book bookQuantity: 1.
	interface addToCart: cartId2 bookIsbn: book bookQuantity: 1.
	
	self assertCartId: cartId1 includesBook: book quantity: 1 forInterface: interface.
	self assertCartId: cartId2 includesBook: book quantity: 1 forInterface: interface.! !

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'edrr 6/11/2022 19:51:39'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:53:47'!
test06AddTwoDifferentBooksToValidCart
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId bookIsbn: book bookQuantity: 2.
	
	self assertCartId: cartId includesBook: book quantity: 2 forInterface: interface.! !

!methodRemoval: InterfaceTest #test06AddTwoDifferentBooksToValidCart stamp: 'edrr 6/11/2022 19:54:54'!
test06AddTwoDifferentBooksToValidCart
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId bookIsbn: book bookQuantity: 2.
	
	self assertCartId: cartId includesBook: book quantity: 2 forInterface: interface.!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:55:30' prior: 50475904!
test08AddInvalidBookToCart
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemNotSellByTheStore.
	
	self should: [interface addToCart: cartId bookIsbn: book bookQuantity: 1.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Cart new invalidItemErrorMessage.
			]. ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:55:48' prior: 50476469!
test08AddInvalidBookToCart
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemNotSellByTheStore.
	
	self should: [interface addToCart: cartId bookIsbn: book bookQuantity: 1.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Cart new invalidItemErrorMessage.
			self assert: (interface listCart: cartId) isEmpty]. ! !

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'edrr 6/11/2022 19:55:50'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:56:29' prior: 50475939!
test09AddBookWithInvalidQuantity
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	self should: [interface addToCart: cartId bookIsbn: book bookQuantity: -1.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Cart new invalidQuantityErrorMessage.
			self assert: (interface listCart: cartId) isEmpty]. ! !

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'edrr 6/11/2022 19:56:35'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 19:56:49' prior: 50476507!
test09AddBookWithInvalidQuantity
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	self should: [interface addToCart: cartId bookIsbn: book bookQuantity: 1.1.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Cart new invalidQuantityErrorMessage.
			self assert: (interface listCart: cartId) isEmpty]. ! !

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'edrr 6/11/2022 19:56:52'!
FAILURE!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'edrr 6/11/2022 19:56:52'!
FAILURE!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'edrr 6/11/2022 19:56:56'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'edrr 6/11/2022 19:57:03'!
FAILURE!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'edrr 6/11/2022 19:57:03'!
FAILURE!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'edrr 6/11/2022 19:57:49'!
FAILURE!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'edrr 6/11/2022 19:57:49'!
FAILURE!
!Cart methodsFor: 'assertions' stamp: 'edrr 6/11/2022 19:59:25' prior: 50474517!
assertIsValidQuantity: aQuantity

	(aQuantity isInteger not or: [aQuantity strictlyPositive]) ifFalse: [ self error: self invalidQuantityErrorMessage ]! !

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'edrr 6/11/2022 19:59:38'!
FAILURE!

aQuantity isInteger not or: [aQuantity strictlyPositive]!
!Cart methodsFor: 'assertions' stamp: 'edrr 6/11/2022 20:02:18' prior: 50476570!
assertIsValidQuantity: aQuantity

	(aQuantity isInteger and: [aQuantity strictlyPositive]) ifFalse: [ self error: self invalidQuantityErrorMessage ]! !

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'edrr 6/11/2022 20:02:29'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'edrr 6/11/2022 20:02:31'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/11/2022 20:02:38'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidAuthentication stamp: 'edrr 6/11/2022 20:02:38'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'edrr 6/11/2022 20:02:38'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'edrr 6/11/2022 20:02:38'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'edrr 6/11/2022 20:02:38'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'edrr 6/11/2022 20:02:38'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'edrr 6/11/2022 20:02:38'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'edrr 6/11/2022 20:02:38'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'edrr 6/11/2022 20:02:38'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'edrr 6/11/2022 20:02:38'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'edrr 6/11/2022 20:02:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'edrr 6/11/2022 20:02:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'edrr 6/11/2022 20:02:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'edrr 6/11/2022 20:02:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'edrr 6/11/2022 20:02:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'edrr 6/11/2022 20:02:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'edrr 6/11/2022 20:02:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'edrr 6/11/2022 20:02:42'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'edrr 6/11/2022 20:02:42'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'edrr 6/11/2022 20:02:42'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'edrr 6/11/2022 20:02:42'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'edrr 6/11/2022 20:02:42'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'edrr 6/11/2022 20:02:42'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'edrr 6/11/2022 20:02:42'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/11/2022 20:02:42'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidAuthentication stamp: 'edrr 6/11/2022 20:02:42'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'edrr 6/11/2022 20:02:42'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'edrr 6/11/2022 20:02:42'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'edrr 6/11/2022 20:02:42'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'edrr 6/11/2022 20:02:42'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'edrr 6/11/2022 20:02:42'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'edrr 6/11/2022 20:02:42'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'edrr 6/11/2022 20:02:42'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'edrr 6/11/2022 20:02:42'!
PASSED!

!classDefinition: #Interface category: 'TusLibros' stamp: 'edrr 6/11/2022 20:03:50'!
Object subclass: #Interface
	instanceVariableNames: 'authService currentCartId catalog cart2 carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Interface category: 'TusLibros' stamp: 'edrr 6/11/2022 20:03:50'!
Object subclass: #Interface
	instanceVariableNames: 'authService currentCartId catalog carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:07:04'!
test11CheckOutNewCartRaisesError
	
	| cartId interface |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	
	self assert: (interface listCart: cartId) isEmpty.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:07:17'!
test11CheckOutEmptyCartRaisesError
	
	| cartId interface |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	
	self assert: (interface listCart: cartId) isEmpty.! !

!methodRemoval: InterfaceTest #test11CheckOutNewCartRaisesError stamp: 'edrr 6/11/2022 20:07:17'!
test11CheckOutNewCartRaisesError
	
	| cartId interface |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	
	self assert: (interface listCart: cartId) isEmpty.!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:12:34' prior: 50476730!
test11CheckOutEmptyCartRaisesError
	
	| cartId interface |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	
	interface checkOutCart: cartId 
		creditCardNumber: ''
		creditCardExpirationMonth: ''
		creditCardExpirationMonth: ''
		creditCardOwner: ''.
	
	self assert: (interface listCart: cartId) isEmpty.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:12:40' prior: 50476749!
test11CheckOutEmptyCartRaisesError
	
	| cartId interface |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	
	interface checkOutCart: cartId 
		creditCardNumber: ''
		creditCardExpirationMonth: ''
		creditCardExpirationYear: ''
		creditCardOwner: ''.
	
	self assert: (interface listCart: cartId) isEmpty.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:14:58' prior: 50476763!
test11CheckOutEmptyCartRaisesError
	
	| cartId interface |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	
	interface checkOutCart: cartId 
		creditCardNumber: ''
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today 
		creditCardOwner: ''.
	
	self assert: (interface listCart: cartId) isEmpty.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:15:18' prior: 50476777!
test11CheckOutEmptyCartRaisesError
	
	| cartId interface |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	
	interface checkOutCart: cartId 
		creditCardNumber: ''
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: ''.
	
	self assert: (interface listCart: cartId) isEmpty.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:17:17' prior: 50476793!
test11CheckOutEmptyCartRaisesError
	
	| cartId interface |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	
	interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	self assert: (interface listCart: cartId) isEmpty.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:18:48' prior: 50476810!
test11CheckOutEmptyCartRaisesError
	
	| cartId interface |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	
	self should: [interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidCartIdErrorMessage.
			self assert: (interface listCart: cartId) isEmpty.]. 
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:19:51' prior: 50476827!
test11CheckOutEmptyCartRaisesError
	
	| cartId interface |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	
	self should: [interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: (interface listCart: cartId) isEmpty.]. 
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:20:00' prior: 50476849!
test11CheckOutEmptyCartRaisesError
	
	| cartId interface |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	
	self should: [interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Cashier new cartCanNotBeEmptyErrorMessage.
			self assert: (interface listCart: cartId) isEmpty.]. 
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:21:54' prior: 50476871!
test11CheckOutEmptyCartRaisesError
	
	| cartId interface |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	
	self should: [interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Cashier new cartCanNotBeEmptyErrorMessage.
			self assert: (interface listCart: cartId) isEmpty.
			self assert: (interface listPurchasesClientId: '' password: '') isEmpty]. 
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:24:27' prior: 50476893!
test11CheckOutEmptyCartRaisesError
	
	| cartId interface |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	
	self should: [interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Cashier new cartCanNotBeEmptyErrorMessage.
			self assert: (interface listCart: cartId) isEmpty.
			self assert: (interface listPurchasesClientId: 'clienteValido' password: 'passwordValido') isEmpty]. 
	! !

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'edrr 6/11/2022 20:25:04'!
ERROR!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'edrr 6/11/2022 20:25:04'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:25:11'!
checkOutCart: aSmallInteger creditCardNumber: aSmallInteger2 creditCardExpirationMonth: aSmallInteger3 creditCardExpirationYear: aSmallInteger4 creditCardOwner: aString 
	self shouldBeImplemented.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:27:34' prior: 50476949!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	self error: Cashier new cartCanNotBeEmptyErrorMessage.
	! !

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'edrr 6/11/2022 20:27:36'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:27:50'!
cartCanNotBeEmptyErrorMessage
	self shouldBeImplemented.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:28:12' prior: 50476918!
test11CheckOutEmptyCartRaisesError
	
	| cartId interface |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	
	self should: [interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: (interface listCart: cartId) isEmpty.
			self assert: (interface listPurchasesClientId: 'clienteValido' password: 'passwordValido') isEmpty]. 
	! !

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'edrr 6/11/2022 20:28:15'!
FAILURE!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'edrr 6/11/2022 20:28:15'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:28:30' prior: 50476959!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	self error: Cashier cartCanNotBeEmptyErrorMessage.
	! !

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'edrr 6/11/2022 20:28:34'!
ERROR!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'edrr 6/11/2022 20:28:34'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:28:43'!
listPurchasesClientId: aString password: aString2 
	self shouldBeImplemented.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:29:11' prior: 50477025!
listPurchasesClientId: aClientId password: aPassword
	^true.! !

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'edrr 6/11/2022 20:29:12'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:29:48' prior: 50477031!
listPurchasesClientId: aClientId password: aPassword
	^OrderedCollection new.! !

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'edrr 6/11/2022 20:29:52'!
PASSED!

!methodRemoval: Cashier #cartCanNotBeEmptyErrorMessage stamp: 'edrr 6/11/2022 20:30:06'!
cartCanNotBeEmptyErrorMessage
	self shouldBeImplemented.!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'edrr 6/11/2022 20:30:13'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'edrr 6/11/2022 20:30:16'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'edrr 6/11/2022 20:30:16'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'edrr 6/11/2022 20:30:16'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'edrr 6/11/2022 20:30:16'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'edrr 6/11/2022 20:30:16'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'edrr 6/11/2022 20:30:16'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'edrr 6/11/2022 20:30:16'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'edrr 6/11/2022 20:30:16'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'edrr 6/11/2022 20:30:16'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'edrr 6/11/2022 20:30:16'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'edrr 6/11/2022 20:30:16'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'edrr 6/11/2022 20:30:16'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'edrr 6/11/2022 20:30:16'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'edrr 6/11/2022 20:30:16'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/11/2022 20:30:16'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidAuthentication stamp: 'edrr 6/11/2022 20:30:16'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'edrr 6/11/2022 20:30:16'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'edrr 6/11/2022 20:30:16'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'edrr 6/11/2022 20:30:16'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'edrr 6/11/2022 20:30:16'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'edrr 6/11/2022 20:30:16'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'edrr 6/11/2022 20:30:16'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'edrr 6/11/2022 20:30:16'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'edrr 6/11/2022 20:30:16'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'edrr 6/11/2022 20:30:16'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:31:39'!
validClientId

	^ 'clienteValido'! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:31:39' prior: 50474356!
createCartWithInterface: interface

	^ interface createCartForClientId: self validClientId password: 'passwordValido'! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:31:39' prior: 50476977!
test11CheckOutEmptyCartRaisesError
	
	| cartId interface |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	
	self should: [interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: (interface listCart: cartId) isEmpty.
			self assert: (interface listPurchasesClientId: self validClientId password: 'passwordValido') isEmpty]. 
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:32:06'!
validPassword

	^ 'passwordValido'! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:32:06' prior: 50475072!
test02CreateCartWithInvalidAuthentication
	
	| interface cartId |
	interface := self createInterface.
	
	authBehavior := [ :aClientId :aPassword | false].
	
	self should: [cartId := interface createCartForClientId: 'clienteNoValido' password: self validPassword.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidAuthenticationErrorMessage.
			self assert: cartId isNil].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:32:06' prior: 50477142!
createCartWithInterface: interface

	^ interface createCartForClientId: self validClientId password: self validPassword! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:32:06' prior: 50477149!
test11CheckOutEmptyCartRaisesError
	
	| cartId interface |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	
	self should: [interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: (interface listCart: cartId) isEmpty.
			self assert: (interface listPurchasesClientId: self validClientId password: self validPassword) isEmpty]. 
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:33:06'!
invalidClientId

	^ 'clienteNoValido'! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:33:06' prior: 50477179!
test02CreateCartWithInvalidAuthentication
	
	| interface cartId |
	interface := self createInterface.
	
	authBehavior := [ :aClientId :aPassword | false].
	
	self should: [cartId := interface createCartForClientId: self invalidClientId password: self validPassword.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidAuthenticationErrorMessage.
			self assert: cartId isNil].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:33:32'!
test02CreateCartWithInvalidClientId
	
	| interface cartId |
	interface := self createInterface.
	
	authBehavior := [ :aClientId :aPassword | false].
	
	self should: [cartId := interface createCartForClientId: self invalidClientId password: self validPassword.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidAuthenticationErrorMessage.
			self assert: cartId isNil].! !

!methodRemoval: InterfaceTest #test02CreateCartWithInvalidAuthentication stamp: 'edrr 6/11/2022 20:33:32'!
test02CreateCartWithInvalidAuthentication
	
	| interface cartId |
	interface := self createInterface.
	
	authBehavior := [ :aClientId :aPassword | false].
	
	self should: [cartId := interface createCartForClientId: self invalidClientId password: self validPassword.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidAuthenticationErrorMessage.
			self assert: cartId isNil].!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:34:31'!
test03CreateCartWithInvalidPassword
	
	| interface cartId |
	interface := self createInterface.
	
	authBehavior := [ :aClientId :aPassword | false].
	
	self should: [cartId := interface createCartForClientId: self validClientId password: self invalidPassword.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidAuthenticationErrorMessage.
			self assert: cartId isNil].! !

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'edrr 6/11/2022 20:34:45'!
ERROR!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'edrr 6/11/2022 20:34:45'!
ERROR!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:34:50'!
invalidPassword
	self shouldBeImplemented.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:35:01' prior: 50477310!
invalidPassword
	'passwordInvalido'! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:35:10' prior: 50477315!
invalidPassword
	'passwordNoValido'! !

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'edrr 6/11/2022 20:35:13'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:36:25' prior: 50475404 overrides: 16961394!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	authBehavior := [ :aClientId :aPassword | aClientId = self validClientId and: aPassword = self validPassword].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:36:47' prior: 50477329 overrides: 16961394!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	authBehavior := [ :aClientId :aPassword | aClientId = self validClientId and: (aPassword = self validPassword)].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:37:18' prior: 50477251!
test02CreateCartWithInvalidClientId
	
	| interface cartId |
	interface := self createInterface.
	
	self should: [cartId := interface createCartForClientId: self invalidClientId password: self validPassword.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidAuthenticationErrorMessage.
			self assert: cartId isNil].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:37:25' prior: 50477286!
test03CreateCartWithInvalidPassword
	
	| interface cartId |
	interface := self createInterface.
	
	self should: [cartId := interface createCartForClientId: self validClientId password: self invalidPassword.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidAuthenticationErrorMessage.
			self assert: cartId isNil].! !

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/11/2022 20:37:28'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'edrr 6/11/2022 20:37:28'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'edrr 6/11/2022 20:37:28'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'edrr 6/11/2022 20:37:28'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'edrr 6/11/2022 20:37:28'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'edrr 6/11/2022 20:37:28'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'edrr 6/11/2022 20:37:28'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'edrr 6/11/2022 20:37:28'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'edrr 6/11/2022 20:37:28'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'edrr 6/11/2022 20:37:28'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'edrr 6/11/2022 20:37:28'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'edrr 6/11/2022 20:37:28'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:39:22'!
test12CheckOutCartWithOneBook
	
	| cartId interface |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	
	
	
	self should: [interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: (interface listCart: cartId) isEmpty.
			self assert: (interface listPurchasesClientId: self validClientId password: self validPassword) isEmpty]. 
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:39:46' prior: 50477417!
test12CheckOutCartWithOneBook
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self should: [interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: (interface listCart: cartId) isEmpty.
			self assert: (interface listPurchasesClientId: self validClientId password: self validPassword) isEmpty]. 
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:40:28' prior: 50477443!
test12CheckOutCartWithOneBook
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	self assert: (interface listCart: cartId) isEmpty.
	self assert: (interface listPurchasesClientId: self validClientId password: self validPassword) isEmpty! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:41:14' prior: 50477472!
test12CheckOutCartWithOneBook
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
		
	self assert: (interface listCart: cartId) isEmpty.
	self assert: (interface listPurchasesClientId: self validClientId password: self validPassword) isEmpty! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:47:14' prior: 50477496!
test12CheckOutCartWithOneBook
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
		
	self assert: (interface listPurchasesClientId: self validClientId password: self validPassword).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:51:35' prior: 50477520!
test12CheckOutCartWithOneBook
	
	| cartId interface book purchaseList |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
		
	purchaseList := interface listPurchasesClientId: self validClientId password: self validPassword.
	self assert: (purchaseList includes: book).
	self assert: 1 equals: (purchaseList occurrencesOf: book).
	self assert: 1 equals: purchaseList size.
	self assert: 10 equals: purchaseList total.
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:53:44' prior: 50477542!
test12CheckOutCartWithOneBook
	
	| cartId interface book purchaseList transaction |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	transaction := interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	self assert: 1 equals: transaction.
		
	purchaseList := interface listPurchasesClientId: self validClientId password: self validPassword.
	self assert: (purchaseList includes: book).
	self assert: 1 equals: (purchaseList occurrencesOf: book).
	self assert: 1 equals: purchaseList size.
	self assert: 10 equals: purchaseList total.
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:55:05'!
test13CheckOutCartWithOneBook
	
	| cartId interface book transaction |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	transaction := interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	self assert: 1 equals: transaction.
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:55:31'!
test13CheckOutCartRaisesTransactionId
	
	| cartId interface book transaction |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	transaction := interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	self assert: 1 equals: transaction.
	! !

!methodRemoval: InterfaceTest #test13CheckOutCartWithOneBook stamp: 'edrr 6/11/2022 20:55:31'!
test13CheckOutCartWithOneBook
	
	| cartId interface book transaction |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	transaction := interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	self assert: 1 equals: transaction.
	!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:56:04'!
test14CheckOutTwoCartsRaisesTransactionId
	
	| cartId interface book transaction |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	transaction := interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	self assert: 1 equals: transaction.
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:56:22' prior: 50477662!
test14CheckOutTwoCartsRaisesTransactionId
	
	| cartId interface book transaction |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	transaction := interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	self assert: 1 equals: transaction.
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:56:26' prior: 50477683!
test14CheckOutTwoCartsRaisesTransactionId
	
	| cartId1 interface book transaction |
	interface := self createInterface.
	cartId1 := self createCartWithInterface: interface.
	cartId1 := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId1 bookIsbn: book bookQuantity: 1.
	
	transaction := interface checkOutCart: cartId1 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	self assert: 1 equals: transaction.
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:57:29'!
testXCheckOutCartRaisesTransactionId
	
	| cartId interface book transaction |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	transaction := interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	self assert: 1 equals: transaction.
	! !

!methodRemoval: InterfaceTest #test13CheckOutCartRaisesTransactionId stamp: 'edrr 6/11/2022 20:57:29'!
test13CheckOutCartRaisesTransactionId
	
	| cartId interface book transaction |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	transaction := interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	self assert: 1 equals: transaction.
	!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:57:40' prior: 50477729!
testXCheckOutCartRaisesTransactionId
	
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:57:53'!
testZCheckOutTwoCartsRaisesTransactionId
	
	| cartId1 interface book transaction |
	interface := self createInterface.
	cartId1 := self createCartWithInterface: interface.
	cartId1 := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId1 bookIsbn: book bookQuantity: 1.
	
	transaction := interface checkOutCart: cartId1 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	self assert: 1 equals: transaction.
	! !

!methodRemoval: InterfaceTest #test14CheckOutTwoCartsRaisesTransactionId stamp: 'edrr 6/11/2022 20:57:53'!
test14CheckOutTwoCartsRaisesTransactionId
	
	| cartId1 interface book transaction |
	interface := self createInterface.
	cartId1 := self createCartWithInterface: interface.
	cartId1 := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId1 bookIsbn: book bookQuantity: 1.
	
	transaction := interface checkOutCart: cartId1 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	self assert: 1 equals: transaction.
	!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 20:57:59' prior: 50477776!
testZCheckOutTwoCartsRaisesTransactionId
	
	! !

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'edrr 6/11/2022 20:58:11'!
ERROR!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'edrr 6/11/2022 20:58:11'!
ERROR!

!classDefinition: #Interface category: 'TusLibros' stamp: 'edrr 6/11/2022 21:10:13'!
Object subclass: #Interface
	instanceVariableNames: 'authService currentCartId catalog carts salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'initialization' stamp: 'edrr 6/11/2022 21:10:12' prior: 50475646!
initializeWithLoginService: aLoginService withCatalog: aCatalog  
	
	authService := aLoginService.
	currentCartId := 0.
	catalog := aCatalog.
	carts := Dictionary new.
	salesBook := OrderedCollection new.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 21:11:16' prior: 50477571!
test12CheckOutCartWithOneBook
	
	| cartId interface book purchaseList |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
		
	purchaseList := interface listPurchasesClientId: self validClientId password: self validPassword.
	self assert: (purchaseList includes: book).
	self assert: 1 equals: (purchaseList occurrencesOf: book).
	self assert: 1 equals: purchaseList size.
	self assert: 10 equals: purchaseList total.
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 21:13:55' prior: 50477009!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	creditCard := CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.! !

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'edrr 6/11/2022 21:14:17'!
ERROR!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'edrr 6/11/2022 21:14:17'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'edrr 6/11/2022 21:14:26'!
withCCNumber: aSmallInteger expiringOn: aMonth withOwner: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCCNumber: aSmallInteger expiringOn: aMonth withOwner: aString ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'edrr 6/11/2022 21:14:42' prior: 50477903!
withCCNumber: aSmallInteger expiringOn: aMonth withOwner: aString 
	
	^self new initializeWithCCNumber: aSmallInteger expiringOn: aMonth withOwner: aString ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'edrr 6/11/2022 21:14:53' prior: 50477915!
withCCNumber: aSmallInteger expiringOn: aMonth withOwner: aOwner 
	
	^self new initializeWithCCNumber: aSmallInteger expiringOn: aMonth withOwner: aOwner ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'edrr 6/11/2022 21:15:11' prior: 50477924!
withCCNumber: aCCNumber expiringOn: aMonth withOwner: aOwner 
	
	^self new initializeWithCCNumber: aCCNumber expiringOn: aMonth withOwner: aOwner ! !

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'edrr 6/11/2022 21:15:37'!
ERROR!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'edrr 6/11/2022 21:15:44'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration cCNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'edrr 6/11/2022 21:15:45'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration cCNumber month'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'edrr 6/11/2022 21:15:45'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration cCNumber month owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'edrr 6/11/2022 21:15:45'!
initializeWithCCNumber: aCCNumber expiringOn: aMonth withOwner: aOwner 
	self shouldBeImplemented.
	cCNumber := aCCNumber.
	month := aMonth.
	owner := aOwner.! !
!CreditCard methodsFor: 'initialization' stamp: 'edrr 6/11/2022 21:15:56' prior: 50477966!
initializeWithCCNumber: aCCNumber expiringOn: aMonth withOwner: aOwner 
	
	cCNumber := aCCNumber.
	month := aMonth.
	owner := aOwner.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'edrr 6/11/2022 21:16:03'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration ccNumber month owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 21:16:03' prior: 50477974!
initializeWithCCNumber: aCCNumber expiringOn: aMonth withOwner: aOwner 
	
	ccNumber := aCCNumber.
	month := aMonth.
	owner := aOwner.! !
!CreditCard methodsFor: 'initialization' stamp: 'edrr 6/11/2022 21:16:19' prior: 50477989!
initializeWithCCNumber: aCCNumber expiringOn: aMonth withOwner: aOwner 
	
	ccNumber := aCCNumber.
	expiration := aMonth.
	owner := aOwner.! !
!CreditCard methodsFor: 'initialization' stamp: 'edrr 6/11/2022 21:16:29' prior: 50477997!
initializeWithCCNumber: aCCNumber expiringOn: aDate withOwner: aOwner 
	
	ccNumber := aCCNumber.
	expiration := aDate.
	owner := aOwner.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'edrr 6/11/2022 21:16:40' prior: 50477933!
withCCNumber: aCCNumber expiringOn: aDate withOwner: aOwner 
	
	^self new initializeWithCCNumber: aCCNumber expiringOn: aDate withOwner: aOwner ! !

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'edrr 6/11/2022 21:16:43'!
ERROR!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'edrr 6/11/2022 21:18:17'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'edrr 6/11/2022 21:18:17'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'edrr 6/11/2022 21:18:17'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'edrr 6/11/2022 21:18:17'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'edrr 6/11/2022 21:18:17'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'edrr 6/11/2022 21:18:17'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'edrr 6/11/2022 21:18:17'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'edrr 6/11/2022 21:18:17'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'edrr 6/11/2022 21:18:17'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'edrr 6/11/2022 21:18:17'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'edrr 6/11/2022 21:18:17'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'edrr 6/11/2022 21:18:17'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'edrr 6/11/2022 21:18:17'!
ERROR!

!testRun: #InterfaceTest #testXCheckOutCartRaisesTransactionId stamp: 'edrr 6/11/2022 21:18:17'!
PASSED!

!testRun: #InterfaceTest #testZCheckOutTwoCartsRaisesTransactionId stamp: 'edrr 6/11/2022 21:18:17'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'edrr 6/11/2022 21:18:17'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 21:18:32' prior: 50477879!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	creditCard := CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.! !

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'edrr 6/11/2022 21:18:34'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 21:20:40' prior: 50477040!
listPurchasesClientId: aClientId password: aPassword
	^salesBook.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 21:24:36' prior: 50477851!
test12CheckOutCartWithOneBook
	
	| cartId interface book purchaseList |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
		
	purchaseList := interface listPurchasesClientId: self validClientId password: self validPassword.
	self assert: (purchaseList includes: book).
	self assert: 1 equals: (purchaseList occurrencesOf: book).
	self assert: 1 equals: purchaseList size.
	! !

!classDefinition: #Interface category: 'TusLibros' stamp: 'edrr 6/11/2022 21:26:50'!
Object subclass: #Interface
	instanceVariableNames: 'authService currentCartId catalog carts salesBook purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'initialization' stamp: 'edrr 6/11/2022 21:26:48' prior: 50477841!
initializeWithLoginService: aLoginService withCatalog: aCatalog  
	
	authService := aLoginService.
	currentCartId := 0.
	catalog := aCatalog.
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	purchases := Dictionary new.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'edrr 6/11/2022 21:29:26' prior: 50478075!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	creditCard := CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.! !

----QUIT----(11 June 2022 21:30:08) CuisUniversity-5096.image priorSource: 4617134!

----STARTUP---- (11 June 2022 21:34:44) as /home/javier/Documents/UBA Exactas/Actual/8_Ingenieria de Software I/1_Practica/CUIS_2/CuisUniversity-5096.image!


!classRemoval: #MarsRoverVisitorPositions stamp: 'jeo 6/11/2022 21:34:53'!
MarsRoverVisitorsOptions subclass: #MarsRoverVisitorPositions
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverVisitorHeading stamp: 'jeo 6/11/2022 21:34:54'!
MarsRoverVisitorsOptions subclass: #MarsRoverVisitorHeading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverVisitorsOptions stamp: 'jeo 6/11/2022 21:34:54'!
Object subclass: #MarsRoverVisitorsOptions
	instanceVariableNames: 'visitor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverWindow stamp: 'jeo 6/11/2022 21:34:54'!
MarsRoverVisitors subclass: #MarsRoverWindow
	instanceVariableNames: 'position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverLogger stamp: 'jeo 6/11/2022 21:34:55'!
MarsRoverVisitors subclass: #MarsRoverLogger
	instanceVariableNames: 'stream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverVisitors stamp: 'jeo 6/11/2022 21:34:55'!
Object subclass: #MarsRoverVisitors
	instanceVariableNames: 'options'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingWest stamp: 'jeo 6/11/2022 21:34:56'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingSouth stamp: 'jeo 6/11/2022 21:34:56'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingNorth stamp: 'jeo 6/11/2022 21:34:56'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingEast stamp: 'jeo 6/11/2022 21:34:57'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeading stamp: 'jeo 6/11/2022 21:34:57'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRover stamp: 'jeo 6/11/2022 21:34:58'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head visitors'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverWindowTest stamp: 'jeo 6/11/2022 21:34:58'!
TestCase subclass: #MarsRoverWindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverVisitorsTest stamp: 'jeo 6/11/2022 21:34:59'!
TestCase subclass: #MarsRoverVisitorsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverTest stamp: 'jeo 6/11/2022 21:34:59'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverLoggerTest stamp: 'jeo 6/11/2022 21:35:00'!
TestCase subclass: #MarsRoverLoggerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

----End fileIn of /home/javier/Documents/UBA Exactas/Actual/8_Ingenieria de Software I/1_Practica/CUIS_2/TusLibros.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/11/2022 21:35:23'!
FAILURE!

!testRun: #InterfaceTest #testXCheckOutCartRaisesTransactionId stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #InterfaceTest #testZCheckOutTwoCartsRaisesTransactionId stamp: 'jeo 6/11/2022 21:35:23'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/11/2022 21:35:23'!
FAILURE!

----STARTUP---- (12 June 2022 16:32:22) as /home/javier/Documents/UBA Exactas/Actual/8_Ingenieria de Software I/1_Practica/CUIS_2/CuisUniversity-5096.image!


!classRemoval: #MarsRoverVisitorPositions stamp: 'jeo 6/12/2022 16:32:38'!
MarsRoverVisitorsOptions subclass: #MarsRoverVisitorPositions
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverVisitorHeading stamp: 'jeo 6/12/2022 16:32:38'!
MarsRoverVisitorsOptions subclass: #MarsRoverVisitorHeading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverVisitorsOptions stamp: 'jeo 6/12/2022 16:32:38'!
Object subclass: #MarsRoverVisitorsOptions
	instanceVariableNames: 'visitor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverWindow stamp: 'jeo 6/12/2022 16:32:39'!
MarsRoverVisitors subclass: #MarsRoverWindow
	instanceVariableNames: 'position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverLogger stamp: 'jeo 6/12/2022 16:32:39'!
MarsRoverVisitors subclass: #MarsRoverLogger
	instanceVariableNames: 'stream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverVisitors stamp: 'jeo 6/12/2022 16:32:40'!
Object subclass: #MarsRoverVisitors
	instanceVariableNames: 'options'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingWest stamp: 'jeo 6/12/2022 16:32:40'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingSouth stamp: 'jeo 6/12/2022 16:32:40'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingNorth stamp: 'jeo 6/12/2022 16:32:41'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingEast stamp: 'jeo 6/12/2022 16:32:41'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeading stamp: 'jeo 6/12/2022 16:32:41'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRover stamp: 'jeo 6/12/2022 16:32:42'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head visitors'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverWindowTest stamp: 'jeo 6/12/2022 16:32:42'!
TestCase subclass: #MarsRoverWindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverVisitorsTest stamp: 'jeo 6/12/2022 16:32:43'!
TestCase subclass: #MarsRoverVisitorsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverTest stamp: 'jeo 6/12/2022 16:32:43'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverLoggerTest stamp: 'jeo 6/12/2022 16:32:44'!
TestCase subclass: #MarsRoverLoggerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

----End fileIn of /home/javier/Documents/UBA Exactas/Actual/8_Ingenieria de Software I/1_Practica/CUIS_2/TusLibros.st----!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 16:35:27'!
FAILURE!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 16:35:27'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 16:37:38' prior: 50503466!
listPurchasesClientId: aClientId password: aPassword
	
	^salesBook at: aClientId.! !
!Interface methodsFor: 'initialization' stamp: 'jeo 6/12/2022 16:38:17'!
initializeWithAuthService: aLoginService withCatalog: aCatalog  
	
	authService := aLoginService.
	currentCartId := 0.
	catalog := aCatalog.
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	purchases := Dictionary new.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 16:38:17' prior: 50503499!
withLoginService: aLoginService withCatalog: aCatalog  
	
	^self new initializeWithAuthService: aLoginService withCatalog: aCatalog. ! !

!methodRemoval: Interface #initializeWithLoginService:withCatalog: stamp: 'jeo 6/12/2022 16:38:17'!
initializeWithLoginService: aLoginService withCatalog: aCatalog  
	
	authService := aLoginService.
	currentCartId := 0.
	catalog := aCatalog.
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	purchases := Dictionary new.!
!Interface class methodsFor: 'instance creation' stamp: 'jeo 6/12/2022 16:38:35'!
withAuthService: aLoginService withCatalog: aCatalog  
	
	^self new initializeWithAuthService: aLoginService withCatalog: aCatalog. ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 16:38:35' prior: 50502900!
createInterface

	^ Interface withAuthService: self withCatalog: testObjectsFactory defaultCatalog! !

!methodRemoval: Interface class #withLoginService:withCatalog: stamp: 'jeo 6/12/2022 16:38:35'!
withLoginService: aLoginService withCatalog: aCatalog  
	
	^self new initializeWithAuthService: aLoginService withCatalog: aCatalog. !

Object subclass: #Sale
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'jeo 6/12/2022 16:39:26'!
Object subclass: #Sale
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checkout - private' stamp: 'jeo 6/12/2022 16:41:20' prior: 50503269!
createSale

	^ Sale of: total items: cart items.
! !
!Sale class methodsFor: 'instance creation' stamp: 'jeo 6/12/2022 16:42:48'!
of: aTotal items: aCartContent

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal items: aCartContent! !
!Sale methodsFor: 'initialization' stamp: 'jeo 6/12/2022 16:43:10'!
initializeTotal: aTotal items: aCartContent

	total := aTotal.
	items := aCartContent.! !

!methodRemoval: Sale #initializeTotal: stamp: 'jeo 6/12/2022 16:43:13'!
initializeTotal: aTotal

	total := aTotal !

!methodRemoval: Sale class #of: stamp: 'jeo 6/12/2022 16:43:19'!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal !
!Sale methodsFor: 'accessing' stamp: 'jeo 6/12/2022 16:43:39'!
items
	
	^ items! !
!Interface methodsFor: 'initialization' stamp: 'jeo 6/12/2022 16:44:28' prior: 50503613!
initializeWithAuthService: aLoginService withCatalog: aCatalog  
	
	authService := aLoginService.
	currentCartId := 0.
	catalog := aCatalog.
	carts := Dictionary new.
	salesBook := Dictionary new.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 16:49:11' prior: 50503608!
listPurchasesClientId: aClientId password: aPassword
	
	^(salesBook at: aClientId) items.! !

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 16:49:16'!
ERROR!

Object subclass: #Cart
	instanceVariableNames: 'catalog items clientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'jeo 6/12/2022 16:50:03'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items clientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'accessing' stamp: 'jeo 6/12/2022 16:50:20' prior: 50503235!
items
	^clientId.! !
!Cart methodsFor: 'accessing' stamp: 'edrr 6/9/2022 20:58:02' prior: 50503734!
items
	^items copy.! !
!Cart methodsFor: 'accessing' stamp: 'jeo 6/12/2022 16:50:43'!
clientId
	^clientId.! !
!Cart methodsFor: 'initialization' stamp: 'jeo 6/12/2022 16:51:21'!
initializeAcceptingItemsOf: aCatalog clientId: aClientId

	catalog := aCatalog.
	items := Bag new.
	clientId := aClientId.! !

!methodRemoval: Cart #initializeAcceptingItemsOf: stamp: 'jeo 6/12/2022 16:51:24'!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 16:52:05' prior: 50503447!
createCartForClientId: aClientId password: aPassword 
	(authService validateClientId: aClientId password: aPassword) ifFalse: [self error: self class invalidAuthenticationErrorMessage ].
	
	currentCartId := currentCartId + 1.
	
	carts at: currentCartId put: (Cart acceptingItemsOf: catalog clientId: aClientId).
	
	^currentCartId.
	! !
!Cart class methodsFor: 'instance creation' stamp: 'jeo 6/12/2022 16:52:47'!
acceptingItemsOf: aCatalog clientId: aClientId

	^self new initializeAcceptingItemsOf: aCatalog clientId: aClientId.! !

!methodRemoval: Cart class #acceptingItemsOf: stamp: 'jeo 6/12/2022 16:52:50'!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog !
!Cashier methodsFor: 'checkout - private' stamp: 'jeo 6/12/2022 16:53:37' prior: 50503278!
registerSale

	salesBook at: cart clientId put: self createSale.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'jeo 6/12/2022 16:53:39'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'jeo 6/12/2022 16:53:39'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'jeo 6/12/2022 16:53:39'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'jeo 6/12/2022 16:53:39'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'jeo 6/12/2022 16:53:39'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'jeo 6/12/2022 16:53:39'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'jeo 6/12/2022 16:53:42'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'jeo 6/12/2022 16:54:46' prior: 50503563!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog clientId: self validClientId.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'jeo 6/12/2022 16:54:48'!
ERROR!
!InterfaceTest class methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 16:55:47'!
createCartWithInterface: interface

	^ interface createCartForClientId: self validClientId password: self validPassword! !

!methodRemoval: InterfaceTest #createCartWithInterface: stamp: 'jeo 6/12/2022 16:55:47'!
createCartWithInterface: interface

	^ interface createCartForClientId: self validClientId password: self validPassword!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 16:55:58'!
createCartWithInterface: interface

	^ interface createCartForClientId: self validClientId password: self validPassword! !

!methodRemoval: InterfaceTest class #createCartWithInterface: stamp: 'jeo 6/12/2022 16:55:58'!
createCartWithInterface: interface

	^ interface createCartForClientId: self validClientId password: self validPassword!
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'jeo 6/12/2022 16:56:36'!
validClientId

	^ 'clienteValido'! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'jeo 6/12/2022 16:56:58'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'jeo 6/12/2022 16:56:58'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'jeo 6/12/2022 16:56:58'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'jeo 6/12/2022 16:56:58'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'jeo 6/12/2022 16:56:58'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'jeo 6/12/2022 16:56:58'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'jeo 6/12/2022 16:57:00'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 16:57:55' prior: 50502748!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: testObjectsFactory createSalesBook.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'jeo 6/12/2022 16:57:58'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'sales' stamp: 'jeo 6/12/2022 16:58:12'!
createSalesBook
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'sales' stamp: 'jeo 6/12/2022 16:58:21' prior: 50503891!
createSalesBook
	^ Dictionary new.! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'jeo 6/12/2022 16:58:22'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'jeo 6/12/2022 16:58:23'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 16:58:46' prior: 50502785!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: testObjectsFactory createSalesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 19:04' prior: 50503906!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 17:00:02' prior: 50503924!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
 	salesBook := 	testObjectsFactory createSalesBook.
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'jeo 6/12/2022 17:00:03'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 17:00:56' prior: 50503942!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
 	salesBook := 	testObjectsFactory createSalesBook.
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: total equals: (salesBook at: cart clientId).! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'jeo 6/12/2022 17:00:58'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 17:01:11' prior: 50503963!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
 	salesBook := 	testObjectsFactory createSalesBook.
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: total equals: (salesBook at: cart clientId) total.! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'jeo 6/12/2022 17:01:12'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'jeo 6/12/2022 17:01:14'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 17:01:36' prior: 50502803!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := testObjectsFactory createSalesBook.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'jeo 6/12/2022 17:01:37'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 17:01:40'!
ERROR!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #InterfaceTest #testXCheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #InterfaceTest #testZCheckOutTwoCartsRaisesTransactionId stamp: 'jeo 6/12/2022 17:01:40'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 17:01:40'!
ERROR!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:05:22' prior: 50503092!
test11CheckOutEmptyCartRaisesError
	
	| cartId interface |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	
	self should: [interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: (interface listCart: cartId) isEmpty.
	]. 
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #InterfaceTest #testXCheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!

!testRun: #InterfaceTest #testZCheckOutTwoCartsRaisesTransactionId stamp: 'jeo 6/12/2022 17:05:29'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:06:14'!
test13CheckOutCartWithTwoBooks
	
	| cartId interface book purchaseList |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 2.
	
	interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
		
	purchaseList := interface listPurchasesClientId: self validClientId password: self validPassword.
	self assert: (purchaseList includes: book).
	self assert: 2 equals: (purchaseList occurrencesOf: book).
	self assert: 2 equals: purchaseList size.
	! !

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 17:06:15'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 17:06:15'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 17:06:15'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 17:06:15'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 17:06:15'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 17:06:15'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 17:06:15'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 17:06:15'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 17:06:15'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 17:06:15'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 17:06:15'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 17:06:15'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 17:06:15'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 17:06:15'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 17:06:15'!
PASSED!

!testRun: #InterfaceTest #testXCheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 17:06:15'!
PASSED!

!testRun: #InterfaceTest #testZCheckOutTwoCartsRaisesTransactionId stamp: 'jeo 6/12/2022 17:06:15'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:13:11'!
test14CheckOutInvalidCartRaisesError
	
	| interface |
	interface := self createInterface.

	self should: [interface checkOutCart: self invalidCartId
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			
	].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:14:41' prior: 50504330!
test14CheckOutInvalidCartRaisesError
	
	| interface |
	interface := self createInterface.

	self should: [interface checkOutCart: self invalidCartId
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCartIdErrorMessage.
	].! !

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 17:14:42'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:15:59' prior: 50503429!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	(carts includesKey: aCartId) ifFalse: [self error: self class invalidCartIdErrorMessage]. 
	
	creditCard := CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.! !

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 17:16:06'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 17:16:06'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 17:16:06'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 17:16:06'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 17:16:06'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 17:16:06'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 17:16:06'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 17:16:06'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 17:16:06'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 17:16:06'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 17:16:06'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 17:16:06'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 17:16:06'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 17:16:06'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 17:16:06'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 17:16:06'!
PASSED!

!testRun: #InterfaceTest #testXCheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 17:16:06'!
PASSED!

!testRun: #InterfaceTest #testZCheckOutTwoCartsRaisesTransactionId stamp: 'jeo 6/12/2022 17:16:06'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:16:31'!
test14CheckOutSameCartTwoTimesRaisesError
	
	| interface |
	interface := self createInterface.

	self should: [interface checkOutCart: self invalidCartId
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCartIdErrorMessage.
	].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:16:49' prior: 50504447!
test14CheckOutSameCartTwoTimesRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	self should: [interface checkOutCart: self invalidCartId
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCartIdErrorMessage.
	].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:17:29' prior: 50504466!
test14CheckOutSameCartTwoTimesRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCartIdErrorMessage.
	].! !

!testRun: #InterfaceTest #test14CheckOutSameCartTwoTimesRaisesError stamp: 'jeo 6/12/2022 17:17:31'!
FAILURE!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:17:42'!
test15CheckOutSameCartTwoTimesRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCartIdErrorMessage.
	].! !

!methodRemoval: InterfaceTest #test14CheckOutSameCartTwoTimesRaisesError stamp: 'jeo 6/12/2022 17:17:42'!
test14CheckOutSameCartTwoTimesRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCartIdErrorMessage.
	].!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:18:00' prior: 50504369!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	(carts includesKey: aCartId) ifFalse: [self error: self class invalidCartIdErrorMessage]. 
	
	creditCard := CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.
	
	carts removeKey: aCartId.! !

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 17:18:19'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 17:18:19'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 17:18:19'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 17:18:19'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 17:18:19'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 17:18:19'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 17:18:19'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 17:18:19'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 17:18:19'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 17:18:19'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 17:18:19'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 17:18:19'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 17:18:19'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 17:18:19'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 17:18:19'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwoTimesRaisesError stamp: 'jeo 6/12/2022 17:18:19'!
PASSED!

!testRun: #InterfaceTest #testXCheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 17:18:19'!
PASSED!

!testRun: #InterfaceTest #testZCheckOutTwoCartsRaisesTransactionId stamp: 'jeo 6/12/2022 17:18:19'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:18:35'!
test15CheckOutSameCartTwiceRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCartIdErrorMessage.
	].! !

!methodRemoval: InterfaceTest #test15CheckOutSameCartTwoTimesRaisesError stamp: 'jeo 6/12/2022 17:18:39'!
test15CheckOutSameCartTwoTimesRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCartIdErrorMessage.
	].!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:21:06'!
test16CheckOutWithInvalidCCNumberRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory invalidCCNumber
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = CreditCard invalidCCNumberErrorMessage.
	].! !

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 17:21:20'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'jeo 6/12/2022 17:21:27'!
invalidCCNumber
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'jeo 6/12/2022 17:21:33' prior: 50504764!
invalidCCNumber
	^'1'! !

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 17:21:35'!
FAILURE!
!CreditCard methodsFor: 'initialization' stamp: 'jeo 6/12/2022 17:24:05' prior: 50503372!
initializeWithCCNumber: aCCNumber expiringOn: aDate withOwner: aOwner 
	
	ccNumber := aCCNumber.
	expiration := aDate.
	owner := aOwner.! !

TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'jeo 6/12/2022 17:24:20'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'no messages' stamp: 'jeo 6/12/2022 17:24:40'!
test01CreditCardWithLessDigitNumbersRaisesError
	
	self should: [CreditCard withNumber: 1 expirationDate: Date today owner: 'H'.]
		raise: Error 
	 	withExceptionDo: [:anError | self assert: anError messageText = CreditCard cannotCreateCreditCardWithInvalidNumberErrorDescription]! !
!CreditCardTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 17:26:23' prior: 50504795!
test01CreditCardWithLessDigitNumbersRaisesError
	
	self should: [CreditCard withCCNumber: '' expiringOn: ''  withOwner: ''.]
		raise: Error 
	 	withExceptionDo: [:anError | self assert: anError messageText = CreditCard cannotCreateCreditCardWithInvalidNumberErrorDescription]! !
!CreditCardTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 17:26:44' prior: 50504807!
test01CreditCardWithLessDigitNumbersRaisesError
	
	self should: [CreditCard withCCNumber: '' expiringOn: ''  withOwner: ''.]
		raise: Error 
	 	withExceptionDo: [:anError | self assert: anError messageText = CreditCard invalidCCNumberErrorDescription]! !

TestCase subclass: #CreditCardTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'jeo 6/12/2022 17:27:02'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 17:27:32' overrides: 16961394!
setUp

	testObjectsFactory :=  StoreTestObjectsFactory new.! !
!CreditCardTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 17:28:55' prior: 50504819!
test01CreditCardWithLessDigitNumbersRaisesError
	
	self should: [CreditCard withCCNumber: testObjectsFactory invalidCCNumber expiringOn: testObjectsFactory validCCExpDate withOwner: testObjectsFactory validCCOwner.]
		raise: Error 
	 	withExceptionDo: [:anError | self assert: anError messageText = CreditCard invalidCCNumberErrorDescription]! !

!methodRemoval: CreditCard #initializeExpiringOn: stamp: 'jeo 6/12/2022 17:29:54'!
initializeExpiringOn: aMonth 
	
	expiration := aMonth !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'jeo 6/12/2022 17:30:54'!
validCCExpDate
	^Month month: today monthIndex year: today yearNumber + 1! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'jeo 6/12/2022 17:31:07'!
validCCOwner
	^'H'! !

!testRun: #CreditCardTest #test01CreditCardWithLessDigitNumbersRaisesError stamp: 'jeo 6/12/2022 17:31:11'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardWithLessDigitNumbersRaisesError stamp: 'jeo 6/12/2022 17:31:11'!
FAILURE!
!CreditCardTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 17:31:43' prior: 50504847!
test01CreditCardWithLessDigitNumbersRaisesError
	
	self should: [CreditCard withCCNumber: testObjectsFactory invalidCCNumber expiringOn: testObjectsFactory validCCExpDate withOwner: testObjectsFactory validCCOwner.]
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | self assert: anError messageText = CreditCard invalidCCNumberErrorDescription]! !

!testRun: #CreditCardTest #test01CreditCardWithLessDigitNumbersRaisesError stamp: 'jeo 6/12/2022 17:31:44'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardWithLessDigitNumbersRaisesError stamp: 'jeo 6/12/2022 17:31:58'!
FAILURE!
!CreditCard methodsFor: 'initialization' stamp: 'jeo 6/12/2022 17:33:24' prior: 50504777!
initializeWithCCNumber: aCCNumber expiringOn: aDate withOwner: aOwner 
	
	(aCCNumber decimalDigitLength = 16) ifFalse: [self error: self class invalidCartIdErrorMessage].
	
	ccNumber := aCCNumber.
	expiration := aDate.
	owner := aOwner.! !

!testRun: #CreditCardTest #test01CreditCardWithLessDigitNumbersRaisesError stamp: 'jeo 6/12/2022 17:33:25'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'jeo 6/12/2022 17:33:56' prior: 50504769!
invalidCCNumber
	^1! !

!testRun: #CreditCardTest #test01CreditCardWithLessDigitNumbersRaisesError stamp: 'jeo 6/12/2022 17:33:59'!
ERROR!
!CreditCard class methodsFor: 'error descriptions' stamp: 'jeo 6/12/2022 17:34:16'!
invalidCCNumberErrorDescription
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'jeo 6/12/2022 17:34:30' prior: 50504926!
invalidCCNumberErrorDescription
	^ 'invalid credit card number'! !

!testRun: #CreditCardTest #test01CreditCardWithLessDigitNumbersRaisesError stamp: 'jeo 6/12/2022 17:34:32'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardWithLessDigitNumbersRaisesError stamp: 'jeo 6/12/2022 17:34:56'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardWithLessDigitNumbersRaisesError stamp: 'jeo 6/12/2022 17:35:00'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardWithLessDigitNumbersRaisesError stamp: 'jeo 6/12/2022 17:35:13'!
ERROR!
!CreditCard methodsFor: 'initialization' stamp: 'jeo 6/12/2022 17:35:39' prior: 50504904!
initializeWithCCNumber: aCCNumber expiringOn: aDate withOwner: aOwner 
	
	(aCCNumber decimalDigitLength = 16) ifFalse: [self error: self class invalidCCNumberErrorMessage].
	
	ccNumber := aCCNumber.
	expiration := aDate.
	owner := aOwner.! !

!testRun: #CreditCardTest #test01CreditCardWithLessDigitNumbersRaisesError stamp: 'jeo 6/12/2022 17:35:41'!
ERROR!
!CreditCard methodsFor: 'initialization' stamp: 'jeo 6/12/2022 17:36:07' prior: 50504952!
initializeWithCCNumber: aCCNumber expiringOn: aDate withOwner: aOwner 
	
	(aCCNumber decimalDigitLength = 16) ifFalse: [self error: self class invalidCCNumberErrorDescription].
	
	ccNumber := aCCNumber.
	expiration := aDate.
	owner := aOwner.! !

!testRun: #CreditCardTest #test01CreditCardWithLessDigitNumbersRaisesError stamp: 'jeo 6/12/2022 17:36:09'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithLessDigitNumbersRaisesError stamp: 'jeo 6/12/2022 17:36:09'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 17:37:40'!
test02CreditCardWithMoreDigitNumbersRaisesError
	
	self should: [CreditCard withCCNumber: '11111111111111111' expiringOn: testObjectsFactory validCCExpDate withOwner: testObjectsFactory validCCOwner.]
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | self assert: anError messageText = CreditCard invalidCCNumberErrorDescription]! !
!CreditCardTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 17:37:50'!
test01CreditCardWithInvalidDigitNumbersRaisesError
	
	self should: [CreditCard withCCNumber: testObjectsFactory invalidCCNumber expiringOn: testObjectsFactory validCCExpDate withOwner: testObjectsFactory validCCOwner.]
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | self assert: anError messageText = CreditCard invalidCCNumberErrorDescription]! !

!methodRemoval: CreditCardTest #test01CreditCardWithLessDigitNumbersRaisesError stamp: 'jeo 6/12/2022 17:37:58'!
test01CreditCardWithLessDigitNumbersRaisesError
	
	self should: [CreditCard withCCNumber: testObjectsFactory invalidCCNumber expiringOn: testObjectsFactory validCCExpDate withOwner: testObjectsFactory validCCOwner.]
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | self assert: anError messageText = CreditCard invalidCCNumberErrorDescription]!

!methodRemoval: CreditCardTest #test02CreditCardWithMoreDigitNumbersRaisesError stamp: 'jeo 6/12/2022 17:37:59'!
test02CreditCardWithMoreDigitNumbersRaisesError
	
	self should: [CreditCard withCCNumber: '11111111111111111' expiringOn: testObjectsFactory validCCExpDate withOwner: testObjectsFactory validCCOwner.]
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | self assert: anError messageText = CreditCard invalidCCNumberErrorDescription]!
!CreditCardTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 17:38:36'!
test02CreditCardWithFloatNumbersRaisesError
	
	self should: [CreditCard withCCNumber: 1.1 expiringOn: testObjectsFactory validCCExpDate withOwner: testObjectsFactory validCCOwner.]
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | self assert: anError messageText = CreditCard invalidCCNumberErrorDescription]! !

!testRun: #CreditCardTest #test02CreditCardWithFloatNumbersRaisesError stamp: 'jeo 6/12/2022 17:38:38'!
ERROR!
!CreditCard methodsFor: 'initialization' stamp: 'jeo 6/12/2022 17:39:11' prior: 50504966!
initializeWithCCNumber: aCCNumber expiringOn: aDate withOwner: aOwner 
	
	((aCCNumber isInteger) and: [aCCNumber decimalDigitLength = 16]) ifFalse: [self error: self class invalidCCNumberErrorDescription].
	
	ccNumber := aCCNumber.
	expiration := aDate.
	owner := aOwner.! !

!testRun: #CreditCardTest #test01CreditCardWithInvalidDigitNumbersRaisesError stamp: 'jeo 6/12/2022 17:39:12'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithFloatNumbersRaisesError stamp: 'jeo 6/12/2022 17:39:12'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 17:40:19'!
test03CreditCardWithBlankOwnerRaisesError
	
	self should: [CreditCard withCCNumber: 1.1 expiringOn: testObjectsFactory validCCExpDate withOwner: testObjectsFactory validCCOwner.]
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | self assert: anError messageText = CreditCard invalidCCNumberErrorDescription]! !
!CreditCardTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 17:41:11' prior: 50505078!
test03CreditCardWithBlankOwnerRaisesError
	
	self should: [CreditCard withCCNumber: testObjectsFactory validCCNumber expiringOn: testObjectsFactory validCCExpDate withOwner: ' '.]
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | self assert: anError messageText = CreditCard invalidCCNumberErrorDescription]! !
!CreditCard methodsFor: 'initialization' stamp: 'jeo 6/12/2022 17:41:55' prior: 50505059!
initializeWithCCNumber: aCCNumber expiringOn: aDate withOwner: aOwner 
	
	((aCCNumber isInteger) and: [aCCNumber decimalDigitLength = 16]) ifFalse: [self error: self class invalidCCNumberErrorDescription].
	(aOwner withBlanksTrimmed = '') ifTrue: [self error: self class invalidCCOwnerErrorDescription].
	
	ccNumber := aCCNumber.
	expiration := aDate.
	owner := aOwner.! !
!CreditCardTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 17:42:09' prior: 50505091!
test03CreditCardWithBlankOwnerRaisesError
	
	self should: [CreditCard withCCNumber: testObjectsFactory validCCNumber expiringOn: testObjectsFactory validCCExpDate withOwner: ' '.]
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | self assert: anError messageText = CreditCard invalidCCOwnerErrorDescription]! !

!testRun: #CreditCardTest #test03CreditCardWithBlankOwnerRaisesError stamp: 'jeo 6/12/2022 17:42:13'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'jeo 6/12/2022 17:42:18'!
validCCNumber
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'jeo 6/12/2022 17:42:34' prior: 50505137!
validCCNumber
	^1111111111111111! !

!testRun: #CreditCardTest #test03CreditCardWithBlankOwnerRaisesError stamp: 'jeo 6/12/2022 17:42:36'!
ERROR!
!CreditCard class methodsFor: 'error descriptions' stamp: 'jeo 6/12/2022 17:42:41'!
invalidCCOwnerErrorDescription
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'jeo 6/12/2022 17:42:53' prior: 50505150!
invalidCCOwnerErrorDescription
	^ 'invalid credit card owner'! !

!testRun: #CreditCardTest #test03CreditCardWithBlankOwnerRaisesError stamp: 'jeo 6/12/2022 17:42:54'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithInvalidDigitNumbersRaisesError stamp: 'jeo 6/12/2022 17:42:54'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithFloatNumbersRaisesError stamp: 'jeo 6/12/2022 17:42:54'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithBlankOwnerRaisesError stamp: 'jeo 6/12/2022 17:42:54'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 17:43:57'!
test04CreditCardWithNumbersInOwnerNameRaisesError
	
	self should: [CreditCard withCCNumber: testObjectsFactory validCCNumber expiringOn: testObjectsFactory validCCExpDate withOwner: 'a123'.]
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | self assert: anError messageText = CreditCard invalidCCOwnerErrorDescription]! !

!testRun: #CreditCardTest #test04CreditCardWithNumbersInOwnerNameRaisesError stamp: 'jeo 6/12/2022 17:44:03'!
FAILURE!
!CreditCard methodsFor: 'initialization' stamp: 'jeo 6/12/2022 17:45:21' prior: 50505105!
initializeWithCCNumber: aCCNumber expiringOn: aDate withOwner: aOwner 
	
	((aCCNumber isInteger) and: [aCCNumber decimalDigitLength = 16]) ifFalse: [self error: self class invalidCCNumberErrorDescription].
	(aOwner withBlanksTrimmed = '') ifTrue: [self error: self class invalidCCOwnerErrorDescription].
	(aOwner anySatisfy: [:char | char isNumber]) ifTrue: [self error: self class invalidCCOwnerErrorDescription].
	ccNumber := aCCNumber.
	expiration := aDate.
	owner := aOwner.! !
!CreditCard methodsFor: 'initialization' stamp: 'jeo 6/12/2022 17:45:23' prior: 50505193!
initializeWithCCNumber: aCCNumber expiringOn: aDate withOwner: aOwner 
	
	((aCCNumber isInteger) and: [aCCNumber decimalDigitLength = 16]) ifFalse: [self error: self class invalidCCNumberErrorDescription].
	(aOwner withBlanksTrimmed = '') ifTrue: [self error: self class invalidCCOwnerErrorDescription].
	(aOwner anySatisfy: [:char | char isNumber]) ifTrue: [self error: self class invalidCCOwnerErrorDescription].
	
	ccNumber := aCCNumber.
	expiration := aDate.
	owner := aOwner.! !

!testRun: #CreditCardTest #test01CreditCardWithInvalidDigitNumbersRaisesError stamp: 'jeo 6/12/2022 17:45:25'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithFloatNumbersRaisesError stamp: 'jeo 6/12/2022 17:45:25'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithBlankOwnerRaisesError stamp: 'jeo 6/12/2022 17:45:25'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithNumbersInOwnerNameRaisesError stamp: 'jeo 6/12/2022 17:45:25'!
FAILURE!

!testRun: #CreditCardTest #test04CreditCardWithNumbersInOwnerNameRaisesError stamp: 'jeo 6/12/2022 17:45:25'!
FAILURE!
!CreditCard methodsFor: 'initialization' stamp: 'jeo 6/12/2022 17:46:30' prior: 50505211!
initializeWithCCNumber: aCCNumber expiringOn: aDate withOwner: aOwner 
	
	((aCCNumber isInteger) and: [aCCNumber decimalDigitLength = 16]) ifFalse: [self error: self class invalidCCNumberErrorDescription].
	(aOwner withBlanksTrimmed = '') ifTrue: [self error: self class invalidCCOwnerErrorDescription].
	(aOwner anySatisfy: [:char | char isLetter not]) ifTrue: [self error: self class invalidCCOwnerErrorDescription].
	
	ccNumber := aCCNumber.
	expiration := aDate.
	owner := aOwner.! !

!testRun: #CreditCardTest #test04CreditCardWithNumbersInOwnerNameRaisesError stamp: 'jeo 6/12/2022 17:46:31'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithInvalidDigitNumbersRaisesError stamp: 'jeo 6/12/2022 17:46:33'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithFloatNumbersRaisesError stamp: 'jeo 6/12/2022 17:46:33'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithBlankOwnerRaisesError stamp: 'jeo 6/12/2022 17:46:33'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithNumbersInOwnerNameRaisesError stamp: 'jeo 6/12/2022 17:46:33'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 17:47:01'!
test04CreditCardWithInvalidCharsInOwnerRaisesError
	
	self should: [CreditCard withCCNumber: testObjectsFactory validCCNumber expiringOn: testObjectsFactory validCCExpDate withOwner: 'a123'.]
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | self assert: anError messageText = CreditCard invalidCCOwnerErrorDescription]! !
!CreditCardTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 17:47:05' prior: 50505284!
test04CreditCardWithInvalidCharsInOwnerRaisesError
	
	self should: [CreditCard withCCNumber: testObjectsFactory validCCNumber expiringOn: testObjectsFactory validCCExpDate withOwner: 'a123#'.]
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | self assert: anError messageText = CreditCard invalidCCOwnerErrorDescription]! !

!methodRemoval: CreditCardTest #test04CreditCardWithNumbersInOwnerNameRaisesError stamp: 'jeo 6/12/2022 17:47:12'!
test04CreditCardWithNumbersInOwnerNameRaisesError
	
	self should: [CreditCard withCCNumber: testObjectsFactory validCCNumber expiringOn: testObjectsFactory validCCExpDate withOwner: 'a123'.]
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | self assert: anError messageText = CreditCard invalidCCOwnerErrorDescription]!

!methodRemoval: CreditCard class #expiringOn: stamp: 'jeo 6/12/2022 17:48:49'!
expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 17:48:54'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 17:48:54'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 17:48:54'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 17:48:54'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 17:48:54'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 17:48:54'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 17:48:54'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 17:48:54'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 17:48:54'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 17:48:54'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 17:48:54'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 17:48:54'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 17:48:54'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 17:48:54'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 17:48:54'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 17:48:54'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 17:48:54'!
ERROR!

!testRun: #InterfaceTest #testXCheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 17:48:54'!
PASSED!

!testRun: #InterfaceTest #testZCheckOutTwoCartsRaisesTransactionId stamp: 'jeo 6/12/2022 17:48:54'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 17:48:54'!
ERROR!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:49:16' prior: 50504736!
test16CheckOutWithInvalidCCNumberRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory invalidCCNumber
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = CreditCard invalidCCNumberErrorDescription.
	].! !

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 17:49:17'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 17:49:17'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 17:49:17'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 17:49:17'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 17:49:17'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 17:49:17'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 17:49:17'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 17:49:17'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 17:49:17'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 17:49:17'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 17:49:17'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 17:49:17'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 17:49:17'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 17:49:17'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 17:49:17'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 17:49:17'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 17:49:17'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 17:49:17'!
PASSED!

!testRun: #InterfaceTest #testXCheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 17:49:17'!
PASSED!

!testRun: #InterfaceTest #testZCheckOutTwoCartsRaisesTransactionId stamp: 'jeo 6/12/2022 17:49:17'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:49:49'!
test17CheckOutWithInvalidExpirationMonthRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory invalidCCNumber
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = CreditCard invalidCCNumberErrorDescription.
	].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:50:16' prior: 50505483!
test17CheckOutWithInvalidExpirationMonthRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory invalidCCNumber
		creditCardExpirationMonth: 13
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCCNumberErrorDescription.
	].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:50:43' prior: 50505508!
test17CheckOutWithInvalidExpirationMonthRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory invalidCCNumber
		creditCardExpirationMonth: 13
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = CreditCard invalidExpirationMonthDescription.
	].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:50:50' prior: 50505532!
test17CheckOutWithInvalidExpirationMonthRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory invalidCCNumber
		creditCardExpirationMonth: 13
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = CreditCard invalidCCExpirationMonthDescription.
	].! !

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 17:50:52'!
ERROR!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:51:56' prior: 50505556!
test17CheckOutWithInvalidExpirationMonthRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory invalidCCNumber
		creditCardExpirationMonth: 13
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCCExpirationMonthDescription.
	].! !

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 17:51:57'!
ERROR!
!Interface class methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:52:03'!
invalidCCExpirationMonthDescription
	self shouldBeImplemented.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:52:15' prior: 50505612!
invalidCCExpirationMonthDescription
	^'invalid expiration month'! !

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 17:52:16'!
FAILURE!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:53:47' prior: 50505584!
test17CheckOutWithInvalidExpirationMonthRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory invalidCCNumber
		creditCardExpirationMonth: 13
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCCExpirationMonthDescription.
	].! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:54:43' prior: 50504595!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	(carts includesKey: aCartId) ifFalse: [self error: self class invalidCartIdErrorMessage]. 
	
	(aCCEMonth between: 1 and: 12) ifFalse: [self error: self class invalidCCExpirationMonthDescription].
	
	creditCard := CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.
	
	carts removeKey: aCartId.! !

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 17:54:48'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 17:54:48'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 17:54:48'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 17:54:48'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 17:54:48'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 17:54:48'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 17:54:48'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 17:54:48'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 17:54:48'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 17:54:48'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 17:54:48'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 17:54:48'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 17:54:48'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 17:54:48'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 17:54:48'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 17:54:48'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 17:54:48'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 17:54:48'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 17:54:48'!
PASSED!

!testRun: #InterfaceTest #testXCheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 17:54:48'!
PASSED!

!testRun: #InterfaceTest #testZCheckOutTwoCartsRaisesTransactionId stamp: 'jeo 6/12/2022 17:54:48'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:56:51'!
test17CheckOutWithInvalidExpirationYearRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory invalidCCNumber
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: 1950
		creditCardOwner: 'A'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCCExpirationMonthDescription.
	].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:56:58'!
test18CheckOutWithInvalidExpirationYearRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory invalidCCNumber
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: 1950
		creditCardOwner: 'A'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCCExpirationMonthDescription.
	].! !

!methodRemoval: InterfaceTest #test17CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 17:56:58'!
test17CheckOutWithInvalidExpirationYearRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory invalidCCNumber
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: 1950
		creditCardOwner: 'A'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCCExpirationMonthDescription.
	].!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:57:11' prior: 50505768!
test18CheckOutWithInvalidExpirationYearRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory invalidCCNumber
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: 1950
		creditCardOwner: 'A'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCCExpirationYearDescription.
	].! !

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 17:57:14'!
ERROR!
!Interface class methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:57:21'!
invalidCCExpirationYearDescription
	self shouldBeImplemented.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:57:40' prior: 50505845!
invalidCCExpirationYearDescription
	^'invalid expiration year'! !

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 17:57:42'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 17:58:15' prior: 50505651!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	(carts includesKey: aCartId) ifFalse: [self error: self class invalidCartIdErrorMessage]. 
	
	(aCCEMonth between: 1 and: 12) ifFalse: [self error: self class invalidCCExpirationMonthDescription].
	(aCCEYear >= 1970) ifFalse: [self error: self class invalidCCExpirationYearDescription].
	
	creditCard := CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.
	
	carts removeKey: aCartId.! !

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 17:58:21'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 17:58:21'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 17:58:21'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 17:58:21'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 17:58:21'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 17:58:21'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 17:58:21'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 17:58:21'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 17:58:21'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 17:58:21'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 17:58:21'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 17:58:21'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 17:58:21'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 17:58:21'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 17:58:21'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 17:58:21'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 17:58:21'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 17:58:21'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 17:58:21'!
PASSED!

!testRun: #InterfaceTest #testXCheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 17:58:21'!
PASSED!

!testRun: #InterfaceTest #testZCheckOutTwoCartsRaisesTransactionId stamp: 'jeo 6/12/2022 17:58:21'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:00:02'!
test19CheckOutWithInvalidOwnerRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory invalidCCNumber
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: 1950
		creditCardOwner: 'a123'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCCOwnerErrorDescription.
	].! !

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 18:00:04'!
ERROR!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:00:12' prior: 50505956!
test19CheckOutWithInvalidOwnerRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory invalidCCNumber
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: 1950
		creditCardOwner: 'a123'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = CreditCard invalidCCOwnerErrorDescription.
	].! !

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 18:00:13'!
FAILURE!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:00:37' prior: 50505983!
test19CheckOutWithInvalidOwnerRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory invalidCCNumber
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today year + 1
		creditCardOwner: 'a123'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = CreditCard invalidCCOwnerErrorDescription.
	].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:00:54' prior: 50506011!
test19CheckOutWithInvalidOwnerRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory invalidCCNumber
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'a123'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = CreditCard invalidCCOwnerErrorDescription.
	].! !

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 18:00:54'!
FAILURE!
!CreditCardTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 18:01:42' prior: 50505298!
test04CreditCardWithInvalidCharsInOwnerRaisesError
	
	self should: [CreditCard withCCNumber: testObjectsFactory validCCNumber expiringOn: testObjectsFactory validCCExpDate withOwner: 'a123'.]
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | self assert: anError messageText = CreditCard invalidCCOwnerErrorDescription]! !

!testRun: #CreditCardTest #test04CreditCardWithInvalidCharsInOwnerRaisesError stamp: 'jeo 6/12/2022 18:01:44'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithInvalidDigitNumbersRaisesError stamp: 'jeo 6/12/2022 18:01:44'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithFloatNumbersRaisesError stamp: 'jeo 6/12/2022 18:01:44'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithBlankOwnerRaisesError stamp: 'jeo 6/12/2022 18:01:44'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithInvalidCharsInOwnerRaisesError stamp: 'jeo 6/12/2022 18:01:44'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 18:01:48'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 18:01:48'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 18:01:48'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 18:01:48'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 18:01:48'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 18:01:48'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 18:01:48'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 18:01:48'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 18:01:48'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 18:01:48'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 18:01:48'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 18:01:48'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:01:48'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 18:01:48'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 18:01:48'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 18:01:48'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 18:01:48'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 18:01:48'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 18:01:48'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 18:01:48'!
FAILURE!

!testRun: #InterfaceTest #testXCheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 18:01:48'!
PASSED!

!testRun: #InterfaceTest #testZCheckOutTwoCartsRaisesTransactionId stamp: 'jeo 6/12/2022 18:01:48'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 18:01:48'!
FAILURE!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 18:02:05'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 18:02:05'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 18:02:05'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 18:02:05'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 18:02:05'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 18:02:05'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 18:02:05'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 18:02:05'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 18:02:05'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 18:02:05'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 18:02:05'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 18:02:05'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:02:05'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 18:02:05'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 18:02:05'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 18:02:05'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 18:02:05'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 18:02:05'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 18:02:05'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 18:02:05'!
FAILURE!

!testRun: #InterfaceTest #testXCheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 18:02:05'!
PASSED!

!testRun: #InterfaceTest #testZCheckOutTwoCartsRaisesTransactionId stamp: 'jeo 6/12/2022 18:02:05'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 18:02:05'!
FAILURE!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:03:42' prior: 50505627!
test17CheckOutWithInvalidExpirationMonthRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory validCCNumber
		creditCardExpirationMonth: 13
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCCExpirationMonthDescription.
	].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:03:49' prior: 50505817!
test18CheckOutWithInvalidExpirationYearRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory validCCNumber
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: 1950
		creditCardOwner: 'A'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCCExpirationYearDescription.
	].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:03:55' prior: 50506036!
test19CheckOutWithInvalidOwnerRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory validCCNumber
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'a123'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = CreditCard invalidCCOwnerErrorDescription.
	].! !

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 18:03:56'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 18:03:56'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 18:03:56'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 18:03:56'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 18:03:56'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 18:03:56'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 18:03:56'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 18:03:56'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 18:03:56'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 18:03:56'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 18:03:56'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 18:03:56'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 18:03:56'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:03:56'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 18:03:56'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 18:03:56'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 18:03:56'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 18:03:56'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 18:03:56'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 18:03:56'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 18:03:56'!
PASSED!

!testRun: #InterfaceTest #testXCheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 18:03:56'!
PASSED!

!testRun: #InterfaceTest #testZCheckOutTwoCartsRaisesTransactionId stamp: 'jeo 6/12/2022 18:03:56'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:08:36' prior: 50503144!
testXCheckOutCartRaisesTransactionId
	| interface book cartId1 cartId2 transaction1 transaction2 |
	interface := self createInterface.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId1 bookIsbn: book bookQuantity: 1.
	interface addToCart: cartId2 bookIsbn: book bookQuantity: 1.
	
	transaction1 := interface checkOutCart: cartId1 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	transaction2 := interface checkOutCart: cartId2 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	self assert: transaction1 + 1 = transaction2.! !

!testRun: #InterfaceTest #testXCheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 18:08:46'!
ERROR!

!methodRemoval: InterfaceTest #testZCheckOutTwoCartsRaisesTransactionId stamp: 'jeo 6/12/2022 18:08:54'!
testZCheckOutTwoCartsRaisesTransactionId
	
	!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:09:00'!
test20CheckOutCartRaisesTransactionId
	| interface book cartId1 cartId2 transaction1 transaction2 |
	interface := self createInterface.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId1 bookIsbn: book bookQuantity: 1.
	interface addToCart: cartId2 bookIsbn: book bookQuantity: 1.
	
	transaction1 := interface checkOutCart: cartId1 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	transaction2 := interface checkOutCart: cartId2 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	self assert: transaction1 + 1 = transaction2.! !

!methodRemoval: InterfaceTest #testXCheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 18:09:00'!
testXCheckOutCartRaisesTransactionId
	| interface book cartId1 cartId2 transaction1 transaction2 |
	interface := self createInterface.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId1 bookIsbn: book bookQuantity: 1.
	interface addToCart: cartId2 bookIsbn: book bookQuantity: 1.
	
	transaction1 := interface checkOutCart: cartId1 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	transaction2 := interface checkOutCart: cartId2 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	self assert: transaction1 + 1 = transaction2.!

!classDefinition: #Interface category: 'TusLibros' stamp: 'jeo 6/12/2022 18:09:57'!
Object subclass: #Interface
	instanceVariableNames: 'authService currentCartId catalog carts salesBook purchases transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:09:51' prior: 50505860!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	(carts includesKey: aCartId) ifFalse: [self error: self class invalidCartIdErrorMessage]. 
	
	(aCCEMonth between: 1 and: 12) ifFalse: [self error: self class invalidCCExpirationMonthDescription].
	(aCCEYear >= 1970) ifFalse: [self error: self class invalidCCExpirationYearDescription].
	
	creditCard := CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.
	
	carts removeKey: aCartId.
	transaction := transaction + 1.
	^transaction.! !
!Interface methodsFor: 'initialization' stamp: 'jeo 6/12/2022 18:10:20' prior: 50503704!
initializeWithAuthService: aLoginService withCatalog: aCatalog  
	
	authService := aLoginService.
	currentCartId := 0.
	catalog := aCatalog.
	carts := Dictionary new.
	salesBook := Dictionary new.
	transaction := 0.! !

!classDefinition: #Interface category: 'TusLibros' stamp: 'jeo 6/12/2022 18:10:34'!
Object subclass: #Interface
	instanceVariableNames: 'authService currentCartId catalog carts salesBook purchases currentTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:10:34' prior: 50506540!
initializeWithAuthService: aLoginService withCatalog: aCatalog  
	
	authService := aLoginService.
	currentCartId := 0.
	catalog := aCatalog.
	carts := Dictionary new.
	salesBook := Dictionary new.
	currentTransaction := 0.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:10:34' prior: 50506510!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	(carts includesKey: aCartId) ifFalse: [self error: self class invalidCartIdErrorMessage]. 
	
	(aCCEMonth between: 1 and: 12) ifFalse: [self error: self class invalidCCExpirationMonthDescription].
	(aCCEYear >= 1970) ifFalse: [self error: self class invalidCCExpirationYearDescription].
	
	creditCard := CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.
	
	carts removeKey: aCartId.
	currentTransaction := currentTransaction + 1.
	^currentTransaction.! !

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 18:10:42'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:17:03'!
test21ListPurchasesForClientWithOneSale
	| interface book cartId listPurchases |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	listPurchases := interface listPurchasesClientId: testObjectsFactory validClientId password: testObjectsFactory validPassword.
	self assert: listPurchases items includes: book.
	self assert: 1 equals: (listPurchases items occurrencesOf: book).
	self assert: 10 equals: listPurchases total.! !

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 18:17:13'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'auth' stamp: 'jeo 6/12/2022 18:17:24'!
validPassword
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'auth' stamp: 'jeo 6/12/2022 18:17:36' prior: 50506634!
validPassword
	^'validPassword'! !

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 18:17:37'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:18:20' prior: 50503714!
listPurchasesClientId: aClientId password: aPassword
	
	^(salesBook at: aClientId).! !

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 18:18:23'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 18:18:23'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 18:18:23'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 18:18:23'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 18:18:23'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 18:18:23'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 18:18:23'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 18:18:23'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 18:18:23'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 18:18:23'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 18:18:23'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 18:18:23'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 18:18:23'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:18:23'!
ERROR!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 18:18:23'!
ERROR!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 18:18:23'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 18:18:23'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 18:18:23'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 18:18:23'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 18:18:23'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 18:18:23'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 18:18:23'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 18:18:23'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:18:25'!
ERROR!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:18:39' prior: 50503117!
test12CheckOutCartWithOneBook
	
	| cartId interface book purchaseList |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
		
	purchaseList := interface listPurchasesClientId: self validClientId password: self validPassword.
	self assert: (purchaseList items includes: book).
	self assert: 1 equals: (purchaseList occurrencesOf: book).
	self assert: 1 equals: purchaseList size.
	! !

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:18:40'!
ERROR!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:18:47' prior: 50506731!
test12CheckOutCartWithOneBook
	
	| cartId interface book purchaseList |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
		
	purchaseList := interface listPurchasesClientId: self validClientId password: self validPassword.
	self assert: (purchaseList items includes: book).
	self assert: 1 equals: (purchaseList items occurrencesOf: book).
	self assert: 1 equals: purchaseList size.
	! !

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:18:49'!
ERROR!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:18:57' prior: 50506761!
test12CheckOutCartWithOneBook
	
	| cartId interface book purchaseList |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
		
	purchaseList := interface listPurchasesClientId: self validClientId password: self validPassword.
	self assert: (purchaseList items includes: book).
	self assert: 1 equals: (purchaseList items occurrencesOf: book).
	self assert: 1 equals: purchaseList items size.
	! !

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:18:58'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 18:18:59'!
ERROR!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:19:13' prior: 50504250!
test13CheckOutCartWithTwoBooks
	
	| cartId interface book purchaseList |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 2.
	
	interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
		
	purchaseList := interface listPurchasesClientId: self validClientId password: self validPassword.
	self assert: (purchaseList items includes: book).
	self assert: 2 equals: (purchaseList items occurrencesOf: book).
	self assert: 2 equals: purchaseList items size.
	! !

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 18:19:15'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 18:19:18'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 18:19:18'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 18:19:18'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 18:19:18'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 18:19:18'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 18:19:18'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 18:19:18'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 18:19:18'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 18:19:18'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 18:19:18'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 18:19:18'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 18:19:18'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 18:19:18'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:19:18'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 18:19:18'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 18:19:18'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 18:19:18'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 18:19:18'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 18:19:18'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 18:19:18'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 18:19:18'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 18:19:18'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 18:19:18'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:19:28'!
test22ListPurchasesForClientWithTwoSale
	| interface book cartId listPurchases |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	listPurchases := interface listPurchasesClientId: testObjectsFactory validClientId password: testObjectsFactory validPassword.
	self assert: listPurchases items includes: book.
	self assert: 1 equals: (listPurchases items occurrencesOf: book).
	self assert: 10 equals: listPurchases total.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:19:31'!
test22ListPurchasesForClientWithTwoSales
	| interface book cartId listPurchases |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	listPurchases := interface listPurchasesClientId: testObjectsFactory validClientId password: testObjectsFactory validPassword.
	self assert: listPurchases items includes: book.
	self assert: 1 equals: (listPurchases items occurrencesOf: book).
	self assert: 10 equals: listPurchases total.! !

!methodRemoval: InterfaceTest #test22ListPurchasesForClientWithTwoSale stamp: 'jeo 6/12/2022 18:19:35'!
test22ListPurchasesForClientWithTwoSale
	| interface book cartId listPurchases |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	listPurchases := interface listPurchasesClientId: testObjectsFactory validClientId password: testObjectsFactory validPassword.
	self assert: listPurchases items includes: book.
	self assert: 1 equals: (listPurchases items occurrencesOf: book).
	self assert: 10 equals: listPurchases total.!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:20:46' prior: 50506959!
test22ListPurchasesForClientWithTwoSales
	| interface book listPurchases cartId1 cartId2 |
	interface := self createInterface.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId1 bookIsbn: book bookQuantity: 1.
	interface addToCart: cartId2 bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId1
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	interface checkOutCart: cartId2
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	listPurchases := interface listPurchasesClientId: testObjectsFactory validClientId password: testObjectsFactory validPassword.
	self assert: listPurchases items includes: book.
	self assert: 2 equals: (listPurchases items occurrencesOf: book).
	self assert: 20 equals: listPurchases total.! !

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 18:20:53'!
FAILURE!

!classDefinition: #Interface category: 'TusLibros' stamp: 'jeo 6/12/2022 18:21:23'!
Object subclass: #Interface
	instanceVariableNames: 'authService currentCartId catalog carts salesBook currentTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checkout - private' stamp: 'jeo 6/12/2022 18:24:23' prior: 50503781!
registerSale
	
	(salesBook includesKey: cart clientId) ifFalse: [salesBook at: cart clientId put: OrderedCollection new.].
	(salesBook at: cart clientId) add: self createSale.! !

Object subclass: #SalesBook
	instanceVariableNames: 'content'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #SalesBook category: 'TusLibros' stamp: 'jeo 6/12/2022 18:25:39'!
Object subclass: #SalesBook
	instanceVariableNames: 'content'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!SalesBook methodsFor: 'no messages' stamp: 'jeo 6/12/2022 18:26:07' overrides: 16920235!
initialize
	content := Dictionary new.! !
!StoreTestObjectsFactory methodsFor: 'sales' stamp: 'jeo 6/12/2022 18:26:21' prior: 50503896!
createSalesBook
	^ SalesBook new.! !
!SalesBook methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:28:47'!
itemsForClientId: aClientId
	| items |
	items := OrderedCollection new.
	(content at: aClientId) do: [:sale | items addAllLast: sale items].
	^items.! !
!SalesBook methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:30:04'!
totalForClientId: aClientId

	^ (content at: aClientId) sum: [:sale | sale total] ifEmpty: [0].
	! !

Object subclass: #PurchasesList
	instanceVariableNames: 'salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #PurchasesList category: 'TusLibros' stamp: 'jeo 6/12/2022 18:33:52'!
Object subclass: #PurchasesList
	instanceVariableNames: 'salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #PurchasesList
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #PurchasesList category: 'TusLibros' stamp: 'jeo 6/12/2022 18:34:48'!
Object subclass: #PurchasesList
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #PurchasesList stamp: 'jeo 6/12/2022 18:35:20'!
Object subclass: #PurchasesList
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:38:51' prior: 50506647!
listPurchasesClientId: aClientId password: aPassword
	
	
	^ Array with: (salesBook itemsForClientId: aClientId) with: (salesBook totalForClientId: aClientId).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:39:43' prior: 50507016!
test22ListPurchasesForClientWithTwoSales
	| interface book listPurchases cartId1 cartId2 |
	interface := self createInterface.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId1 bookIsbn: book bookQuantity: 1.
	interface addToCart: cartId2 bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId1
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	interface checkOutCart: cartId2
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	listPurchases := interface listPurchasesClientId: testObjectsFactory validClientId password: testObjectsFactory validPassword.
	self assert: (listPurchases at: 1) items includes: book.
	self assert: 2 equals: ((listPurchases at: 1) items occurrencesOf: book).
	self assert: 20 equals: (listPurchases at: 2).! !

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 18:39:44'!
ERROR!
!Interface methodsFor: 'initialization' stamp: 'jeo 6/12/2022 18:40:14' prior: 50506559!
initializeWithAuthService: aLoginService withCatalog: aCatalog  
	
	authService := aLoginService.
	currentCartId := 0.
	catalog := aCatalog.
	carts := Dictionary new.
	salesBook := SalesBook new.
	currentTransaction := 0.! !

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 18:40:15'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 18:40:15'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 18:40:15'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 18:40:15'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 18:40:15'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 18:40:15'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 18:40:15'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 18:40:15'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 18:40:15'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 18:40:15'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 18:40:15'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 18:40:15'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:40:15'!
ERROR!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 18:40:15'!
ERROR!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 18:40:15'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 18:40:15'!
ERROR!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 18:40:15'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 18:40:15'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 18:40:15'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 18:40:15'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 18:40:15'!
ERROR!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 18:40:15'!
ERROR!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 18:40:15'!
ERROR!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:40:24'!
ERROR!
!SalesBook methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:40:51'!
includesKey: aString 
	self shouldBeImplemented.! !

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:41:17'!
ERROR!
!Cashier methodsFor: 'checkout - private' stamp: 'jeo 6/12/2022 18:41:29' prior: 50507068!
registerSale
	
	(salesBook includesClientId: cart clientId) ifFalse: [salesBook at: cart clientId put: OrderedCollection new.].
	(salesBook at: cart clientId) add: self createSale.! !

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:41:32'!
ERROR!
!SalesBook methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:41:36'!
includesClientId: aString 
	self shouldBeImplemented.! !
!SalesBook methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:41:55' prior: 50507300!
includesClientId: aClientId
	content includesKey: aClientId.! !
!SalesBook methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:42:00' prior: 50507305!
includesClientId: aClientId
	^content includesKey: aClientId.! !

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:42:01'!
ERROR!
!SalesBook methodsFor: 'error handling' stamp: 'jeo 6/12/2022 18:42:22' overrides: 16902107!
error: aString 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checkout - private' stamp: 'jeo 6/12/2022 18:42:57' prior: 50507288!
registerSale
	
	(salesBook includesClientId: cart clientId) ifFalse: [salesBook atClientId: cart clientId put: OrderedCollection new.].
	(salesBook at: cart clientId) add: self createSale.! !

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:42:59'!
ERROR!
!SalesBook methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:43:04'!
atClientId: aString put: anOrderedCollection 
	self shouldBeImplemented.! !

!methodRemoval: SalesBook #error: stamp: 'jeo 6/12/2022 18:44:15'!
error: aString 
	self shouldBeImplemented.!
!SalesBook methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:45:04'!
initializeClientId: aClientId
	content at: aClientId put: OrderedCollection new.! !

!methodRemoval: SalesBook #atClientId:put: stamp: 'jeo 6/12/2022 18:45:09'!
atClientId: aString put: anOrderedCollection 
	self shouldBeImplemented.!

!methodRemoval: SalesBook #includesKey: stamp: 'jeo 6/12/2022 18:45:12'!
includesKey: aString 
	self shouldBeImplemented.!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 18:45:22'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 18:45:22'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 18:45:22'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 18:45:22'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 18:45:22'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 18:45:22'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 18:45:22'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 18:45:22'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 18:45:22'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 18:45:22'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 18:45:22'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 18:45:22'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:45:22'!
ERROR!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 18:45:22'!
ERROR!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 18:45:22'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 18:45:22'!
ERROR!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 18:45:22'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 18:45:22'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 18:45:22'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 18:45:22'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 18:45:22'!
ERROR!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 18:45:22'!
ERROR!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 18:45:22'!
ERROR!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:45:24'!
ERROR!
!Cashier methodsFor: 'checkout - private' stamp: 'jeo 6/12/2022 18:45:38' prior: 50507323!
registerSale
	
	(salesBook includesClientId: cart clientId) ifFalse: [salesBook initializeClientId: cart clientId].
	(salesBook at: cart clientId) add: self createSale.! !
!Cashier methodsFor: 'checkout - private' stamp: 'jeo 6/12/2022 18:46:29' prior: 50507436!
registerSale
	
	(salesBook includesClientId: cart clientId) ifFalse: [salesBook initializeClientId: cart clientId].
	salesBook registerSale: self createSale forClientId: cart clientId.! !

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:46:32'!
ERROR!
!SalesBook methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:46:37'!
registerSale: aSale forClientId: aString 
	self shouldBeImplemented.! !
!SalesBook methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:46:57' prior: 50507457!
registerSale: aSale forClientId: aClientId
	content at: aClientId put: aSale.! !

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:46:58'!
ERROR!
!SalesBook methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:47:38' prior: 50507463!
registerSale: aSale forClientId: aClientId
	(content at: aClientId) add: aSale.! !

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 18:47:41'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 18:47:41'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 18:47:41'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 18:47:41'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 18:47:41'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 18:47:41'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 18:47:41'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 18:47:41'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 18:47:41'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 18:47:41'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 18:47:41'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 18:47:41'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:47:41'!
ERROR!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 18:47:41'!
ERROR!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 18:47:41'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 18:47:41'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 18:47:41'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 18:47:41'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 18:47:41'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 18:47:41'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 18:47:41'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 18:47:41'!
ERROR!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 18:47:41'!
ERROR!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:47:43'!
ERROR!

Object subclass: #PurchasesList
	instanceVariableNames: 'items total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #PurchasesList category: 'TusLibros' stamp: 'jeo 6/12/2022 18:48:31'!
Object subclass: #PurchasesList
	instanceVariableNames: 'items total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:49:24' prior: 50507140!
listPurchasesClientId: aClientId password: aPassword
	
	
	^ PurchasesList withItems: (salesBook itemsForClientId: aClientId) withTotal: (salesBook totalForClientId: aClientId).! !

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 18:49:26'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 18:49:26'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 18:49:26'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 18:49:26'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 18:49:26'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 18:49:26'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 18:49:26'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 18:49:26'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 18:49:26'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 18:49:26'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 18:49:26'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 18:49:26'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:49:26'!
ERROR!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 18:49:26'!
ERROR!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 18:49:26'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 18:49:26'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 18:49:26'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 18:49:26'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 18:49:26'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 18:49:26'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 18:49:26'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 18:49:26'!
ERROR!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 18:49:26'!
ERROR!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:49:29'!
ERROR!
!PurchasesList class methodsFor: 'instance creation' stamp: 'jeo 6/12/2022 18:49:35'!
withItems: anOrderedCollection withTotal: aSmallInteger 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithItems: anOrderedCollection withTotal: aSmallInteger ! !
!PurchasesList class methodsFor: 'instance creation' stamp: 'jeo 6/12/2022 18:50:08' prior: 50507653!
withItems: anItemsCollection withTotal: aTotal

	^self new initializeWithItems: anItemsCollection withTotal: aTotal! !

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:50:09'!
ERROR!

!classDefinition: #PurchasesList category: 'TusLibros' stamp: 'jeo 6/12/2022 18:50:14'!
Object subclass: #PurchasesList
	instanceVariableNames: 'items total itemsCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!PurchasesList methodsFor: 'category-name' stamp: 'jeo 6/12/2022 18:50:14'!
initializeWithItems: anItemsCollection withTotal: aTotal 
	self shouldBeImplemented.
	itemsCollection := anItemsCollection.
	total := aTotal.! !
!PurchasesList methodsFor: 'category-name' stamp: 'jeo 6/12/2022 18:50:19' prior: 50507681!
initializeWithItems: anItemsCollection withTotal: aTotal 

	itemsCollection := anItemsCollection.
	total := aTotal.! !
!PurchasesList methodsFor: 'category-name' stamp: 'jeo 6/12/2022 18:50:25' prior: 50507689!
initializeWithItems: anItemsCollection withTotal: aTotal 

	items := anItemsCollection.
	total := aTotal.! !

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:50:27'!
ERROR!
!PurchasesList methodsFor: 'accessing' stamp: 'jeo 6/12/2022 18:50:41'!
items
	self shouldBeImplemented.
	^items! !
!PurchasesList methodsFor: 'accessing' stamp: 'jeo 6/12/2022 18:50:45' prior: 50507705!
items
	^items! !

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:50:47'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 18:50:48'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 18:50:49'!
ERROR!
!PurchasesList methodsFor: 'accessing' stamp: 'jeo 6/12/2022 18:50:54'!
total
	self shouldBeImplemented.
	^total! !
!PurchasesList methodsFor: 'accessing' stamp: 'jeo 6/12/2022 18:50:58' prior: 50507723!
total

	^total! !

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 18:50:59'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 18:51:01'!
ERROR!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:51:39' prior: 50507149!
test22ListPurchasesForClientWithTwoSales
	| interface book listPurchases cartId1 cartId2 |
	interface := self createInterface.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId1 bookIsbn: book bookQuantity: 1.
	interface addToCart: cartId2 bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId1
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	interface checkOutCart: cartId2
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	listPurchases := interface listPurchasesClientId: testObjectsFactory validClientId password: testObjectsFactory validPassword.
	self assert: listPurchases items includes: book.
	self assert: 2 equals: (listPurchases items occurrencesOf: book).
	self assert: 20 equals: listPurchases total.! !

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 18:51:40'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 18:51:40'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 18:51:40'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 18:51:40'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 18:51:40'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 18:51:40'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 18:51:40'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 18:51:40'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 18:51:40'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 18:51:40'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 18:51:40'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 18:51:40'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 18:51:40'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:51:40'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 18:51:40'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 18:51:40'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 18:51:40'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 18:51:40'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 18:51:40'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 18:51:40'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 18:51:40'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 18:51:40'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 18:51:40'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 18:51:40'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 18:51:46'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 18:51:46'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 18:51:46'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 18:51:46'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 18:51:46'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 18:51:46'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 18:51:46'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 18:51:46'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 18:51:46'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 18:51:46'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 18:51:46'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 18:51:46'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:51:46'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 18:51:46'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 18:51:46'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 18:51:46'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 18:51:46'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 18:51:46'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 18:51:46'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 18:51:46'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 18:51:46'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 18:51:46'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 18:51:46'!
PASSED!

!classDefinition: #PurchasesList category: 'TusLibros' stamp: 'jeo 6/12/2022 18:52:00'!
Object subclass: #PurchasesList
	instanceVariableNames: 'items total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!PurchasesList methodsFor: 'accessing' stamp: 'jeo 6/12/2022 18:52:05' prior: 50507710!
items
	^items copy! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:54:51'!
test23ListPurchasesForInvalidClientIdRaisesError
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	self should: [interface listPurchasesClientId: testObjectsFactory invalidClientId password: testObjectsFactory validPassword]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidAuthenticationErrorMessage
			]! !

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 18:54:56'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'auth' stamp: 'jeo 6/12/2022 18:55:08'!
invalidClientId
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'auth' stamp: 'jeo 6/12/2022 18:55:36' prior: 50507973!
invalidClientId
	^'invalidClient'! !

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 18:55:37'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:56:22'!
assertValidAuthenticationForClientId: aPassword password: aClientId

	^ (authService validateClientId: aClientId password: aPassword) ifFalse: [self error: self class invalidAuthenticationErrorMessage ]! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:56:22' prior: 50503756!
createCartForClientId: aClientId password: aPassword 
	self assertValidAuthenticationForClientId: aPassword password: aClientId.
	
	currentCartId := currentCartId + 1.
	
	carts at: currentCartId put: (Cart acceptingItemsOf: catalog clientId: aClientId).
	
	^currentCartId.
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:56:31' prior: 50507567!
listPurchasesClientId: aClientId password: aPassword
	
	self assertValidAuthenticationForClientId: aPassword password: aClientId.
	^ PurchasesList withItems: (salesBook itemsForClientId: aClientId) withTotal: (salesBook totalForClientId: aClientId).! !

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 18:56:34'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 18:56:34'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 18:56:34'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 18:56:34'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 18:56:34'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 18:56:34'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 18:56:34'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 18:56:34'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 18:56:34'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 18:56:34'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 18:56:34'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 18:56:34'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:56:34'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 18:56:34'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 18:56:34'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 18:56:34'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 18:56:34'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 18:56:34'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 18:56:34'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 18:56:34'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 18:56:34'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 18:56:34'!
ERROR!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 18:56:34'!
ERROR!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 18:56:34'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 18:56:39'!
ERROR!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:58:06' prior: 50502919 overrides: 16961394!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	authBehavior := [ :aClientId :aPassword | aClientId = testObjectsFactory validClientId and: (aPassword = testObjectsFactory validPassword)].! !
!StoreTestObjectsFactory methodsFor: 'auth' stamp: 'jeo 6/12/2022 18:58:24' prior: 50503845!
validClientId

	^ 'validClientId'! !

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 18:58:28'!
ERROR!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 18:58:28'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 18:58:28'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 18:58:28'!
ERROR!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 18:58:28'!
ERROR!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 18:58:28'!
ERROR!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 18:58:28'!
ERROR!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 18:58:28'!
ERROR!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 18:58:28'!
ERROR!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 18:58:28'!
ERROR!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 18:58:28'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 18:58:28'!
ERROR!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:58:28'!
ERROR!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 18:58:28'!
ERROR!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 18:58:28'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 18:58:28'!
ERROR!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 18:58:28'!
ERROR!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 18:58:28'!
ERROR!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 18:58:28'!
ERROR!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 18:58:28'!
ERROR!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 18:58:28'!
ERROR!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 18:58:28'!
ERROR!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 18:58:28'!
ERROR!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 18:58:28'!
ERROR!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 18:58:34'!
ERROR!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:59:08' prior: 50503831!
createCartWithInterface: interface

	^ interface createCartForClientId: testObjectsFactory validClientId password: testObjectsFactory validPassword! !

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 18:59:22'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 18:59:22'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 18:59:22'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 18:59:22'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 18:59:22'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 18:59:22'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 18:59:22'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 18:59:22'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 18:59:22'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 18:59:22'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 18:59:22'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 18:59:22'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:59:22'!
ERROR!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 18:59:22'!
ERROR!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 18:59:22'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 18:59:22'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 18:59:22'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 18:59:22'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 18:59:22'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 18:59:22'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 18:59:22'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 18:59:22'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 18:59:22'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 18:59:22'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:59:25'!
ERROR!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 18:59:47' prior: 50506792!
test12CheckOutCartWithOneBook
	
	| cartId interface book purchaseList |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
		
	purchaseList := interface listPurchasesClientId: testObjectsFactory validClientId password: testObjectsFactory validPassword.
	self assert: (purchaseList items includes: book).
	self assert: 1 equals: (purchaseList items occurrencesOf: book).
	self assert: 1 equals: purchaseList items size.
	! !

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:59:48'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 18:59:55'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 18:59:55'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 18:59:55'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 18:59:55'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 18:59:55'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 18:59:55'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 18:59:55'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 18:59:55'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 18:59:55'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 18:59:55'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 18:59:55'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 18:59:55'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 18:59:55'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 18:59:55'!
ERROR!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 18:59:55'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 18:59:55'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 18:59:55'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 18:59:55'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 18:59:55'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 18:59:55'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 18:59:55'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 18:59:55'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 18:59:55'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 18:59:55'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 18:59:55'!
ERROR!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:00:27' prior: 50506826!
test13CheckOutCartWithTwoBooks
	
	| cartId interface book purchaseList |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 2.
	
	interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
		
	purchaseList := interface listPurchasesClientId: testObjectsFactory validClientId password: testObjectsFactory validPassword.
	self assert: (purchaseList items includes: book).
	self assert: 2 equals: (purchaseList items occurrencesOf: book).
	self assert: 2 equals: purchaseList items size.
	! !

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 19:00:28'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 19:00:33'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 19:00:33'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 19:00:33'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 19:00:33'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 19:00:33'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 19:00:33'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 19:00:33'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 19:00:33'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 19:00:33'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 19:00:33'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 19:00:33'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 19:00:33'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 19:00:33'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 19:00:33'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:00:33'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 19:00:33'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 19:00:33'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 19:00:33'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 19:00:33'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 19:00:33'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 19:00:33'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 19:00:33'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 19:00:33'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 19:00:33'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:00:59'!
test24ListPurchasesForInvalidPasswordRaisesError
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	self should: [interface listPurchasesClientId: testObjectsFactory validClientId password: testObjectsFactory invalidPassword]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidAuthenticationErrorMessage
			]! !

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 19:01:00'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'auth' stamp: 'jeo 6/12/2022 19:01:08'!
invalidPassword
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'auth' stamp: 'jeo 6/12/2022 19:01:20' prior: 50508538!
invalidPassword
	^'invalidPassword'! !

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 19:01:21'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 19:01:21'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 19:01:21'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 19:01:21'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 19:01:21'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 19:01:21'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 19:01:21'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 19:01:21'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 19:01:21'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 19:01:21'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 19:01:21'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 19:01:21'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 19:01:21'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 19:01:21'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 19:01:21'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:01:21'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 19:01:21'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 19:01:21'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 19:01:21'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 19:01:21'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 19:01:21'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 19:01:21'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 19:01:21'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 19:01:21'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 19:01:21'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 19:01:21'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 19:01:23'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 19:01:23'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 19:01:23'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 19:01:23'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 19:01:23'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 19:01:23'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 19:01:23'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 19:01:23'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 19:01:23'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 19:01:23'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 19:01:23'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 19:01:23'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 19:01:23'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 19:01:23'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 19:01:23'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:01:23'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 19:01:23'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 19:01:23'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 19:01:23'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 19:01:23'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 19:01:23'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 19:01:23'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 19:01:23'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 19:01:23'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 19:01:23'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 19:01:23'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 19:01:34'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 19:01:34'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 19:01:34'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 19:01:34'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 19:01:34'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 19:01:34'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 19:01:34'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 19:01:34'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 19:01:34'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 19:01:34'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 19:01:34'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 19:01:34'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 19:01:34'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 19:01:34'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 19:01:34'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:01:34'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 19:01:34'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 19:01:34'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 19:01:34'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 19:01:34'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 19:01:34'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 19:01:34'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 19:01:34'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 19:01:34'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 19:01:34'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 19:01:34'!
PASSED!

!methodRemoval: InterfaceTest #validClientId stamp: 'jeo 6/12/2022 19:02:44'!
validClientId

	^ 'clienteValido'!

!methodRemoval: InterfaceTest #validPassword stamp: 'jeo 6/12/2022 19:02:48'!
validPassword

	^ 'passwordValido'!

!methodRemoval: InterfaceTest #invalidPassword stamp: 'jeo 6/12/2022 19:03:35'!
invalidPassword
	'passwordNoValido'!

!methodRemoval: InterfaceTest #invalidClientId stamp: 'jeo 6/12/2022 19:03:40'!
invalidClientId

	^ 'clienteNoValido'!

!methodRemoval: InterfaceTest #invalidCartId stamp: 'jeo 6/12/2022 19:03:43'!
invalidCartId

	^ 'a'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'jeo 6/12/2022 19:04:44'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'jeo 6/12/2022 19:04:44'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'jeo 6/12/2022 19:04:44'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'jeo 6/12/2022 19:04:44'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'jeo 6/12/2022 19:04:44'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'jeo 6/12/2022 19:04:44'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardWithInvalidDigitNumbersRaisesError stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithFloatNumbersRaisesError stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithBlankOwnerRaisesError stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithInvalidCharsInOwnerRaisesError stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 19:04:44'!
ERROR!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 19:04:44'!
ERROR!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 19:04:44'!
ERROR!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 19:04:44'!
ERROR!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:04:44'!
ERROR!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 19:04:44'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'jeo 6/12/2022 19:04:51'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'jeo 6/12/2022 19:06:00' prior: 50503582!
notExpiredCreditCard
	
	^CreditCard withCCNumber: self validCCNumber expiringOn: self validCCExpDate withOwner: self validCCOwner.
! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'jeo 6/12/2022 19:06:01'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'jeo 6/12/2022 19:06:02'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'jeo 6/12/2022 19:06:03'!
ERROR!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:06:09'!
expiringOn: aMonth 
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'jeo 6/12/2022 19:07:08' prior: 50503575!
expiredCreditCard
	
	^CreditCard withCCNumber: self validCCNumber expiringOn: self invalidCCEDate  withOwner: self validCCOwner ! !

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'jeo 6/12/2022 19:07:10'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'jeo 6/12/2022 19:07:15'!
invalidCCEDate
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'jeo 6/12/2022 19:07:22' prior: 50508999!
invalidCCEDate
	^Month month: today monthIndex year: today yearNumber - 1! !

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'jeo 6/12/2022 19:07:23'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithInvalidDigitNumbersRaisesError stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithFloatNumbersRaisesError stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithBlankOwnerRaisesError stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithInvalidCharsInOwnerRaisesError stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'jeo 6/12/2022 19:07:24'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'jeo 6/12/2022 19:07:24'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 19:07:24'!
ERROR!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 19:07:24'!
ERROR!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 19:07:24'!
ERROR!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 19:07:24'!
ERROR!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:07:24'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'jeo 6/12/2022 19:07:26'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 19:10:10' prior: 50503985!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
 	salesBook := 	testObjectsFactory createSalesBook.
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: (salesBook itemsForClientId: cart clientId) items size = 1.
	self assert: total equals: (salesBook totalForClientId: cart clientId) total.! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'jeo 6/12/2022 19:10:13'!
ERROR!

salesBook itemsForClientId: cart clientId!
!CashierTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 19:10:52' prior: 50509157!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
 	salesBook := 	testObjectsFactory createSalesBook.
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: (salesBook itemsForClientId: cart clientId) last items size = 1.
	self assert: total equals: (salesBook totalForClientId: cart clientId) total.! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'jeo 6/12/2022 19:10:54'!
ERROR!

(salesBook itemsForClientId: cart clientId) last!
!CashierTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 19:11:31' prior: 50509182!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
 	salesBook := 	testObjectsFactory createSalesBook.
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: (salesBook itemsForClientId: cart clientId) size = 1.
	self assert: total equals: (salesBook totalForClientId: cart clientId) total.! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'jeo 6/12/2022 19:11:33'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 19:11:42' prior: 50509208!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
 	salesBook := 	testObjectsFactory createSalesBook.
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: (salesBook itemsForClientId: cart clientId) size = 1.
	self assert: total equals: (salesBook totalForClientId: cart clientId).! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'jeo 6/12/2022 19:11:44'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithInvalidDigitNumbersRaisesError stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithFloatNumbersRaisesError stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithBlankOwnerRaisesError stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithInvalidCharsInOwnerRaisesError stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'jeo 6/12/2022 19:11:45'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 19:11:45'!
ERROR!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 19:11:45'!
ERROR!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 19:11:45'!
ERROR!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 19:11:45'!
ERROR!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:11:45'!
ERROR!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 19:11:49'!
ERROR!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 19:12:10' prior: 50502937!
test02CreateCartWithInvalidClientId
	
	| interface cartId |
	interface := self createInterface.
	
	self should: [cartId := interface createCartForClientId: testObjectsFactory invalidClientId password: testObjectsFactory validPassword.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidAuthenticationErrorMessage.
			self assert: cartId isNil].! !

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 19:12:11'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithInvalidDigitNumbersRaisesError stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithFloatNumbersRaisesError stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithBlankOwnerRaisesError stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithInvalidCharsInOwnerRaisesError stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 19:12:13'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 19:12:13'!
ERROR!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 19:12:13'!
ERROR!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 19:12:13'!
ERROR!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:12:13'!
ERROR!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 19:12:15'!
ERROR!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 19:12:32' prior: 50502952!
test03CreateCartWithInvalidPassword
	
	| interface cartId |
	interface := self createInterface.
	
	self should: [cartId := interface createCartForClientId: testObjectsFactory validClientId password: testObjectsFactory invalidPassword.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidAuthenticationErrorMessage.
			self assert: cartId isNil].! !

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 19:12:33'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithInvalidDigitNumbersRaisesError stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithFloatNumbersRaisesError stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithBlankOwnerRaisesError stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithInvalidCharsInOwnerRaisesError stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 19:12:34'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 19:12:34'!
ERROR!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 19:12:34'!
ERROR!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:12:34'!
ERROR!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 19:12:37'!
ERROR!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 19:12:49' prior: 50503026!
test07AddBookToInvalidCart
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	self should: [interface addToCart: testObjectsFactory invalidCartId bookIsbn: book bookQuantity: 1.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidCartIdErrorMessage.
			self assert: (interface listCart: cartId) isEmpty]. ! !

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 19:12:51'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'jeo 6/12/2022 19:12:58'!
invalidCartId
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'jeo 6/12/2022 19:13:08' prior: 50509749!
invalidCartId
	^'a'.! !

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 19:13:09'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithInvalidDigitNumbersRaisesError stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithFloatNumbersRaisesError stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithBlankOwnerRaisesError stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithInvalidCharsInOwnerRaisesError stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 19:13:11'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 19:13:11'!
ERROR!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:13:11'!
ERROR!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 19:13:12'!
ERROR!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 19:13:19' prior: 50503080!
test10ListCartWithInvalidCartId
	
	| interface |
	interface := self createInterface.
	
	self should: [interface listCart: testObjectsFactory invalidCartId.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidCartIdErrorMessage.]. ! !

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 19:13:24'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithInvalidDigitNumbersRaisesError stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithFloatNumbersRaisesError stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithBlankOwnerRaisesError stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithInvalidCharsInOwnerRaisesError stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 19:13:25'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:13:25'!
ERROR!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:13:25'!
ERROR!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 19:13:32' prior: 50504347!
test14CheckOutInvalidCartRaisesError
	
	| interface |
	interface := self createInterface.

	self should: [interface checkOutCart: testObjectsFactory invalidCartId
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCartIdErrorMessage.
	].! !

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:13:34'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithInvalidDigitNumbersRaisesError stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithFloatNumbersRaisesError stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithBlankOwnerRaisesError stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithInvalidCharsInOwnerRaisesError stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 19:14:26'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 19:16:46'!
test25CartDiesHalfHourAfterLastOperation
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	"ACA PASAN 30 min" 
	
	self should: [interface addToCart: cartId bookIsbn: book bookQuantity: 1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCartIdErrorMessage
			]! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:17:04'!
invalidCartIdErrorDescription
	^'invalid cart id'! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:17:04' prior: 50510231!
test25CartDiesHalfHourAfterLastOperation
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	"ACA PASAN 30 min" 
	
	self should: [interface addToCart: cartId bookIsbn: book bookQuantity: 1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCartIdErrorDescription
			]! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:17:04' prior: 50510067!
test14CheckOutInvalidCartRaisesError
	
	| interface |
	interface := self createInterface.

	self should: [interface checkOutCart: testObjectsFactory invalidCartId
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCartIdErrorDescription.
	].! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:17:05' prior: 50506569!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	(carts includesKey: aCartId) ifFalse: [self error: self class invalidCartIdErrorDescription]. 
	
	(aCCEMonth between: 1 and: 12) ifFalse: [self error: self class invalidCCExpirationMonthDescription].
	(aCCEYear >= 1970) ifFalse: [self error: self class invalidCCExpirationYearDescription].
	
	creditCard := CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.
	
	carts removeKey: aCartId.
	currentTransaction := currentTransaction + 1.
	^currentTransaction.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:17:05' prior: 50504674!
test15CheckOutSameCartTwiceRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCartIdErrorDescription.
	].! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:17:05' prior: 50503422!
assertCartIdIsValid: aCartId

	^ (carts includesKey: aCartId) ifFalse: [self error: self class invalidCartIdErrorDescription]! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:17:05' prior: 50509728!
test07AddBookToInvalidCart
	
	| cartId interface book |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	self should: [interface addToCart: testObjectsFactory invalidCartId bookIsbn: book bookQuantity: 1.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidCartIdErrorDescription.
			self assert: (interface listCart: cartId) isEmpty]. ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:17:05' prior: 50509906!
test10ListCartWithInvalidCartId
	
	| interface |
	interface := self createInterface.
	
	self should: [interface listCart: testObjectsFactory invalidCartId.] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Interface invalidCartIdErrorDescription.]. ! !

!methodRemoval: Interface class #invalidCartIdErrorMessage stamp: 'jeo 6/12/2022 19:17:05'!
invalidCartIdErrorMessage
	^'invalid cart id'!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 19:17:08'!
FAILURE!

Object subclass: #Interface
	instanceVariableNames: 'authService currentCartId catalog carts salesBook currentTransaction cartLastOperation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Interface category: 'TusLibros' stamp: 'jeo 6/12/2022 19:20:01'!
Object subclass: #Interface
	instanceVariableNames: 'authService currentCartId catalog carts salesBook currentTransaction cartLastOperation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:21:36' prior: 50503414!
addToCart: aCartId bookIsbn: aBookIsbn bookQuantity: aQuantity 
	self assertCartIdIsValid: aCartId.
	self registerCartIdOperation.
	(carts at: aCartId) add: aQuantity of: aBookIsbn.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:22:28' prior: 50510290!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	(carts includesKey: aCartId) ifFalse: [self error: self class invalidCartIdErrorDescription]. 
	
	self registerCartIdOperation.
	
	(aCCEMonth between: 1 and: 12) ifFalse: [self error: self class invalidCCExpirationMonthDescription].
	(aCCEYear >= 1970) ifFalse: [self error: self class invalidCCExpirationYearDescription].
	
	creditCard := CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.
	
	carts removeKey: aCartId.
	currentTransaction := currentTransaction + 1.
	^currentTransaction.! !

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 19:22:32'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 19:22:32'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 19:22:32'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 19:22:32'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 19:22:32'!
ERROR!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 19:22:32'!
ERROR!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 19:22:32'!
ERROR!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 19:22:32'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 19:22:32'!
ERROR!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 19:22:32'!
ERROR!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 19:22:32'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 19:22:32'!
ERROR!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 19:22:32'!
ERROR!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 19:22:32'!
ERROR!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:22:32'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 19:22:32'!
ERROR!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 19:22:32'!
ERROR!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 19:22:32'!
ERROR!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 19:22:32'!
ERROR!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 19:22:32'!
ERROR!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 19:22:32'!
ERROR!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 19:22:32'!
ERROR!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 19:22:32'!
ERROR!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 19:22:32'!
ERROR!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 19:22:32'!
ERROR!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 19:22:32'!
ERROR!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 19:22:35'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:22:44'!
registerCartIdOperation
	self shouldBeImplemented.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:22:57' prior: 50510544!
registerCartIdOperation
	cartLastOperation := DateAndTime now.! !

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 19:22:59'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 19:23:00'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 19:23:00'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 19:23:00'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 19:23:00'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 19:23:00'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 19:23:00'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:23:00'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 19:23:00'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 19:23:00'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 19:23:00'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 19:23:00'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 19:23:00'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 19:23:00'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 19:23:00'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 19:23:00'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 19:23:00'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 19:23:00'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 19:23:00'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 19:23:00'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 19:23:00'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 19:23:00'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 19:23:00'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 19:23:00'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 19:23:00'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 19:23:00'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 19:23:00'!
FAILURE!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 19:23:00'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:23:35' prior: 50507996!
createCartForClientId: aClientId password: aPassword 
	self assertValidAuthenticationForClientId: aPassword password: aClientId.
	
	currentCartId := currentCartId + 1.
	
	carts at: currentCartId put: (Cart acceptingItemsOf: catalog clientId: aClientId).
	self registerCartIdOperation.
	^currentCartId.
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:23:36' prior: 50510646!
createCartForClientId: aClientId password: aPassword 
	self assertValidAuthenticationForClientId: aPassword password: aClientId.
	
	currentCartId := currentCartId + 1.
	
	carts at: currentCartId put: (Cart acceptingItemsOf: catalog clientId: aClientId).
	self registerCartIdOperation.
	
	^currentCartId.
	! !

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 19:23:38'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 19:23:38'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 19:23:38'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 19:23:38'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 19:23:38'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 19:23:38'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 19:23:38'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 19:23:38'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 19:23:38'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 19:23:38'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 19:23:38'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 19:23:38'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 19:23:38'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 19:23:38'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:23:38'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 19:23:38'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 19:23:38'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 19:23:38'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 19:23:38'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 19:23:38'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 19:23:38'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 19:23:38'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 19:23:38'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 19:23:38'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 19:23:38'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 19:23:38'!
FAILURE!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 19:23:38'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:24:52'!
registerOperationForCartId: aCartId
	cartLastOperation at: aCartId put: DateAndTime now.! !

!methodRemoval: Interface #registerCartIdOperation stamp: 'jeo 6/12/2022 19:24:55'!
registerCartIdOperation
	cartLastOperation := DateAndTime now.!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 19:24:58'!
ERROR!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 19:24:58'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 19:24:58'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 19:24:58'!
ERROR!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 19:24:58'!
ERROR!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 19:24:58'!
ERROR!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 19:24:58'!
ERROR!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 19:24:58'!
ERROR!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 19:24:58'!
ERROR!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 19:24:58'!
ERROR!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 19:24:58'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 19:24:58'!
ERROR!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 19:24:58'!
ERROR!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 19:24:58'!
ERROR!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:24:58'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 19:24:58'!
ERROR!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 19:24:58'!
ERROR!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 19:24:58'!
ERROR!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 19:24:58'!
ERROR!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 19:24:58'!
ERROR!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 19:24:58'!
ERROR!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 19:24:58'!
ERROR!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 19:24:58'!
ERROR!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 19:24:58'!
ERROR!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 19:24:58'!
ERROR!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 19:24:58'!
ERROR!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 19:25:01'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:25:40' prior: 50510659!
createCartForClientId: aClientId password: aPassword 
	self assertValidAuthenticationForClientId: aPassword password: aClientId.
	
	currentCartId := currentCartId + 1.
	
	carts at: currentCartId put: (Cart acceptingItemsOf: catalog clientId: aClientId).
	self registerOperationForCartId: currentCartId.
	
	^currentCartId.
	! !

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 19:25:41'!
ERROR!
!Interface methodsFor: 'initialization' stamp: 'jeo 6/12/2022 19:26:10' prior: 50507193!
initializeWithAuthService: aLoginService withCatalog: aCatalog  
	
	authService := aLoginService.
	currentCartId := 0.
	catalog := aCatalog.
	carts := Dictionary new.
	salesBook := SalesBook new.
	currentTransaction := 0.
	cartLastOperation := Dictionary new.! !

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 19:26:14'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 19:26:14'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 19:26:14'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 19:26:14'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 19:26:14'!
ERROR!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 19:26:14'!
ERROR!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 19:26:14'!
ERROR!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 19:26:14'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 19:26:14'!
ERROR!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 19:26:14'!
ERROR!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 19:26:14'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 19:26:14'!
ERROR!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 19:26:14'!
ERROR!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 19:26:14'!
ERROR!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:26:14'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 19:26:14'!
ERROR!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 19:26:14'!
ERROR!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 19:26:14'!
ERROR!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 19:26:14'!
ERROR!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 19:26:14'!
ERROR!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 19:26:14'!
ERROR!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 19:26:14'!
ERROR!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 19:26:14'!
ERROR!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 19:26:14'!
ERROR!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 19:26:14'!
ERROR!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 19:26:14'!
ERROR!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 19:26:16'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:26:27' prior: 50510416!
addToCart: aCartId bookIsbn: aBookIsbn bookQuantity: aQuantity 
	self assertCartIdIsValid: aCartId.
	self registerOperationForCartId: aCartId.
	(carts at: aCartId) add: aQuantity of: aBookIsbn.! !

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 19:26:28'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 19:26:29'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 19:26:29'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 19:26:29'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 19:26:29'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 19:26:29'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 19:26:29'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:26:29'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 19:26:29'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 19:26:29'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 19:26:29'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 19:26:29'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 19:26:29'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 19:26:29'!
ERROR!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 19:26:29'!
ERROR!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 19:26:29'!
ERROR!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 19:26:29'!
ERROR!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 19:26:29'!
ERROR!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 19:26:29'!
ERROR!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 19:26:29'!
ERROR!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 19:26:29'!
ERROR!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 19:26:29'!
ERROR!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 19:26:29'!
ERROR!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 19:26:29'!
ERROR!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 19:26:29'!
ERROR!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 19:26:29'!
ERROR!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 19:26:29'!
FAILURE!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 19:26:31'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:26:44' prior: 50510425!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	(carts includesKey: aCartId) ifFalse: [self error: self class invalidCartIdErrorDescription]. 
	
	self registerOperationForCartId: aCartId.
	
	(aCCEMonth between: 1 and: 12) ifFalse: [self error: self class invalidCCExpirationMonthDescription].
	(aCCEYear >= 1970) ifFalse: [self error: self class invalidCCExpirationYearDescription].
	
	creditCard := CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.
	
	carts removeKey: aCartId.
	currentTransaction := currentTransaction + 1.
	^currentTransaction.! !

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 19:26:45'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 19:26:47'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 19:26:47'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 19:26:47'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 19:26:47'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 19:26:47'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 19:26:47'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:26:47'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 19:26:47'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 19:26:47'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 19:26:47'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 19:26:47'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 19:26:47'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 19:26:47'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 19:26:47'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 19:26:47'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 19:26:47'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 19:26:47'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 19:26:47'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 19:26:47'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 19:26:47'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 19:26:47'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 19:26:47'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 19:26:47'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 19:26:47'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 19:26:47'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 19:26:47'!
FAILURE!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 19:26:47'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:30:37' prior: 50511073!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	(cartLastOperation at: aCartId - DateAndTime now) > 30 minutes ifTrue: [self removeCartId: aCartId].
	
	(carts includesKey: aCartId) ifFalse: [self error: self class invalidCartIdErrorDescription]. 
	
	self registerOperationForCartId: aCartId.
	
	(aCCEMonth between: 1 and: 12) ifFalse: [self error: self class invalidCCExpirationMonthDescription].
	(aCCEYear >= 1970) ifFalse: [self error: self class invalidCCExpirationYearDescription].
	
	creditCard := CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.
	
	carts removeKey: aCartId.
	currentTransaction := currentTransaction + 1.
	^currentTransaction.! !

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 19:30:39'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 19:30:39'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 19:30:39'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 19:30:39'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 19:30:39'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 19:30:39'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 19:30:39'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 19:30:39'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 19:30:39'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 19:30:39'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 19:30:39'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 19:30:39'!
ERROR!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 19:30:39'!
ERROR!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 19:30:39'!
ERROR!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:30:39'!
FAILURE!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 19:30:39'!
ERROR!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 19:30:39'!
ERROR!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 19:30:39'!
ERROR!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 19:30:39'!
ERROR!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 19:30:39'!
ERROR!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 19:30:39'!
ERROR!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 19:30:39'!
ERROR!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 19:30:40'!
ERROR!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 19:30:40'!
ERROR!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 19:30:40'!
ERROR!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 19:30:40'!
FAILURE!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 19:30:45'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:31:21' prior: 50511197!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	((cartLastOperation at: aCartId) - DateAndTime now) > 30 minutes ifTrue: [self removeCartId: aCartId].
	
	(carts includesKey: aCartId) ifFalse: [self error: self class invalidCartIdErrorDescription]. 
	
	self registerOperationForCartId: aCartId.
	
	(aCCEMonth between: 1 and: 12) ifFalse: [self error: self class invalidCCExpirationMonthDescription].
	(aCCEYear >= 1970) ifFalse: [self error: self class invalidCCExpirationYearDescription].
	
	creditCard := CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.
	
	carts removeKey: aCartId.
	currentTransaction := currentTransaction + 1.
	^currentTransaction.! !

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 19:31:22'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 19:31:27'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 19:31:27'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 19:31:27'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 19:31:27'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 19:31:27'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 19:31:27'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 19:31:27'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 19:31:27'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 19:31:27'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 19:31:27'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 19:31:27'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 19:31:27'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 19:31:27'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 19:31:27'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:31:27'!
FAILURE!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 19:31:27'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 19:31:27'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 19:31:27'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 19:31:27'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 19:31:27'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 19:31:27'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 19:31:27'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 19:31:27'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 19:31:27'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 19:31:27'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 19:31:27'!
FAILURE!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:31:30'!
FAILURE!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 19:32:04'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 19:32:04'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 19:32:04'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 19:32:04'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 19:32:04'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 19:32:04'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 19:32:04'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 19:32:04'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 19:32:04'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 19:32:04'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 19:32:04'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 19:32:04'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 19:32:04'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 19:32:04'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:32:04'!
FAILURE!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 19:32:04'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 19:32:04'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 19:32:04'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 19:32:04'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 19:32:04'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 19:32:05'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 19:32:05'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 19:32:05'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 19:32:05'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 19:32:05'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 19:32:05'!
FAILURE!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:32:07'!
FAILURE!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:32:39'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:39:39' prior: 50511321!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	((cartLastOperation includesKey: aCartId) and: [((cartLastOperation at: aCartId) - DateAndTime now) > 30 minutes]) ifTrue: [self removeCartId: aCartId].
	(carts includesKey: aCartId) ifFalse: [self error: self class invalidCartIdErrorDescription]. 
	
	self registerOperationForCartId: aCartId.
	
	(aCCEMonth between: 1 and: 12) ifFalse: [self error: self class invalidCCExpirationMonthDescription].
	(aCCEYear >= 1970) ifFalse: [self error: self class invalidCCExpirationYearDescription].
	
	creditCard := CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.
	
	carts removeKey: aCartId.
	currentTransaction := currentTransaction + 1.
	^currentTransaction.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:39:44' prior: 50511540!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	((cartLastOperation includesKey: aCartId) and: [((cartLastOperation at: aCartId) - DateAndTime now) > 30 minutes]) ifTrue: [self removeCartId: aCartId].
	(carts includesKey: aCartId) ifFalse: [self error: self class invalidCartIdErrorDescription]. 
	
	self registerOperationForCartId: aCartId.
	
	(aCCEMonth between: 1 and: 12) ifFalse: [self error: self class invalidCCExpirationMonthDescription].
	(aCCEYear >= 1970) ifFalse: [self error: self class invalidCCExpirationYearDescription].
	
	creditCard := CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.
	
	carts removeKey: aCartId.
	currentTransaction := currentTransaction + 1.
	^currentTransaction.! !

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 19:40:47'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 19:40:47'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 19:40:47'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 19:40:47'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 19:40:47'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 19:40:47'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 19:40:47'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 19:40:47'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 19:40:47'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 19:40:47'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 19:40:47'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 19:40:47'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 19:40:47'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 19:40:47'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 19:40:47'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 19:40:47'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 19:40:47'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 19:40:47'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 19:40:47'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 19:40:47'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 19:40:47'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 19:40:47'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 19:40:47'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 19:40:47'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 19:40:47'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 19:40:47'!
FAILURE!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 19:40:47'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:41:49'!
removeCartId: aCartId
	carts removeKey: aCartId.
	cartLastOperation removeKey: aCartId.! !

Object subclass: #CartsLifeStatus
	instanceVariableNames: 'interface lastOp'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartsLifeStatus category: 'TusLibros' stamp: 'jeo 6/12/2022 19:49:22'!
Object subclass: #CartsLifeStatus
	instanceVariableNames: 'interface lastOp'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRenamed: #CartsLifeStatus as: #CartLifeStatus stamp: 'jeo 6/12/2022 19:49:33'!
Smalltalk renameClassNamed: #CartsLifeStatus as: #CartLifeStatus!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:51:53' prior: 50511577!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	(carts includesKey: aCartId) ifFalse: [self error: self class invalidCartIdErrorDescription]. 
	
	(aCCEMonth between: 1 and: 12) ifFalse: [self error: self class invalidCCExpirationMonthDescription].
	(aCCEYear >= 1970) ifFalse: [self error: self class invalidCCExpirationYearDescription].
	
	creditCard := CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.
	
	carts removeKey: aCartId.
	currentTransaction := currentTransaction + 1.
	^currentTransaction.! !

Object subclass: #Interface
	instanceVariableNames: 'authService currentCartId catalog carts salesBook currentTransaction cartLifeStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Interface category: 'TusLibros' stamp: 'jeo 6/12/2022 19:53:20'!
Object subclass: #Interface
	instanceVariableNames: 'authService currentCartId catalog carts salesBook currentTransaction cartLifeStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'initialization' stamp: 'jeo 6/12/2022 19:53:54' prior: 50510874!
initializeWithAuthService: aLoginService withCatalog: aCatalog  
	
	authService := aLoginService.
	currentCartId := 0.
	catalog := aCatalog.
	carts := Dictionary new.
	salesBook := SalesBook new.
	currentTransaction := 0.
	cartLifeStatus := CartLifeStatus forInterface: self.! !
!CartLifeStatus methodsFor: 'no messages' stamp: 'jeo 6/12/2022 19:55:16'!
registerLastTimeUsedForCartId: aCartId

	! !
!CartLifeStatus methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:55:55' prior: 50511783!
registerLastTimeUsedForCartId: aCartId
	
	lastOp at: aCartId put: DateAndTime now.! !
!CartLifeStatus methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:56:18' prior: 50511788!
registerLastTimeUsedForCartId: aCartId
	
	lastOp at: aCartId put: DateAndTime now.! !
!CartLifeStatus methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 19:58:32'!
hasExcedeedLifetime: aCartId
	
	^(lastOp at: aCartId - DateAndTime now) > 30 minutes! !

CartLifeStatus subclass: #CartLifetimeEnded
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartLifetimeEnded category: 'TusLibros' stamp: 'jeo 6/12/2022 20:00:34'!
CartLifeStatus subclass: #CartLifetimeEnded
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

CartLifeStatus subclass: #CartLifetimeOk
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartLifetimeOk category: 'TusLibros' stamp: 'jeo 6/12/2022 20:00:48'!
CartLifeStatus subclass: #CartLifetimeOk
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartLifetimeEnded methodsFor: 'no messages' stamp: 'jeo 6/12/2022 20:01:38' overrides: 50511800!
hasExcedeedLifetime: aCartId
	
	^true! !
!CartLifetimeOk methodsFor: 'no messages' stamp: 'jeo 6/12/2022 20:01:50' overrides: 50511800!
hasExcedeedLifetime: aCartId
	
	^(lastOp at: aCartId - DateAndTime now) > 30 minutes! !
!CartLifetimeOk methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:02:02' overrides: 50511794!
registerLastTimeUsedForCartId: aCartId
	
	lastOp at: aCartId put: DateAndTime now.! !
!CartLifetimeEnded methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:02:11' overrides: 50511794!
registerLastTimeUsedForCartId: aCartId! !
!CartLifeStatus methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:02:25' prior: 50511800!
hasExcedeedLifetime: aCartId
	
	^ self subclassResponsibility ! !
!CartLifeStatus methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:02:31' prior: 50511794!
registerLastTimeUsedForCartId: aCartId
	
	^ self subclassResponsibility ! !

!classDefinition: #InterfaceTest category: 'TusLibros' stamp: 'jeo 6/12/2022 20:12:47'!
TestCase subclass: #InterfaceTest
	instanceVariableNames: 'authBehavior testObjectsFactory lifetimeBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceTest methodsFor: 'simulations' stamp: 'jeo 6/12/2022 20:12:44'!
validateLifetimeCartId: aCartId
	^lifetimeBehavior value: aCartId! !
!InterfaceTest methodsFor: 'creations' stamp: 'jeo 6/12/2022 20:13:41' prior: 50503650!
createInterface

	^ Interface withAuthService: self withCatalog: testObjectsFactory defaultCatalog withCartLifetimeMonitor: self. ! !
!InterfaceTest methodsFor: 'simulations' stamp: 'jeo 6/12/2022 20:14:28'!
changeLifetimeBehaviorTo: aBlock
	lifetimeBehavior := aBlock! !

!methodRemoval: InterfaceTest #changeLifetimeBehaviorTo: stamp: 'jeo 6/12/2022 20:15:07'!
changeLifetimeBehaviorTo: aBlock
	lifetimeBehavior := aBlock!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 20:16:11' prior: 50510253!
test25CartDiesHalfHourAfterLastOperation
	| interface book cartId |
	lifetimeBehavior := [:aCartId | true].
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	lifetimeBehavior := [:aCartId | false].
	self should: [interface addToCart: cartId bookIsbn: book bookQuantity: 1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCartIdErrorDescription
			]! !
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 20:16:33' prior: 50511894!
test25CartDiesHalfHourAfterLastOperation
	| interface book cartId |
	lifetimeBehavior := [:aCartId | true].
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	lifetimeBehavior := [:aCartId | false].
	self should: [interface addToCart: cartId bookIsbn: book bookQuantity: 1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCartExpiredErrorDescription
			]! !
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 20:16:41' prior: 50511913!
test25CartDiesHalfHourAfterLastOperation
	| interface book cartId |
	lifetimeBehavior := [:aCartId | true].
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	lifetimeBehavior := [:aCartId | false].
	self should: [interface addToCart: cartId bookIsbn: book bookQuantity: 1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface cartExpiredErrorDescription
			]! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:18:03' prior: 50511725!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	cartLifeStatus validateLifetimeCartId: aCartId ifFalse: [self removeCartId: aCartId].
	(carts includesKey: aCartId) ifFalse: [self error: self class invalidCartIdErrorDescription]. 
	
	(aCCEMonth between: 1 and: 12) ifFalse: [self error: self class invalidCCExpirationMonthDescription].
	(aCCEYear >= 1970) ifFalse: [self error: self class invalidCCExpirationYearDescription].
	
	creditCard := CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.
	
	carts removeKey: aCartId.
	currentTransaction := currentTransaction + 1.
	^currentTransaction.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:18:18' prior: 50511953!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	(cartLifeStatus validateLifetimeCartId: aCartId) ifFalse: [self removeCartId: aCartId].
	(carts includesKey: aCartId) ifFalse: [self error: self class invalidCartIdErrorDescription]. 
	
	(aCCEMonth between: 1 and: 12) ifFalse: [self error: self class invalidCCExpirationMonthDescription].
	(aCCEYear >= 1970) ifFalse: [self error: self class invalidCCExpirationYearDescription].
	
	creditCard := CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.
	
	carts removeKey: aCartId.
	currentTransaction := currentTransaction + 1.
	^currentTransaction.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:18:33' prior: 50510973!
addToCart: aCartId bookIsbn: aBookIsbn bookQuantity: aQuantity 
	(cartLifeStatus validateLifetimeCartId: aCartId) ifFalse: [self removeCartId: aCartId].
	self assertCartIdIsValid: aCartId.
	self registerOperationForCartId: aCartId.
	(carts at: aCartId) add: aQuantity of: aBookIsbn.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:18:45' prior: 50503460!
listCart: aCartId
	(cartLifeStatus validateLifetimeCartId: aCartId) ifFalse: [self removeCartId: aCartId].
	self assertCartIdIsValid: aCartId.
	^(carts at: aCartId) items.! !

!methodRemoval: Interface #registerOperationForCartId: stamp: 'jeo 6/12/2022 20:19:03'!
registerOperationForCartId: aCartId
	cartLastOperation at: aCartId put: DateAndTime now.!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:19:14' prior: 50511702!
removeCartId: aCartId
	carts removeKey: aCartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:19:49' prior: 50512047!
removeCartId: aCartId
	carts removeKey: aCartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:20:10'!
assertCartLifetimeIsValid: aCartId

	^ (cartLifeStatus validateLifetimeCartId: aCartId) ifFalse: [self removeCartId: aCartId]! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:20:10' prior: 50512021!
addToCart: aCartId bookIsbn: aBookIsbn bookQuantity: aQuantity 
	self assertCartLifetimeIsValid: aCartId.
	self assertCartIdIsValid: aCartId.
	self registerOperationForCartId: aCartId.
	(carts at: aCartId) add: aQuantity of: aBookIsbn.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:20:10' prior: 50512033!
listCart: aCartId
	self assertCartLifetimeIsValid: aCartId.
	self assertCartIdIsValid: aCartId.
	^(carts at: aCartId) items.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:20:10' prior: 50511987!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	self assertCartLifetimeIsValid: aCartId.
	(carts includesKey: aCartId) ifFalse: [self error: self class invalidCartIdErrorDescription]. 
	
	(aCCEMonth between: 1 and: 12) ifFalse: [self error: self class invalidCCExpirationMonthDescription].
	(aCCEYear >= 1970) ifFalse: [self error: self class invalidCCExpirationYearDescription].
	
	creditCard := CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.
	
	carts removeKey: aCartId.
	currentTransaction := currentTransaction + 1.
	^currentTransaction.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:20:15' prior: 50512064!
addToCart: aCartId bookIsbn: aBookIsbn bookQuantity: aQuantity 
	self assertCartLifetimeIsValid: aCartId.
	self assertCartIdIsValid: aCartId.
	(carts at: aCartId) add: aQuantity of: aBookIsbn.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:20:45' prior: 50512057!
assertCartLifetimeIsValid: aCartId

	^ (cartLifeStatus validateLifetimeCartId: aCartId) ifFalse: [
		self removeCartId: aCartId.
		self error: self class cartLifetime]! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:21:04' prior: 50512124!
assertCartLifetimeIsValid: aCartId

	^ (cartLifeStatus validateLifetimeCartId: aCartId) ifFalse: [
		self removeCartId: aCartId.
		self error: self class cartExpiredErrorDescription]! !

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:21:05'!
ERROR!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:21:05'!
ERROR!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 20:21:05'!
ERROR!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 20:21:05'!
ERROR!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 20:21:05'!
ERROR!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 20:21:05'!
ERROR!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 20:21:05'!
ERROR!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 20:21:05'!
ERROR!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 20:21:05'!
ERROR!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 20:21:05'!
ERROR!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 20:21:05'!
ERROR!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:21:05'!
ERROR!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:21:05'!
ERROR!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:21:05'!
ERROR!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:21:05'!
ERROR!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:21:05'!
ERROR!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:21:05'!
ERROR!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:21:05'!
ERROR!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:21:05'!
ERROR!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:21:05'!
ERROR!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:21:05'!
ERROR!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:21:05'!
ERROR!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:21:05'!
ERROR!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:21:05'!
ERROR!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:21:05'!
ERROR!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:21:05'!
ERROR!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:21:07'!
ERROR!
!Interface class methodsFor: 'instance creation' stamp: 'jeo 6/12/2022 20:21:22'!
withAuthService: anInterfaceTest withCatalog: aDictionary withCartLifetimeMonitor: anInterfaceTest3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithAuthService: anInterfaceTest withCatalog: aDictionary withCartLifetimeMonitor: anInterfaceTest3 ! !
!Interface class methodsFor: 'instance creation' stamp: 'jeo 6/12/2022 20:22:15' prior: 50512229!
withAuthService: anAuth withCatalog: aCatalog withCartLifetimeMonitor: aLifetimeMonitor 

	^self new initializeWithAuthService: anAuth withCatalog: aCatalog withCartLifetimeMonitor: aLifetimeMonitor. ! !

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:22:16'!
ERROR!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:22:16'!
ERROR!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 20:22:16'!
ERROR!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 20:22:16'!
ERROR!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 20:22:16'!
ERROR!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 20:22:16'!
ERROR!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 20:22:16'!
ERROR!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 20:22:16'!
ERROR!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 20:22:16'!
ERROR!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 20:22:16'!
ERROR!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 20:22:16'!
ERROR!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:22:16'!
ERROR!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:22:16'!
ERROR!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:22:16'!
ERROR!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:22:16'!
ERROR!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:22:16'!
ERROR!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:22:16'!
ERROR!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:22:16'!
ERROR!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:22:16'!
ERROR!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:22:16'!
ERROR!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:22:16'!
ERROR!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:22:16'!
ERROR!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:22:16'!
ERROR!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:22:16'!
ERROR!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:22:16'!
ERROR!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:22:16'!
ERROR!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:22:19'!
ERROR!

!classDefinition: #Interface category: 'TusLibros' stamp: 'jeo 6/12/2022 20:22:25'!
Object subclass: #Interface
	instanceVariableNames: 'authService currentCartId catalog carts salesBook currentTransaction cartLifeStatus auth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Interface category: 'TusLibros' stamp: 'jeo 6/12/2022 20:22:25'!
Object subclass: #Interface
	instanceVariableNames: 'authService currentCartId catalog carts salesBook currentTransaction cartLifeStatus auth lifetimeMonitor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'initialization' stamp: 'jeo 6/12/2022 20:22:25'!
initializeWithAuthService: anAuth withCatalog: aCatalog withCartLifetimeMonitor: aLifetimeMonitor 
	self shouldBeImplemented.
	auth := anAuth.
	catalog := aCatalog.
	lifetimeMonitor := aLifetimeMonitor.! !
!Interface methodsFor: 'initialization' stamp: 'jeo 6/12/2022 20:22:37' prior: 50512359!
initializeWithAuthService: anAuth withCatalog: aCatalog withCartLifetimeMonitor: aLifetimeMonitor 
	auth := anAuth.
	catalog := aCatalog.
	cartLifeStatus := aLifetimeMonitor.! !

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:22:39'!
ERROR!
!Interface methodsFor: 'initialization' stamp: 'jeo 6/12/2022 20:23:23' prior: 50512369!
initializeWithAuthService: anAuth withCatalog: aCatalog withCartLifetimeMonitor: aLifetimeMonitor 
	authService := anAuth.
	catalog := aCatalog.
	cartLifeStatus := aLifetimeMonitor.! !
!Interface methodsFor: 'initialization' stamp: 'jeo 6/12/2022 20:24:23' prior: 50512381!
initializeWithAuthService: anAuth withCatalog: aCatalog withCartLifetimeMonitor: aLifetimeMonitor 
	authService := anAuth.
	currentCartId := 0.
	catalog := aCatalog.
	carts := Dictionary new.
	salesBook := SalesBook new.
	currentTransaction := 0.
	cartLifeStatus := aLifetimeMonitor.! !

!methodRemoval: Interface #initializeWithAuthService:withCatalog: stamp: 'jeo 6/12/2022 20:24:28'!
initializeWithAuthService: aLoginService withCatalog: aCatalog  
	
	authService := aLoginService.
	currentCartId := 0.
	catalog := aCatalog.
	carts := Dictionary new.
	salesBook := SalesBook new.
	currentTransaction := 0.
	cartLifeStatus := CartLifeStatus forInterface: self.!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:24:31'!
ERROR!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:24:31'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 20:24:31'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 20:24:31'!
ERROR!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 20:24:31'!
ERROR!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 20:24:31'!
ERROR!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 20:24:31'!
ERROR!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 20:24:31'!
ERROR!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 20:24:31'!
ERROR!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 20:24:31'!
ERROR!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 20:24:31'!
ERROR!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:24:31'!
ERROR!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:24:31'!
ERROR!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:24:31'!
ERROR!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:24:31'!
ERROR!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:24:31'!
ERROR!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:24:31'!
ERROR!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:24:31'!
ERROR!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:24:31'!
ERROR!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:24:31'!
ERROR!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:24:31'!
ERROR!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:24:31'!
ERROR!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:24:31'!
ERROR!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:24:31'!
ERROR!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:24:31'!
ERROR!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:24:31'!
ERROR!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:24:33'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:24:43' prior: 50510858!
createCartForClientId: aClientId password: aPassword 
	self assertValidAuthenticationForClientId: aPassword password: aClientId.
	
	currentCartId := currentCartId + 1.
	
	carts at: currentCartId put: (Cart acceptingItemsOf: catalog clientId: aClientId).
	
	^currentCartId.
	! !

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:24:44'!
ERROR!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:26:18'!
ERROR!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 20:27:03' prior: 50511933!
test25CartDiesHalfHourAfterLastOperation
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	lifetimeBehavior := [:aCartId | false].
	self should: [interface addToCart: cartId bookIsbn: book bookQuantity: 1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface cartExpiredErrorDescription
			]! !
!InterfaceTest methodsFor: 'setup' stamp: 'jeo 6/12/2022 20:27:18' prior: 50508101 overrides: 16961394!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	authBehavior := [ :aClientId :aPassword | aClientId = testObjectsFactory validClientId and: (aPassword = testObjectsFactory validPassword)].
	lifetimeBehavior := [:aCartId | true].! !

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:28:04'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:28:07'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:28:07'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 20:28:07'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 20:28:07'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 20:28:07'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 20:28:07'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 20:28:07'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 20:28:07'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 20:28:07'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 20:28:07'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 20:28:07'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:28:07'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:28:07'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:28:07'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:28:07'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:28:07'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:28:07'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:28:07'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:28:07'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:28:07'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:28:07'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:28:07'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:28:07'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:28:07'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:28:07'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:28:07'!
ERROR!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:28:07'!
ERROR!
!Interface class methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:28:24'!
cartExpiredErrorDescription
	self shouldBeImplemented.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:28:40' prior: 50512642!
cartExpiredErrorDescription
	^'cart lifetime expired'! !

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:28:41'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:28:44'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:28:44'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 20:28:44'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 20:28:44'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 20:28:44'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 20:28:44'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 20:28:44'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 20:28:44'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 20:28:44'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 20:28:44'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 20:28:44'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:28:44'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:28:44'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:28:44'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:28:44'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:28:44'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:28:44'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:28:44'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:28:44'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:28:44'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:28:44'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:28:44'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:28:44'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:28:44'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:28:44'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:28:44'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithInvalidDigitNumbersRaisesError stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithFloatNumbersRaisesError stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithBlankOwnerRaisesError stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithInvalidCharsInOwnerRaisesError stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:28:47'!
PASSED!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:31:44' prior: 50510352!
assertCartIdIsValid: aCartId

	^ (carts includesKey: aCartId) ifFalse: [self error: self class invalidCartIdErrorDescription]! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:31:44' prior: 50512082!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	self assertCartLifetimeIsValid: aCartId.
	self assertCartIdIsValid: aCartId. 
	
	(aCCEMonth between: 1 and: 12) ifFalse: [self error: self class invalidCCExpirationMonthDescription].
	(aCCEYear >= 1970) ifFalse: [self error: self class invalidCCExpirationYearDescription].
	
	creditCard := CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.
	
	carts removeKey: aCartId.
	currentTransaction := currentTransaction + 1.
	^currentTransaction.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:31:44' prior: 50512886!
assertCartIdIsValid: aCartId

	^ self assertCartIdIsValid: aCartId! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:32:01'!
assertCreditCartExpMonthIsValid: aCCEMonth

	^ (aCCEMonth between: 1 and: 12) ifFalse: [self error: self class invalidCCExpirationMonthDescription]! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:32:01' prior: 50512893!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	self assertCartLifetimeIsValid: aCartId.
	self assertCartIdIsValid: aCartId. 
	
	self assertCreditCartExpMonthIsValid: aCCEMonth.
	(aCCEYear >= 1970) ifFalse: [self error: self class invalidCCExpirationYearDescription].
	
	creditCard := CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.
	
	carts removeKey: aCartId.
	currentTransaction := currentTransaction + 1.
	^currentTransaction.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:32:18'!
assertCreditCardExpYearIsValid: aCCEYear

	^ (aCCEYear >= 1970) ifFalse: [self error: self class invalidCCExpirationYearDescription]! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:32:18' prior: 50512936!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	self assertCartLifetimeIsValid: aCartId.
	self assertCartIdIsValid: aCartId. 
	
	self assertCreditCartExpMonthIsValid: aCCEMonth.
	self assertCreditCardExpYearIsValid: aCCEYear.
	
	creditCard := CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.
	
	carts removeKey: aCartId.
	currentTransaction := currentTransaction + 1.
	^currentTransaction.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:32:59'!
unregisterCart: aCartId

	^ carts removeKey: aCartId! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:32:59' prior: 50512052!
removeCartId: aCartId
	self unregisterCart: aCartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:32:59' prior: 50512972!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	self assertCartLifetimeIsValid: aCartId.
	self assertCartIdIsValid: aCartId. 
	
	self assertCreditCartExpMonthIsValid: aCCEMonth.
	self assertCreditCardExpYearIsValid: aCCEYear.
	
	creditCard := CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.
	
	self unregisterCart: aCartId.
	currentTransaction := currentTransaction + 1.
	^currentTransaction.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:33:09' prior: 50513009!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	self assertCartLifetimeIsValid: aCartId.
	self assertCartIdIsValid: aCartId. 
	self assertCreditCartExpMonthIsValid: aCCEMonth.
	self assertCreditCardExpYearIsValid: aCCEYear.
	
	creditCard := CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.
	
	self unregisterCart: aCartId.
	currentTransaction := currentTransaction + 1.
	^currentTransaction.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:33:37'!
nextCartId

	^ currentCartId := currentCartId + 1! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:33:37' prior: 50512502!
createCartForClientId: aClientId password: aPassword 
	self assertValidAuthenticationForClientId: aPassword password: aClientId.
	
	self nextCartId.
	
	carts at: currentCartId put: (Cart acceptingItemsOf: catalog clientId: aClientId).
	
	^currentCartId.
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:34:02' prior: 50513068!
createCartForClientId: aClientId password: aPassword 
	self assertValidAuthenticationForClientId: aPassword password: aClientId.
	
	self nextCartId.
	carts at: currentCartId put: (Cart acceptingItemsOf: catalog clientId: aClientId).
	
	^currentCartId.
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:34:16'!
createCartForClientId: aClientId

	^ carts at: currentCartId put: (Cart acceptingItemsOf: catalog clientId: aClientId)! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:34:16' prior: 50513080!
createCartForClientId: aClientId password: aPassword 
	self assertValidAuthenticationForClientId: aPassword password: aClientId.
	
	self nextCartId.
	self createCartForClientId: aClientId.
	
	^currentCartId.
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:36:27' prior: 50508008!
listPurchasesClientId: aClientId password: aPassword
	
	self assertValidAuthenticationForClientId: aPassword password: aClientId.
	^ Sale of: (salesBook totalForClientId: aClientId) items: (salesBook itemsForClientId: aClientId).! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:31:44' prior: 50512923!
assertCartIdIsValid: aCartId

	^ (carts includesKey: aCartId) ifFalse: [self error: self class invalidCartIdErrorDescription]! !

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:37:15'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:37:15'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 20:37:15'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 20:37:15'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 20:37:15'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 20:37:15'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 20:37:15'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 20:37:15'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 20:37:15'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 20:37:15'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 20:37:15'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:37:15'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:37:15'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:37:15'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:37:15'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:37:15'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:37:15'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:37:15'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:37:15'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:37:16'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:37:16'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:37:16'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:37:16'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:37:16'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:37:16'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:37:16'!
PASSED!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:37:43'!
nextTransaction

	^ currentTransaction := currentTransaction + 1! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:37:43' prior: 50513036!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	self assertCartLifetimeIsValid: aCartId.
	self assertCartIdIsValid: aCartId. 
	self assertCreditCartExpMonthIsValid: aCCEMonth.
	self assertCreditCardExpYearIsValid: aCCEYear.
	
	creditCard := CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.
	
	self unregisterCart: aCartId.
	self nextTransaction.
	^currentTransaction.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:38:06' prior: 50513217!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	self assertCartLifetimeIsValid: aCartId.
	self assertCartIdIsValid: aCartId. 
	self assertCreditCartExpMonthIsValid: aCCEMonth.
	self assertCreditCardExpYearIsValid: aCCEYear.
	
	creditCard := CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.
	
	self unregisterCart: aCartId.
	^ self nextTransaction.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:38:32' prior: 50513098!
createCartForClientId: aClientId password: aPassword 
	self assertValidAuthenticationForClientId: aPassword password: aClientId.
	
	
	self createCartForClientId: aClientId.
	^self nextCartId.
	! !

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:38:33'!
ERROR!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:38:33'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 20:38:33'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 20:38:33'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 20:38:33'!
ERROR!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 20:38:33'!
ERROR!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 20:38:33'!
ERROR!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 20:38:33'!
ERROR!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 20:38:33'!
FAILURE!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 20:38:33'!
FAILURE!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 20:38:33'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:38:33'!
FAILURE!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:38:33'!
ERROR!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:38:33'!
ERROR!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:38:33'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:38:33'!
ERROR!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:38:33'!
ERROR!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:38:33'!
ERROR!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:38:33'!
ERROR!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:38:33'!
ERROR!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:38:33'!
ERROR!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:38:33'!
ERROR!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:38:33'!
ERROR!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:38:33'!
ERROR!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:38:33'!
ERROR!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:38:33'!
FAILURE!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:38:36'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:34:16' prior: 50513270!
createCartForClientId: aClientId password: aPassword 
	self assertValidAuthenticationForClientId: aPassword password: aClientId.
	
	self nextCartId.
	self createCartForClientId: aClientId.
	
	^currentCartId.
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:34:16' prior: 50513367!
createCartForClientId: aClientId password: aPassword 
	self assertValidAuthenticationForClientId: aPassword password: aClientId.
	
	self nextCartId.
	self createCartForClientId: aClientId.
	
	^currentCartId.
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:40:51' prior: 50513377!
createCartForClientId: aClientId password: aPassword 
	self assertValidAuthenticationForClientId: aPassword password: aClientId.
	
	self nextCartId.
	^self createCartForClientId: aClientId.
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'jeo 6/12/2022 20:41:07' prior: 50513091!
createCartForClientId: aClientId

	carts at: currentCartId put: (Cart acceptingItemsOf: catalog clientId: aClientId).
	^ currentCartId.! !

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:41:14'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:41:14'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 20:41:14'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 20:41:14'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 20:41:14'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 20:41:14'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 20:41:14'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 20:41:14'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 20:41:14'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 20:41:14'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 20:41:14'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:41:14'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:41:14'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:41:14'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:41:14'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:41:14'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:41:14'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:41:14'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:41:14'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:41:14'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:41:14'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:41:14'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:41:14'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:41:14'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:41:14'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:41:14'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithInvalidDigitNumbersRaisesError stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithFloatNumbersRaisesError stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithBlankOwnerRaisesError stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithInvalidCharsInOwnerRaisesError stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:41:18'!
PASSED!

!classRemoval: #PurchasesList stamp: 'jeo 6/12/2022 20:43:26'!
Object subclass: #PurchasesList
	instanceVariableNames: 'items total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:43:28'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:43:28'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 20:43:28'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 20:43:28'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 20:43:28'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 20:43:28'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 20:43:28'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 20:43:28'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 20:43:28'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 20:43:28'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 20:43:28'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:43:28'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:43:28'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:43:28'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:43:28'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:43:28'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:43:28'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:43:28'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:43:28'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:43:28'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:43:28'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:43:28'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:43:28'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:43:28'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:43:28'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:43:28'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithInvalidDigitNumbersRaisesError stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithFloatNumbersRaisesError stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithBlankOwnerRaisesError stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithInvalidCharsInOwnerRaisesError stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:43:32'!
PASSED!
!Interface methodsFor: 'checkout' stamp: 'jeo 6/12/2022 20:45:29'!
createCCWithNumber: aCCEMonth expMonth: aCCEYear expYear: aCCOwner owner: aCCNumber

	^ CreditCard withCCNumber: aCCNumber expiringOn: (Month month: aCCEMonth year: aCCEYear) withOwner: aCCOwner! !
!Interface methodsFor: 'checkout' stamp: 'jeo 6/12/2022 20:45:29' prior: 50513244!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	self assertCartLifetimeIsValid: aCartId.
	self assertCartIdIsValid: aCartId. 
	self assertCreditCartExpMonthIsValid: aCCEMonth.
	self assertCreditCardExpYearIsValid: aCCEYear.
	
	creditCard := self createCCWithNumber: aCCEMonth expMonth: aCCEYear expYear: aCCOwner owner: aCCNumber.
	 
	cashier := Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.
	
	self unregisterCart: aCartId.
	^ self nextTransaction.! !
!Interface methodsFor: 'checkout' stamp: 'jeo 6/12/2022 20:46:06'!
createCahsierForCart: aCartId creditCard: creditCard

	^ Cashier
		toCheckout: (carts at: aCartId) 
		charging: creditCard 
		throught: CashierTest new setUp
		on: DateAndTime now 
		registeringOn: salesBook! !
!Interface methodsFor: 'checkout' stamp: 'jeo 6/12/2022 20:46:06' prior: 50513880!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	self assertCartLifetimeIsValid: aCartId.
	self assertCartIdIsValid: aCartId. 
	self assertCreditCartExpMonthIsValid: aCCEMonth.
	self assertCreditCardExpYearIsValid: aCCEYear.
	
	creditCard := self createCCWithNumber: aCCEMonth expMonth: aCCEYear expYear: aCCOwner owner: aCCNumber.
	 
	cashier := self createCahsierForCart: aCartId creditCard: creditCard.
	
	cashier checkOut.
	
	self unregisterCart: aCartId.
	^ self nextTransaction.! !
!Interface methodsFor: 'checkout' stamp: 'jeo 6/12/2022 20:46:13' prior: 50513915!
checkOutCart: aCartId creditCardNumber: aCCNumber creditCardExpirationMonth: aCCEMonth creditCardExpirationYear: aCCEYear creditCardOwner: aCCOwner
	| cashier creditCard |
	self assertCartLifetimeIsValid: aCartId.
	self assertCartIdIsValid: aCartId. 
	self assertCreditCartExpMonthIsValid: aCCEMonth.
	self assertCreditCardExpYearIsValid: aCCEYear.
	
	creditCard := self createCCWithNumber: aCCEMonth expMonth: aCCEYear expYear: aCCOwner owner: aCCNumber.
	cashier := self createCahsierForCart: aCartId creditCard: creditCard.
	cashier checkOut.
	
	self unregisterCart: aCartId.
	^ self nextTransaction.! !

!methodRemoval: Interface class #withAuthService:withCatalog: stamp: 'jeo 6/12/2022 20:46:47'!
withAuthService: aLoginService withCatalog: aCatalog  
	
	^self new initializeWithAuthService: aLoginService withCatalog: aCatalog. !

!classRemoval: #CartLifetimeEnded stamp: 'jeo 6/12/2022 20:48:29'!
CartLifeStatus subclass: #CartLifetimeEnded
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartLifetimeOk stamp: 'jeo 6/12/2022 20:48:31'!
CartLifeStatus subclass: #CartLifetimeOk
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartLifeStatus stamp: 'jeo 6/12/2022 20:48:33'!
Object subclass: #CartLifeStatus
	instanceVariableNames: 'interface lastOp'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: CreditCard class #expiringOn: stamp: 'jeo 6/12/2022 20:48:53'!
expiringOn: aMonth 
	self shouldBeImplemented.!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 20:49:59' prior: 50504136!
test11CheckOutEmptyCartRaisesError
	
	| cartId interface |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	
	self should: [interface checkOutCart: cartId 
		creditCardNumber: testObjectsFactory validCCNumber
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: testObjectsFactory validCCOwner] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: (interface listCart: cartId) isEmpty.
	]. 
	! !

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:50:00'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:50:00'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:50:00'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 20:50:00'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 20:50:01'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 20:50:01'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 20:50:01'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 20:50:01'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 20:50:01'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 20:50:01'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 20:50:01'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 20:50:01'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:50:01'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:50:01'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:50:01'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:50:01'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:50:01'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:50:01'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:50:01'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:50:01'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:50:01'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:50:01'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:50:01'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:50:01'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:50:01'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:50:01'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:50:01'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 20:51:12' prior: 50508285!
test12CheckOutCartWithOneBook
	
	| cartId interface book purchaseList |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId 
		creditCardNumber: testObjectsFactory validCCNumber 
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: testObjectsFactory validCCOwner.
		
	purchaseList := interface listPurchasesClientId: testObjectsFactory validClientId password: testObjectsFactory validPassword.
	self assert: (purchaseList items includes: book).
	self assert: 1 equals: (purchaseList items occurrencesOf: book).
	self assert: 1 equals: purchaseList items size.
	! !

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:51:14'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:51:14'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:51:14'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 20:51:14'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 20:51:14'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 20:51:14'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 20:51:14'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 20:51:14'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 20:51:14'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 20:51:14'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 20:51:14'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 20:51:14'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:51:14'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:51:14'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:51:14'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:51:14'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:51:14'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:51:14'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:51:14'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:51:14'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:51:14'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:51:14'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:51:14'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:51:14'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:51:14'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:51:14'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:51:14'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 20:51:46' prior: 50508398!
test13CheckOutCartWithTwoBooks
	
	| cartId interface book purchaseList |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 2.
	
	interface checkOutCart: cartId 
		creditCardNumber: testObjectsFactory validCCNumber 
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: testObjectsFactory validCCOwner.
		
	purchaseList := interface listPurchasesClientId: testObjectsFactory validClientId password: testObjectsFactory validPassword.
	self assert: (purchaseList items includes: book).
	self assert: 2 equals: (purchaseList items occurrencesOf: book).
	self assert: 2 equals: purchaseList items size.
	! !

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:51:47'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:51:47'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:51:47'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 20:51:48'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 20:51:48'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 20:51:48'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 20:51:48'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 20:51:48'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 20:51:48'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 20:51:48'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 20:51:48'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 20:51:48'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:51:48'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:51:48'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:51:48'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:51:48'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:51:48'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:51:48'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:51:48'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:51:48'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:51:48'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:51:48'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:51:48'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:51:48'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:51:48'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:51:48'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:51:48'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 20:52:12' prior: 50510271!
test14CheckOutInvalidCartRaisesError
	
	| interface |
	interface := self createInterface.

	self should: [interface checkOutCart: testObjectsFactory invalidCartId
		creditCardNumber: testObjectsFactory validCCNumber 
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: testObjectsFactory validCCOwner.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCartIdErrorDescription.
	].! !
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 20:52:13' prior: 50514338!
test14CheckOutInvalidCartRaisesError
	
	| interface |
	interface := self createInterface.

	self should: [interface checkOutCart: testObjectsFactory invalidCartId
		creditCardNumber: testObjectsFactory validCCNumber 
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: testObjectsFactory validCCOwner]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCartIdErrorDescription.
	].! !

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:52:14'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:52:14'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:52:14'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 20:52:14'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 20:52:14'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 20:52:14'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 20:52:14'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 20:52:14'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 20:52:14'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 20:52:14'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 20:52:14'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 20:52:14'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:52:14'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:52:14'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:52:14'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:52:14'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:52:14'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:52:14'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:52:14'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:52:14'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:52:14'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:52:14'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:52:14'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:52:14'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:52:14'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:52:14'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:52:14'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 20:52:41' prior: 50510321!
test15CheckOutSameCartTwiceRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId 
		creditCardNumber: testObjectsFactory validCCNumber 
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: testObjectsFactory validCCOwner.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCartIdErrorDescription.
	].! !
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 20:52:57' prior: 50514468!
test15CheckOutSameCartTwiceRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId 
		creditCardNumber: testObjectsFactory validCCNumber 
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: testObjectsFactory validCCOwner.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory validCCNumber 
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: testObjectsFactory validCCOwner]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCartIdErrorDescription.
	].! !

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:52:57'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:52:58'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:52:58'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 20:52:58'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 20:52:58'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 20:52:58'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 20:52:58'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 20:52:58'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 20:52:58'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 20:52:58'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 20:52:58'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 20:52:58'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:52:58'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:52:58'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:52:58'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:52:58'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:52:58'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:52:58'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:52:58'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:52:58'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:52:58'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:52:58'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:52:58'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:52:58'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:52:58'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:52:58'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:52:58'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 20:53:13' prior: 50505395!
test16CheckOutWithInvalidCCNumberRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory invalidCCNumber
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: testObjectsFactory validCCOwner]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = CreditCard invalidCCNumberErrorDescription.
	].! !

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:53:16'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:53:16'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:53:16'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 20:53:16'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 20:53:16'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 20:53:16'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 20:53:16'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 20:53:16'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 20:53:16'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 20:53:16'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 20:53:16'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 20:53:16'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:53:16'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:53:16'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:53:16'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:53:16'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:53:16'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:53:16'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:53:16'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:53:16'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:53:16'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:53:16'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:53:16'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:53:16'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:53:16'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:53:16'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:53:16'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 20:53:36' prior: 50506246!
test17CheckOutWithInvalidExpirationMonthRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory validCCNumber
		creditCardExpirationMonth: 13
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: testObjectsFactory validCCOwner]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCCExpirationMonthDescription.
	].! !

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:53:37'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:53:37'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:53:37'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 20:53:37'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 20:53:37'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 20:53:37'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 20:53:37'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 20:53:37'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 20:53:37'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 20:53:37'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 20:53:37'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 20:53:37'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:53:37'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:53:37'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:53:37'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:53:37'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:53:37'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:53:37'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:53:37'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:53:37'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:53:37'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:53:37'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:53:37'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:53:37'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:53:37'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:53:37'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:53:37'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 20:53:55' prior: 50506270!
test18CheckOutWithInvalidExpirationYearRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory validCCNumber
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: 1950
		creditCardOwner: testObjectsFactory validCCOwner]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCCExpirationYearDescription.
	].! !

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:53:56'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:53:56'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:53:56'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 20:53:56'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 20:53:56'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 20:53:56'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 20:53:56'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 20:53:56'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 20:53:56'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 20:53:56'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 20:53:56'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 20:53:56'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:53:56'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:53:56'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:53:56'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:53:56'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:53:56'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:53:56'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:53:56'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:53:56'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:53:56'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:53:56'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:53:56'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:53:56'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:53:56'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:53:56'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:53:56'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 20:54:16' prior: 50506294!
test19CheckOutWithInvalidOwnerRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory validCCNumber
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: testObjectsFactory invalidCCOwner]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = CreditCard invalidCCOwnerErrorDescription.
	].! !

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:54:18'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'jeo 6/12/2022 20:54:25'!
invalidCCOwner
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'jeo 6/12/2022 20:54:33' prior: 50514994!
invalidCCOwner
	^'a123'! !

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:54:35'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:54:35'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:54:35'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 20:54:35'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 20:54:35'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 20:54:35'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 20:54:35'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 20:54:35'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 20:54:35'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 20:54:35'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 20:54:35'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 20:54:35'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:54:35'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:54:35'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:54:35'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:54:35'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:54:35'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:54:35'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:54:35'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:54:35'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:54:35'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:54:35'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:54:35'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:54:35'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:54:35'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:54:35'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:54:35'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 20:55:19' prior: 50506435!
test20CheckOutCartRaisesTransactionId
	| interface book cartId1 cartId2 transaction1 transaction2 |
	interface := self createInterface.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId1 bookIsbn: book bookQuantity: 1.
	interface addToCart: cartId2 bookIsbn: book bookQuantity: 1.
	
	transaction1 := interface checkOutCart: cartId1 
		creditCardNumber: testObjectsFactory validCCNumber
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: testObjectsFactory validCCOwner.
	
	transaction2 := interface checkOutCart: cartId2 
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	self assert: transaction1 + 1 = transaction2.! !

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:55:20'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:55:20'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:55:20'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 20:55:20'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 20:55:20'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 20:55:20'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 20:55:20'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 20:55:20'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 20:55:20'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 20:55:20'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 20:55:20'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 20:55:20'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:55:20'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:55:20'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:55:20'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:55:20'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:55:20'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:55:20'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:55:20'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:55:20'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:55:20'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:55:20'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:55:20'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:55:20'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:55:20'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:55:20'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:55:20'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 20:55:42' prior: 50515092!
test20CheckOutCartRaisesTransactionId
	| interface book cartId1 cartId2 transaction1 transaction2 |
	interface := self createInterface.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId1 bookIsbn: book bookQuantity: 1.
	interface addToCart: cartId2 bookIsbn: book bookQuantity: 1.
	
	transaction1 := interface checkOutCart: cartId1 
		creditCardNumber: testObjectsFactory validCCNumber
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: testObjectsFactory validCCOwner.
	
	transaction2 := interface checkOutCart: cartId2 
		creditCardNumber: testObjectsFactory validCCNumber 
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: testObjectsFactory validCCOwner.
	
	self assert: transaction1 + 1 = transaction2.! !

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:55:43'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:55:43'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:55:43'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 20:55:43'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 20:55:43'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 20:55:43'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 20:55:43'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 20:55:43'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 20:55:43'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 20:55:43'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 20:55:43'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 20:55:43'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:55:43'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:55:43'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:55:43'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:55:43'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:55:43'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:55:43'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:55:43'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:55:43'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:55:43'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:55:43'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:55:43'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:55:43'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:55:43'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:55:43'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:55:43'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 20:56:03' prior: 50506603!
test21ListPurchasesForClientWithOneSale
	| interface book cartId listPurchases |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory validCCNumber 
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: testObjectsFactory validCCOwner.
	
	listPurchases := interface listPurchasesClientId: testObjectsFactory validClientId password: testObjectsFactory validPassword.
	self assert: listPurchases items includes: book.
	self assert: 1 equals: (listPurchases items occurrencesOf: book).
	self assert: 10 equals: listPurchases total.! !

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:56:04'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:56:04'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:56:04'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 20:56:04'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 20:56:04'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 20:56:04'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 20:56:04'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 20:56:04'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 20:56:04'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 20:56:04'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 20:56:04'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 20:56:04'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:56:04'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:56:04'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:56:04'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:56:04'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:56:04'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:56:04'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:56:04'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:56:04'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:56:04'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:56:04'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:56:04'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:56:04'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:56:04'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:56:04'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:56:04'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 20:56:20' prior: 50507739!
test22ListPurchasesForClientWithTwoSales
	| interface book listPurchases cartId1 cartId2 |
	interface := self createInterface.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId1 bookIsbn: book bookQuantity: 1.
	interface addToCart: cartId2 bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId1
		creditCardNumber: testObjectsFactory validCCNumber
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: testObjectsFactory validCCOwner.
	
	interface checkOutCart: cartId2
		creditCardNumber: 1111111111111111
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: 'A'.
	
	listPurchases := interface listPurchasesClientId: testObjectsFactory validClientId password: testObjectsFactory validPassword.
	self assert: listPurchases items includes: book.
	self assert: 2 equals: (listPurchases items occurrencesOf: book).
	self assert: 20 equals: listPurchases total.! !
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 20:56:33' prior: 50515457!
test22ListPurchasesForClientWithTwoSales
	| interface book listPurchases cartId1 cartId2 |
	interface := self createInterface.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId1 bookIsbn: book bookQuantity: 1.
	interface addToCart: cartId2 bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId1
		creditCardNumber: testObjectsFactory validCCNumber
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: testObjectsFactory validCCOwner.
	
	interface checkOutCart: cartId2
		creditCardNumber: testObjectsFactory validCCNumber
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: testObjectsFactory validCCOwner.
	
	listPurchases := interface listPurchasesClientId: testObjectsFactory validClientId password: testObjectsFactory validPassword.
	self assert: listPurchases items includes: book.
	self assert: 2 equals: (listPurchases items occurrencesOf: book).
	self assert: 20 equals: listPurchases total.! !

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:56:35'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:56:35'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:56:35'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 20:56:35'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 20:56:35'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 20:56:35'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 20:56:35'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 20:56:35'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 20:56:35'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 20:56:35'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 20:56:35'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 20:56:35'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:56:35'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:56:35'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:56:35'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:56:35'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:56:35'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:56:35'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:56:35'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:56:35'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:56:35'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:56:35'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:56:35'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:56:35'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:56:35'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:56:35'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:56:35'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 20:56:57' prior: 50507942!
test23ListPurchasesForInvalidClientIdRaisesError
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory validCCNumber 
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: testObjectsFactory validCCOwner.
	
	self should: [interface listPurchasesClientId: testObjectsFactory invalidClientId password: testObjectsFactory validPassword]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidAuthenticationErrorMessage
			]! !

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:56:58'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:56:58'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:56:58'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 20:56:58'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 20:56:58'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 20:56:58'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 20:56:58'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 20:56:58'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 20:56:58'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 20:56:58'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 20:56:58'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 20:56:58'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:56:58'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:56:58'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:56:58'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:56:58'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:56:58'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:56:58'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:56:58'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:56:58'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:56:58'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:56:58'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:56:58'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:56:58'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:56:58'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:56:58'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:56:58'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 20:57:20' prior: 50508507!
test24ListPurchasesForInvalidPasswordRaisesError
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory validCCNumber
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: testObjectsFactory validCCOwner.
	
	self should: [interface listPurchasesClientId: testObjectsFactory validClientId password: testObjectsFactory invalidPassword]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidAuthenticationErrorMessage
			]! !

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:57:21'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 20:57:21'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 20:57:21'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 20:57:21'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 20:57:21'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 20:57:21'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 20:57:21'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 20:57:21'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 20:57:21'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 20:57:21'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 20:57:21'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 20:57:21'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:57:21'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 20:57:21'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 20:57:21'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 20:57:21'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 20:57:21'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 20:57:21'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 20:57:21'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 20:57:21'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 20:57:21'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 20:57:21'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 20:57:21'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 20:57:21'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 20:57:21'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 20:57:21'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 20:57:21'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 20:58:40'!
checkoutCartId: interface withInterface: cartId

	^ interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory validCCNumber
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: testObjectsFactory validCCOwner! !
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 20:58:40' prior: 50515747!
test24ListPurchasesForInvalidPasswordRaisesError
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self checkoutCartId: interface withInterface: cartId.
	
	self should: [interface listPurchasesClientId: testObjectsFactory validClientId password: testObjectsFactory invalidPassword]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidAuthenticationErrorMessage
			]! !
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 20:59:40' prior: 50513990!
test11CheckOutEmptyCartRaisesError
	
	| cartId interface |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	
	self should: [self checkoutCartId: cartId withInterface: interface] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: (interface listCart: cartId) isEmpty.
	]. 
	! !

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 20:59:41'!
ERROR!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 21:00:06' prior: 50515865!
checkoutCartId: cartId withInterface: interface

	^ interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory validCCNumber
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: testObjectsFactory validCCOwner! !

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 21:00:08'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 21:00:08'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 21:00:08'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 21:00:08'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 21:00:08'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 21:00:08'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 21:00:08'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 21:00:08'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 21:00:08'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 21:00:08'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 21:00:08'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 21:00:08'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 21:00:08'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 21:00:08'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 21:00:08'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 21:00:08'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 21:00:08'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 21:00:08'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 21:00:08'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 21:00:08'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 21:00:08'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 21:00:08'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 21:00:08'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 21:00:08'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 21:00:08'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 21:00:08'!
ERROR!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 21:00:08'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 21:00:08'!
ERROR!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 21:00:20'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 21:00:20'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 21:00:20'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 21:00:20'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 21:00:20'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 21:00:20'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 21:00:20'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 21:00:20'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 21:00:20'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 21:00:20'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 21:00:20'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 21:00:20'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 21:00:20'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 21:00:20'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 21:00:20'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 21:00:20'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 21:00:20'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 21:00:20'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 21:00:20'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 21:00:20'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 21:00:20'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 21:00:20'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 21:00:20'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 21:00:20'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 21:00:20'!
ERROR!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 21:00:20'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 21:00:20'!
ERROR!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 21:00:45' prior: 50515878!
test24ListPurchasesForInvalidPasswordRaisesError
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self checkoutCartId: cartId  withInterface: interface.
	
	self should: [interface listPurchasesClientId: testObjectsFactory validClientId password: testObjectsFactory invalidPassword]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidAuthenticationErrorMessage
			]! !

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 21:00:48'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 21:00:51'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 21:00:51'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 21:00:51'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 21:00:51'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 21:00:51'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 21:00:51'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 21:00:51'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 21:00:51'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 21:00:51'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 21:00:51'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 21:00:51'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 21:00:51'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 21:00:51'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 21:00:51'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 21:00:51'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 21:00:51'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 21:00:51'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 21:00:51'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 21:00:51'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 21:00:51'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 21:00:51'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 21:00:51'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 21:00:51'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 21:00:51'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 21:00:51'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 21:00:51'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 21:01:30' prior: 50514102!
test12CheckOutCartWithOneBook
	
	| cartId interface book purchaseList |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self checkoutCartId: cartId withInterface: interface. 
		
	purchaseList := interface listPurchasesClientId: testObjectsFactory validClientId password: testObjectsFactory validPassword.
	self assert: (purchaseList items includes: book).
	self assert: 1 equals: (purchaseList items occurrencesOf: book).
	self assert: 1 equals: purchaseList items size.
	! !

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 21:01:31'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 21:01:31'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 21:01:31'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 21:01:31'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 21:01:31'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 21:01:31'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 21:01:31'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 21:01:31'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 21:01:31'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 21:01:31'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 21:01:31'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 21:01:31'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 21:01:31'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 21:01:31'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 21:01:31'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 21:01:31'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 21:01:31'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 21:01:31'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 21:01:31'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 21:01:31'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 21:01:31'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 21:01:31'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 21:01:31'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 21:01:31'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 21:01:31'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 21:01:31'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 21:01:31'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 21:02:00' prior: 50514220!
test13CheckOutCartWithTwoBooks
	
	| cartId interface book purchaseList |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 2.
	
	self checkoutCartId: cartId withInterface: interface.
		
	purchaseList := interface listPurchasesClientId: testObjectsFactory validClientId password: testObjectsFactory validPassword.
	self assert: (purchaseList items includes: book).
	self assert: 2 equals: (purchaseList items occurrencesOf: book).
	self assert: 2 equals: purchaseList items size.
	! !
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 21:02:41' prior: 50514359!
test14CheckOutInvalidCartRaisesError
	
	| interface |
	interface := self createInterface.

	self should: [self checkoutCartId: testObjectsFactory invalidCartId withInterface: interface.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCartIdErrorDescription.
	].! !

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 21:02:42'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 21:02:42'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 21:02:42'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 21:02:42'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 21:02:42'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 21:02:42'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 21:02:42'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 21:02:42'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 21:02:42'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 21:02:42'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 21:02:42'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 21:02:42'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 21:02:42'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 21:02:42'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 21:02:42'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 21:02:42'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 21:02:42'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 21:02:42'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 21:02:42'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 21:02:42'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 21:02:42'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 21:02:42'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 21:02:42'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 21:02:42'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 21:02:42'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 21:02:42'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 21:02:42'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 21:03:08' prior: 50514501!
test15CheckOutSameCartTwiceRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self checkoutCartId: cartId withInterface: interface.
	
	self should: [self checkoutCartId: cartId withInterface: interface.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCartIdErrorDescription.
	].! !

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 21:03:10'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 21:03:10'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 21:03:10'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 21:03:10'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 21:03:10'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 21:03:10'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 21:03:10'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 21:03:10'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 21:03:10'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 21:03:10'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 21:03:10'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 21:03:10'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 21:03:10'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 21:03:10'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 21:03:10'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 21:03:10'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 21:03:10'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 21:03:10'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 21:03:10'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 21:03:10'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 21:03:10'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 21:03:10'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 21:03:10'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 21:03:10'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 21:03:10'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 21:03:10'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 21:03:10'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 21:03:54' prior: 50515215!
test20CheckOutCartRaisesTransactionId
	| interface book cartId1 cartId2 transaction1 transaction2 |
	interface := self createInterface.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId1 bookIsbn: book bookQuantity: 1.
	interface addToCart: cartId2 bookIsbn: book bookQuantity: 1.
	
	transaction1 := self checkoutCartId: cartId1 withInterface: interface.
	transaction2 := self checkoutCartId: cartId2 withInterface: interface.
	
	self assert: transaction1 + 1 = transaction2.! !

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 21:03:55'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 21:03:55'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 21:03:55'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 21:03:55'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 21:03:55'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 21:03:55'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 21:03:55'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 21:03:55'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 21:03:55'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 21:03:55'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 21:03:55'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 21:03:55'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 21:03:55'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 21:03:55'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 21:03:55'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 21:03:55'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 21:03:55'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 21:03:55'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 21:03:55'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 21:03:55'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 21:03:55'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 21:03:55'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 21:03:55'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 21:03:55'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 21:03:55'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 21:03:55'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 21:03:55'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 21:04:04' prior: 50515339!
test21ListPurchasesForClientWithOneSale
	| interface book cartId listPurchases |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self checkoutCartId: cartId withInterface: interface.
	
	listPurchases := interface listPurchasesClientId: testObjectsFactory validClientId password: testObjectsFactory validPassword.
	self assert: listPurchases items includes: book.
	self assert: 1 equals: (listPurchases items occurrencesOf: book).
	self assert: 10 equals: listPurchases total.! !

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 21:04:05'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 21:04:05'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 21:04:05'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 21:04:05'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 21:04:05'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 21:04:05'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 21:04:05'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 21:04:05'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 21:04:05'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 21:04:05'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 21:04:05'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 21:04:05'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 21:04:05'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 21:04:05'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 21:04:05'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 21:04:05'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 21:04:05'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 21:04:05'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 21:04:05'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 21:04:05'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 21:04:05'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 21:04:05'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 21:04:05'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 21:04:05'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 21:04:05'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 21:04:05'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 21:04:05'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 21:04:25' prior: 50515498!
test22ListPurchasesForClientWithTwoSales
	| interface book listPurchases cartId1 cartId2 |
	interface := self createInterface.
	cartId1 := self createCartWithInterface: interface.
	cartId2 := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId1 bookIsbn: book bookQuantity: 1.
	interface addToCart: cartId2 bookIsbn: book bookQuantity: 1.
	
	self checkoutCartId: cartId1 withInterface: interface.
	self checkoutCartId: cartId2 withInterface: interface.
	
	listPurchases := interface listPurchasesClientId: testObjectsFactory validClientId password: testObjectsFactory validPassword.
	self assert: listPurchases items includes: book.
	self assert: 2 equals: (listPurchases items occurrencesOf: book).
	self assert: 20 equals: listPurchases total.! !

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 21:04:26'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 21:04:26'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 21:04:26'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 21:04:26'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 21:04:26'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 21:04:26'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 21:04:26'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 21:04:26'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 21:04:26'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 21:04:26'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 21:04:26'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 21:04:26'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 21:04:26'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 21:04:26'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 21:04:26'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 21:04:26'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 21:04:26'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 21:04:26'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 21:04:26'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 21:04:26'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 21:04:26'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 21:04:26'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 21:04:26'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 21:04:26'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 21:04:26'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 21:04:26'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 21:04:26'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 21:04:35' prior: 50515629!
test23ListPurchasesForInvalidClientIdRaisesError
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self checkoutCartId: cartId withInterface: interface.
	
	self should: [interface listPurchasesClientId: testObjectsFactory invalidClientId password: testObjectsFactory validPassword]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidAuthenticationErrorMessage
			]! !
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 21:04:44' prior: 50516115!
test24ListPurchasesForInvalidPasswordRaisesError
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self checkoutCartId: cartId withInterface: interface.
	
	self should: [interface listPurchasesClientId: testObjectsFactory validClientId password: testObjectsFactory invalidPassword]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidAuthenticationErrorMessage
			]! !

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 21:04:45'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 21:04:45'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 21:04:45'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 21:04:45'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 21:04:45'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 21:04:45'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 21:04:45'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 21:04:45'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 21:04:45'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 21:04:45'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 21:04:45'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 21:04:45'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 21:04:45'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 21:04:45'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 21:04:45'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 21:04:45'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 21:04:45'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 21:04:45'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 21:04:45'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 21:04:45'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 21:04:45'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 21:04:45'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 21:04:45'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 21:04:45'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 21:04:45'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 21:04:45'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 21:04:45'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 21:07:48' prior: 50516462!
test15CheckOutSameCartTwiceRaisesError
	
	| interface book cartId purchaseList |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self checkoutCartId: cartId withInterface: interface.
	
	self should: [self checkoutCartId: cartId withInterface: interface.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidCartIdErrorDescription.
			purchaseList := interface listPurchasesClientId: testObjectsFactory validClientId password: testObjectsFactory validPassword.
			self assert: (purchaseList items includes: book).
			self assert: 1 equals: (purchaseList items occurrencesOf: book).
			self assert: 1 equals: purchaseList items size.
	].! !

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 21:07:51'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 21:07:51'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 21:07:51'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 21:07:51'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 21:07:51'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 21:07:51'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 21:07:51'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 21:07:51'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 21:07:51'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 21:07:51'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 21:07:51'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 21:07:51'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 21:07:51'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 21:07:51'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 21:07:51'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 21:07:51'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 21:07:51'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 21:07:51'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 21:07:51'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 21:07:51'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 21:07:51'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 21:07:51'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 21:07:51'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 21:07:51'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 21:07:51'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 21:07:51'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 21:07:51'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 21:08:50' prior: 50514623!
test16CheckOutWithInvalidCCNumberRaisesError
	
	| interface book cartId purchaseList |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory invalidCCNumber
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: testObjectsFactory validCCOwner]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = CreditCard invalidCCNumberErrorDescription.
			purchaseList := interface listPurchasesClientId: testObjectsFactory validClientId password: testObjectsFactory validPassword.
			self assert: purchaseList items isEmpty.
	].! !

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 21:08:52'!
ERROR!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 20:53:13' prior: 50517163!
test16CheckOutWithInvalidCCNumberRaisesError
	
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	 
	interface addToCart: cartId bookIsbn: book bookQuantity: 1.
	
	self should: [interface checkOutCart: cartId
		creditCardNumber: testObjectsFactory invalidCCNumber
		creditCardExpirationMonth: testObjectsFactory today monthIndex
		creditCardExpirationYear: testObjectsFactory today yearNumber + 1
		creditCardOwner: testObjectsFactory validCCOwner]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText = CreditCard invalidCCNumberErrorDescription.
	].! !

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 21:09:48'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 21:09:48'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 21:09:48'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 21:09:48'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 21:09:48'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 21:09:48'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 21:09:48'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 21:09:48'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 21:09:48'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 21:09:48'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 21:09:48'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 21:09:48'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 21:09:48'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 21:09:48'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 21:09:48'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 21:09:48'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 21:09:48'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 21:09:48'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 21:09:48'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 21:09:48'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 21:09:48'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 21:09:48'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 21:09:48'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 21:09:48'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 21:09:48'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 21:09:48'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 21:09:48'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 21:10:33' prior: 50516910!
test23ListPurchasesForInvalidClientIdRaisesError
	| interface book |
	interface := self createInterface.
	
	self should: [interface listPurchasesClientId: testObjectsFactory invalidClientId password: testObjectsFactory validPassword]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidAuthenticationErrorMessage
			]! !
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 21:10:49' prior: 50517312!
test23ListPurchasesForInvalidClientIdRaisesError
	| interface |
	interface := self createInterface.
	
	self should: [interface listPurchasesClientId: testObjectsFactory invalidClientId password: testObjectsFactory validPassword]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidAuthenticationErrorMessage
			]! !

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 21:10:50'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 21:10:50'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 21:10:50'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 21:10:50'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 21:10:50'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 21:10:50'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 21:10:50'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 21:10:50'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 21:10:50'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 21:10:50'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 21:10:50'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 21:10:50'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 21:10:50'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 21:10:50'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 21:10:50'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 21:10:50'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 21:10:50'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 21:10:50'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 21:10:50'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 21:10:50'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 21:10:50'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 21:10:50'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 21:10:50'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 21:10:50'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 21:10:50'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 21:10:50'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 21:10:50'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 21:11:03' prior: 50516933!
test24ListPurchasesForInvalidPasswordRaisesError
	| interface |
	interface := self createInterface.
	
	self should: [interface listPurchasesClientId: testObjectsFactory validClientId password: testObjectsFactory invalidPassword]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface invalidAuthenticationErrorMessage
			]! !

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 21:11:06'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 21:11:06'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 21:11:06'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 21:11:06'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 21:11:06'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 21:11:06'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 21:11:06'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 21:11:06'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 21:11:06'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 21:11:06'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 21:11:06'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 21:11:06'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 21:11:06'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 21:11:06'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 21:11:06'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 21:11:06'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 21:11:06'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 21:11:06'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 21:11:06'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 21:11:06'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 21:11:06'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 21:11:06'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 21:11:06'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 21:11:06'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 21:11:06'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 21:11:06'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 21:11:06'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 21:12:05' prior: 50512520!
test25CartDiesHalfHourAfterLastOperation
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	lifetimeBehavior := [:aCartId | false].
	self should: [interface addToCart: cartId bookIsbn: book bookQuantity: 1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface cartExpiredErrorDescription.
			self assert: (interface listCart: cartId) isEmpty.
			]! !

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 21:12:06'!
ERROR!
!InterfaceTest methodsFor: 'tests' stamp: 'jeo 6/12/2022 21:13:36' prior: 50517535!
test25CartDiesHalfHourAfterLastOperation
	| interface book cartId |
	interface := self createInterface.
	cartId := self createCartWithInterface: interface.
	book := testObjectsFactory itemSellByTheStore.
	
	lifetimeBehavior := [:aCartId | false].
	self should: [interface addToCart: cartId bookIsbn: book bookQuantity: 1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Interface cartExpiredErrorDescription.
			]! !

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 21:13:37'!
PASSED!

!testRun: #InterfaceTest #test01NewCartListsNoBooks stamp: 'jeo 6/12/2022 21:13:37'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithInvalidClientId stamp: 'jeo 6/12/2022 21:13:37'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithInvalidPassword stamp: 'jeo 6/12/2022 21:13:37'!
PASSED!

!testRun: #InterfaceTest #test04TwoCreatedCartsHaveDiffentCardId stamp: 'jeo 6/12/2022 21:13:37'!
PASSED!

!testRun: #InterfaceTest #test05AddBookToValidCart stamp: 'jeo 6/12/2022 21:13:37'!
PASSED!

!testRun: #InterfaceTest #test06AddBookToTwoValidCarts stamp: 'jeo 6/12/2022 21:13:37'!
PASSED!

!testRun: #InterfaceTest #test06AddTwoBookToValidCart stamp: 'jeo 6/12/2022 21:13:37'!
PASSED!

!testRun: #InterfaceTest #test07AddBookToInvalidCart stamp: 'jeo 6/12/2022 21:13:37'!
PASSED!

!testRun: #InterfaceTest #test08AddInvalidBookToCart stamp: 'jeo 6/12/2022 21:13:37'!
PASSED!

!testRun: #InterfaceTest #test09AddBookWithInvalidQuantity stamp: 'jeo 6/12/2022 21:13:37'!
PASSED!

!testRun: #InterfaceTest #test10ListCartWithInvalidCartId stamp: 'jeo 6/12/2022 21:13:37'!
PASSED!

!testRun: #InterfaceTest #test11CheckOutEmptyCartRaisesError stamp: 'jeo 6/12/2022 21:13:37'!
PASSED!

!testRun: #InterfaceTest #test12CheckOutCartWithOneBook stamp: 'jeo 6/12/2022 21:13:37'!
PASSED!

!testRun: #InterfaceTest #test13CheckOutCartWithTwoBooks stamp: 'jeo 6/12/2022 21:13:37'!
PASSED!

!testRun: #InterfaceTest #test14CheckOutInvalidCartRaisesError stamp: 'jeo 6/12/2022 21:13:37'!
PASSED!

!testRun: #InterfaceTest #test15CheckOutSameCartTwiceRaisesError stamp: 'jeo 6/12/2022 21:13:37'!
PASSED!

!testRun: #InterfaceTest #test16CheckOutWithInvalidCCNumberRaisesError stamp: 'jeo 6/12/2022 21:13:37'!
PASSED!

!testRun: #InterfaceTest #test17CheckOutWithInvalidExpirationMonthRaisesError stamp: 'jeo 6/12/2022 21:13:37'!
PASSED!

!testRun: #InterfaceTest #test18CheckOutWithInvalidExpirationYearRaisesError stamp: 'jeo 6/12/2022 21:13:37'!
PASSED!

!testRun: #InterfaceTest #test19CheckOutWithInvalidOwnerRaisesError stamp: 'jeo 6/12/2022 21:13:37'!
PASSED!

!testRun: #InterfaceTest #test20CheckOutCartRaisesTransactionId stamp: 'jeo 6/12/2022 21:13:37'!
PASSED!

!testRun: #InterfaceTest #test21ListPurchasesForClientWithOneSale stamp: 'jeo 6/12/2022 21:13:37'!
PASSED!

!testRun: #InterfaceTest #test22ListPurchasesForClientWithTwoSales stamp: 'jeo 6/12/2022 21:13:37'!
PASSED!

!testRun: #InterfaceTest #test23ListPurchasesForInvalidClientIdRaisesError stamp: 'jeo 6/12/2022 21:13:37'!
PASSED!

!testRun: #InterfaceTest #test24ListPurchasesForInvalidPasswordRaisesError stamp: 'jeo 6/12/2022 21:13:37'!
PASSED!

!testRun: #InterfaceTest #test25CartDiesHalfHourAfterLastOperation stamp: 'jeo 6/12/2022 21:13:37'!
PASSED!